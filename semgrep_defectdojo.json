{"errors": [], "paths": {"_comment": "<add --verbose for a list of skipped paths>", "scanned": ["docs/layouts/404.html", "dojo/__init__.py", "dojo/admin.py", "dojo/api_v2/__init__.py", "dojo/api_v2/exception_handler.py", "dojo/api_v2/permissions.py", "dojo/api_v2/prefetch/__init__.py", "dojo/api_v2/prefetch/mixins.py", "dojo/api_v2/prefetch/prefetcher.py", "dojo/api_v2/prefetch/schema.py", "dojo/api_v2/prefetch/utils.py", "dojo/api_v2/schema/__init__.py", "dojo/api_v2/schema/extra_schema.py", "dojo/api_v2/schema/utils.py", "dojo/api_v2/serializers.py", "dojo/api_v2/views.py", "dojo/apps.py", "dojo/authorization/__init__.py", "dojo/authorization/authorization.py", "dojo/authorization/authorization_decorators.py", "dojo/authorization/roles_permissions.py", "dojo/banner/__init__.py", "dojo/banner/urls.py", "dojo/banner/views.py", "dojo/benchmark/__init__.py", "dojo/benchmark/urls.py", "dojo/benchmark/views.py", "dojo/celery.py", "dojo/checks.py", "dojo/components/__init__.py", "dojo/components/sql_group_concat.py", "dojo/components/urls.py", "dojo/components/views.py", "dojo/context_processors.py", "dojo/cred/__init__.py", "dojo/cred/queries.py", "dojo/cred/urls.py", "dojo/cred/views.py", "dojo/db_migrations/0001_initial.py", "dojo/db_migrations/0001_squashed_0090_index_duplicate_finding.py", "dojo/db_migrations/0002_auto_20190503_1817.py", "dojo/db_migrations/0003_test_title.py", "dojo/db_migrations/0004_cve_field.py", "dojo/db_migrations/0005_repo_field.py", "dojo/db_migrations/0006_django2_upgrade.py", "dojo/db_migrations/0007_note_additions.py", "dojo/db_migrations/0008_finding_mitigation.py", "dojo/db_migrations/0009_endpoint_remediation.py", "dojo/db_migrations/0010_jira_conf_configuration_name.py", "dojo/db_migrations/0011_finding_template_activity.py", "dojo/db_migrations/0012_jira_finding_age.py", "dojo/db_migrations/0013_jira_info_level.py", "dojo/db_migrations/0014_jira_conf_resolution_mappings.py", "dojo/db_migrations/0015_findingimage_caption.py", "dojo/db_migrations/0016_increase_filepath_length.py", "dojo/db_migrations/0017_auto_20190827_1421.py", "dojo/db_migrations/0018_sonarqube_api_integration.py", "dojo/db_migrations/0019_notetype_additions.py", "dojo/db_migrations/0020_system_settings_allow_anonymous_survey_repsonse.py", "dojo/db_migrations/0021_cve_index.py", "dojo/db_migrations/0022_google_sheet_sync_additions.py", "dojo/db_migrations/0023_SAST_track_unique_vulnerabilities.py", "dojo/db_migrations/0024_cve_fix_1553.py", "dojo/db_migrations/0025_jira_security_issuetype.py", "dojo/db_migrations/0026_login_banner.py", "dojo/db_migrations/0027_jira_issue_type_settings.py", "dojo/db_migrations/0028_finding_indices.py", "dojo/db_migrations/0029_cve_regex.py", "dojo/db_migrations/0030_prod_type_meta.py", "dojo/db_migrations/0031_finding_component.py", "dojo/db_migrations/0032_system_settings_enable_auditlog.py", "dojo/db_migrations/0033_remove_finding_duplicate_list.py", "dojo/db_migrations/0034_add_github_support.py", "dojo/db_migrations/0035_push_all_issues_help_text_rename_gh_fields.py", "dojo/db_migrations/0036_system_settings_email_address.py", "dojo/db_migrations/0037_email_notification_overhaul.py", "dojo/db_migrations/0038_timezone_update.py", "dojo/db_migrations/0039_test_version.py", "dojo/db_migrations/0040_finding_cwe_index.py", "dojo/db_migrations/0041_engagement_survey_import.py", "dojo/db_migrations/0042_risk_acceptance_improvements.py", "dojo/db_migrations/0043_finding_hash_code_index.py", "dojo/db_migrations/0044_required_prod_type.py", "dojo/db_migrations/0045_slack_help_text.py", "dojo/db_migrations/0046_endpoint_status.py", "dojo/db_migrations/0047_jira_minimum_severity_default.py", "dojo/db_migrations/0048_sla_notifications.py", "dojo/db_migrations/0049_create_endpoint_status.py", "dojo/db_migrations/0050_deduplication_on_engagement.py", "dojo/db_migrations/0051_regulation_categories.py", "dojo/db_migrations/0052_cvssv3_field.py", "dojo/db_migrations/0053_engagement_notes.py", "dojo/db_migrations/0054_dojometa_finding.py", "dojo/db_migrations/0055_notifications_jira_update_verbose_name.py", "dojo/db_migrations/0056_index_component_name.py", "dojo/db_migrations/0057_ms_teams.py", "dojo/db_migrations/0058_document_finding_model.py", "dojo/db_migrations/0059_product_type_authorized_users.py", "dojo/db_migrations/0060_false_p_dedupe_indices.py", "dojo/db_migrations/0061_jira_webhook_secret.py", "dojo/db_migrations/0062_add_vuln_id_from_tool.py", "dojo/db_migrations/0063_jira_refactor.py", "dojo/db_migrations/0064_jira_refactor_populate.py", "dojo/db_migrations/0065_delete_empty_jira_project_configs.py", "dojo/db_migrations/0066_django_tagulous.py", "dojo/db_migrations/0067_max_dupes.py", "dojo/db_migrations/0068_file_upload.py", "dojo/db_migrations/0069_risk_acceptance.py", "dojo/db_migrations/0070_increase_alert_field_size.py", "dojo/db_migrations/0071_product_type_enhancement.py", "dojo/db_migrations/0072_composite_index.py", "dojo/db_migrations/0073_sheets_textfields.py", "dojo/db_migrations/0074_notifications_close_engagement.py", "dojo/db_migrations/0075_import_history.py", "dojo/db_migrations/0076_authorization.py", "dojo/db_migrations/0077_delete_dupulicates.py", "dojo/db_migrations/0078_cvssv3_rename_verbose_name.py", "dojo/db_migrations/0079_system_settings_disclaimer.py", "dojo/db_migrations/0080_jira_issue_templates.py", "dojo/db_migrations/0081_last_status_update.py", "dojo/db_migrations/0082_last_status_update_populate.py", "dojo/db_migrations/0083_remove_ipscan.py", "dojo/db_migrations/0084_add_extras_in_tool.py", "dojo/db_migrations/0085_add_publish_date_cvssv3_score.py", "dojo/db_migrations/0086_finding_groups.py", "dojo/db_migrations/0087_protect_jira_issues.py", "dojo/db_migrations/0088_import_history_cicd.py", "dojo/db_migrations/0089_unprotect_jira_project.py", "dojo/db_migrations/0090_index_duplicate_finding.py", "dojo/db_migrations/0091_npm_audit_path_censoring.py", "dojo/db_migrations/0092_is_mitigated.py", "dojo/db_migrations/0093_django_tagging_removal.py", "dojo/db_migrations/0094_remove_system_settings_s_finding_severity_naming.py", "dojo/db_migrations/0095_remove_old_product_contact_fields.py", "dojo/db_migrations/0096_grype_name_change.py", "dojo/db_migrations/0097_engagement_type.py", "dojo/db_migrations/0098_anchore_vuln_id.py", "dojo/db_migrations/0099_delete_report.py", "dojo/db_migrations/0100_dojo_user_for_authv2.py", "dojo/db_migrations/0101_enable_features.py", "dojo/db_migrations/0102_dojo_group.py", "dojo/db_migrations/0103_report_notification.py", "dojo/db_migrations/0104_endpoint_userinfo_creation.py", "dojo/db_migrations/0105_endpoint_host_migration.py", "dojo/db_migrations/0106_role_model.py", "dojo/db_migrations/0107_global_role.py", "dojo/db_migrations/0108_blank_fields.py", "dojo/db_migrations/0109_group_user_role.py", "dojo/db_migrations/0110_auth_v2_migrate_user_roles.py", "dojo/db_migrations/0111_group_user_rename.py", "dojo/db_migrations/0112_group_user_rename_2.py", "dojo/db_migrations/0113_endpoint_protocol.py", "dojo/db_migrations/0114_cyclonedx_vuln_uniqu.py", "dojo/db_migrations/0115_language_types.py", "dojo/db_migrations/0116_test_type_active.py", "dojo/db_migrations/0117_usercontactinfo_force_password_reset.py", "dojo/db_migrations/0118_remove_finding_images.py", "dojo/db_migrations/0119_default_group_is_staff.py", "dojo/db_migrations/0120_sonarqube_test_and_clean.py", "dojo/db_migrations/0121_user_restrict.py", "dojo/db_migrations/0122_cobaltio_product.py", "dojo/db_migrations/0123_scan_type.py", "dojo/db_migrations/0124_sonarqube_api_type_length_change.py", "dojo/db_migrations/0125_sonarqube_clean.py", "dojo/db_migrations/0126_finding_publish_date.py", "dojo/db_migrations/0127_remove_hashes.py", "dojo/db_migrations/0128_pytz_update.py", "dojo/db_migrations/0129_finding_deprecated_fields.py", "dojo/db_migrations/0130_product_api_scan_configuration.py", "dojo/db_migrations/0131_migrate_sonarcube_cobalt.py", "dojo/db_migrations/0132_remove_configs_from_test.py", "dojo/db_migrations/0133_finding_service.py", "dojo/db_migrations/0134_sonarque_cobaltio_removal.py", "dojo/db_migrations/0135_email_from.py", "dojo/db_migrations/0136_default_group_help_text.py", "dojo/db_migrations/0137_system_settings_enable_endpoint_metadata_import.py", "dojo/db_migrations/0138_remove_authorized_users.py", "dojo/db_migrations/0139_google_sheets_rules_framework_enable.py", "dojo/db_migrations/0140_auth_group.py", "dojo/db_migrations/0141_enable_user_profile_editable.py", "dojo/db_migrations/0142_environment_delete.py", "dojo/db_migrations/0143_objects.py", "dojo/db_migrations/0144_import_action_untouched.py", "dojo/db_migrations/0145_system_settings_default_group_email_pattern.py", "dojo/db_migrations/0146_lead_optional.py", "dojo/db_migrations/0147_rename_sslyze_parser.py", "dojo/db_migrations/0148_default_notifications.py", "dojo/db_migrations/0149_harmonize_user_format.py", "dojo/db_migrations/0150_dedupe_endpoint_status.py", "dojo/db_migrations/0151_index_endpoint_status.py", "dojo/db_migrations/0152_notifications_template.py", "dojo/db_migrations/0153_migrate_endpoint_mitigated.py", "dojo/db_migrations/0154_remove_endpoint_mitigated.py", "dojo/db_migrations/0155_enable_finding_groups.py", "dojo/db_migrations/0156_migrate_finding_groups_setting.py", "dojo/db_migrations/__init__.py", "dojo/decorators.py", "dojo/development_environment/__init__.py", "dojo/development_environment/urls.py", "dojo/development_environment/views.py", "dojo/endpoint/__init__.py", "dojo/endpoint/queries.py", "dojo/endpoint/urls.py", "dojo/endpoint/utils.py", "dojo/endpoint/views.py", "dojo/engagement/__init__.py", "dojo/engagement/queries.py", "dojo/engagement/services.py", "dojo/engagement/urls.py", "dojo/engagement/views.py", "dojo/filters.py", "dojo/finding/__init__.py", "dojo/finding/helper.py", "dojo/finding/queries.py", "dojo/finding/urls.py", "dojo/finding/views.py", "dojo/finding_group/__init__.py", "dojo/finding_group/queries.py", "dojo/finding_group/urls.py", "dojo/finding_group/views.py", "dojo/forms.py", "dojo/github.py", "dojo/github_issue_link/__init__.py", "dojo/github_issue_link/urls.py", "dojo/github_issue_link/views.py", "dojo/google_sheet/__init__.py", "dojo/google_sheet/urls.py", "dojo/google_sheet/views.py", "dojo/group/__init__.py", "dojo/group/queries.py", "dojo/group/urls.py", "dojo/group/utils.py", "dojo/group/views.py", "dojo/home/__init__.py", "dojo/home/urls.py", "dojo/home/views.py", "dojo/importers/importer/importer.py", "dojo/importers/reimporter/reimporter.py", "dojo/importers/reimporter/utils.py", "dojo/importers/utils.py", "dojo/jira_link/__init__.py", "dojo/jira_link/helper.py", "dojo/jira_link/queries.py", "dojo/jira_link/urls.py", "dojo/jira_link/views.py", "dojo/management/__init__.py", "dojo/management/commands/__init__.py", "dojo/management/commands/clear_alerts.py", "dojo/management/commands/create_endpoint_status.py", "dojo/management/commands/csv_findings_export.py", "dojo/management/commands/dedupe.py", "dojo/management/commands/dupecheck.py", "dojo/management/commands/endpoint_migration.py", "dojo/management/commands/fix_0120.py", "dojo/management/commands/fix_broken_endpoint_status.py", "dojo/management/commands/fix_loop_duplicates.py", "dojo/management/commands/import_github_languages.py", "dojo/management/commands/import_surveys.py", "dojo/management/commands/initialize_permissions.py", "dojo/management/commands/initialize_test_types.py", "dojo/management/commands/jira_async_updates.py", "dojo/management/commands/jira_refactor_data_migration.py", "dojo/management/commands/jira_status_reconciliation.py", "dojo/management/commands/migrate_authorization_v2.py", "dojo/management/commands/migrate_staff_users.py", "dojo/management/commands/migrate_surveys.py", "dojo/management/commands/migrate_textquestions.py", "dojo/management/commands/print_settings.py", "dojo/management/commands/push_to_jira_update.py", "dojo/management/commands/rename_whitesource_findings.py", "dojo/management/commands/risk_acceptance_handle_expiration.py", "dojo/management/commands/sla_notifications.py", "dojo/management/commands/stamp_finding_last_reviewed.py", "dojo/management/commands/system_settings.py", "dojo/management/commands/test_celery_decorator.py", "dojo/management/commands/validatededupeconfig.py", "dojo/metrics/__init__.py", "dojo/metrics/urls.py", "dojo/metrics/views.py", "dojo/middleware.py", "dojo/models.py", "dojo/note_type/__init__.py", "dojo/note_type/urls.py", "dojo/note_type/views.py", "dojo/notes/__init__.py", "dojo/notes/urls.py", "dojo/notes/views.py", "dojo/notifications/__init__.py", "dojo/notifications/helper.py", "dojo/notifications/urls.py", "dojo/notifications/views.py", "dojo/object/__init__.py", "dojo/object/urls.py", "dojo/object/views.py", "dojo/okta.py", "dojo/pipeline.py", "dojo/product/__init__.py", "dojo/product/queries.py", "dojo/product/urls.py", "dojo/product/views.py", "dojo/product_type/__init__.py", "dojo/product_type/queries.py", "dojo/product_type/urls.py", "dojo/product_type/views.py", "dojo/regulations/__init__.py", "dojo/regulations/urls.py", "dojo/regulations/views.py", "dojo/reports/__init__.py", "dojo/reports/urls.py", "dojo/reports/views.py", "dojo/reports/widgets.py", "dojo/request_cache/__init__.py", "dojo/request_cache/middleware.py", "dojo/risk_acceptance/__init__.py", "dojo/risk_acceptance/api.py", "dojo/risk_acceptance/helper.py", "dojo/rules/__init__.py", "dojo/rules/urls.py", "dojo/rules/views.py", "dojo/search/__init__.py", "dojo/search/urls.py", "dojo/search/views.py", "dojo/settings/__init__.py", "dojo/settings/attribute-maps/django_saml_uri.py", "dojo/settings/attribute-maps/saml_uri.py", "dojo/settings/exception_filter.py", "dojo/settings/settings.dist.py", "dojo/settings/settings.py", "dojo/settings/unittest.py", "dojo/survey/__init__.py", "dojo/survey/urls.py", "dojo/survey/views.py", "dojo/system_settings/__init__.py", "dojo/system_settings/urls.py", "dojo/system_settings/views.py", "dojo/tasks.py", "dojo/templates/403.html", "dojo/templates/404.html", "dojo/templates/base.html", "dojo/templates/defectDojo-engagement-survey/add_choices.html", "dojo/templates/defectDojo-engagement-survey/add_engagement.html", "dojo/templates/defectDojo-engagement-survey/add_survey.html", "dojo/templates/defectDojo-engagement-survey/add_surveys.html", "dojo/templates/defectDojo-engagement-survey/answer_survey.html", "dojo/templates/defectDojo-engagement-survey/assign_survey.html", "dojo/templates/defectDojo-engagement-survey/create_questionnaire.html", "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "dojo/templates/defectDojo-engagement-survey/delete_questionnaire.html", "dojo/templates/defectDojo-engagement-survey/edit_question.html", "dojo/templates/defectDojo-engagement-survey/edit_survey_questions.html", "dojo/templates/defectDojo-engagement-survey/list_questions.html", "dojo/templates/defectDojo-engagement-survey/list_surveys.html", "dojo/templates/defectDojo-engagement-survey/survey_fields.html", "dojo/templates/defectDojo-engagement-survey/surveys.html", "dojo/templates/defectDojo-engagement-survey/view_survey.html", "dojo/templates/disabled.html", "dojo/templates/dojo/action_history.html", "dojo/templates/dojo/ad_hoc_findings.html", "dojo/templates/dojo/add_endpoint.html", "dojo/templates/dojo/add_endpoint_meta_data.html", "dojo/templates/dojo/add_findings.html", "dojo/templates/dojo/add_group.html", "dojo/templates/dojo/add_note_type.html", "dojo/templates/dojo/add_product_api_scan_configuration.html", "dojo/templates/dojo/add_product_meta_data.html", "dojo/templates/dojo/add_related.html", "dojo/templates/dojo/add_risk_acceptance.html", "dojo/templates/dojo/add_template.html", "dojo/templates/dojo/add_tests.html", "dojo/templates/dojo/add_user.html", "dojo/templates/dojo/alerts.html", "dojo/templates/dojo/api_v2_key.html", "dojo/templates/dojo/apply_finding_template.html", "dojo/templates/dojo/apply_finding_template_form_fields.html", "dojo/templates/dojo/asciidoc_report.html", "dojo/templates/dojo/banner.html", "dojo/templates/dojo/benchmark.html", "dojo/templates/dojo/breadcrumbs/custom_breadcrumb.html", "dojo/templates/dojo/breadcrumbs/endpoint_breadcrumb.html", "dojo/templates/dojo/breadcrumbs/engagement_breadcrumb.html", "dojo/templates/dojo/breadcrumbs/finding_breadcrumb.html", "dojo/templates/dojo/breadcrumbs/settings_breadcrumb.html", "dojo/templates/dojo/calendar.html", "dojo/templates/dojo/change_pwd.html", "dojo/templates/dojo/checklist.html", "dojo/templates/dojo/clear_finding_review.html", "dojo/templates/dojo/close_finding.html", "dojo/templates/dojo/components.html", "dojo/templates/dojo/custom_asciidoc_report.html", "dojo/templates/dojo/custom_asciidoc_report_cover_page.html", "dojo/templates/dojo/custom_asciidoc_report_endpoints.html", "dojo/templates/dojo/custom_asciidoc_report_findings.html", "dojo/templates/dojo/custom_asciidoc_report_wysiwyg_content.html", "dojo/templates/dojo/custom_asciidoc_toc.html", "dojo/templates/dojo/custom_html_report.html", "dojo/templates/dojo/custom_html_report_cover_page.html", "dojo/templates/dojo/custom_html_report_endpoint_list.html", "dojo/templates/dojo/custom_html_report_finding_list.html", "dojo/templates/dojo/custom_html_report_wysiwyg_content.html", "dojo/templates/dojo/custom_html_toc.html", "dojo/templates/dojo/dashboard-metrics.html", "dojo/templates/dojo/dashboard.html", "dojo/templates/dojo/defect_finding_review.html", "dojo/templates/dojo/delete_alerts.html", "dojo/templates/dojo/delete_benchmark.html", "dojo/templates/dojo/delete_cred_all.html", "dojo/templates/dojo/delete_endpoint.html", "dojo/templates/dojo/delete_engagement.html", "dojo/templates/dojo/delete_finding_group.html", "dojo/templates/dojo/delete_github.html", "dojo/templates/dojo/delete_group.html", "dojo/templates/dojo/delete_group_member.html", "dojo/templates/dojo/delete_jira.html", "dojo/templates/dojo/delete_object.html", "dojo/templates/dojo/delete_presets.html", "dojo/templates/dojo/delete_product.html", "dojo/templates/dojo/delete_product_api_scan_configuration.html", "dojo/templates/dojo/delete_product_group.html", "dojo/templates/dojo/delete_product_member.html", "dojo/templates/dojo/delete_product_type.html", "dojo/templates/dojo/delete_product_type_group.html", "dojo/templates/dojo/delete_product_type_member.html", "dojo/templates/dojo/delete_rule.html", "dojo/templates/dojo/delete_technology.html", "dojo/templates/dojo/delete_test.html", "dojo/templates/dojo/delete_tool_product.html", "dojo/templates/dojo/delete_user.html", "dojo/templates/dojo/dev_env.html", "dojo/templates/dojo/disable_note_type.html", "dojo/templates/dojo/edit_cred.html", "dojo/templates/dojo/edit_cred_all.html", "dojo/templates/dojo/edit_dev_env.html", "dojo/templates/dojo/edit_endpoint.html", "dojo/templates/dojo/edit_endpoint_meta_data.html", "dojo/templates/dojo/edit_finding.html", "dojo/templates/dojo/edit_group_member.html", "dojo/templates/dojo/edit_jira.html", "dojo/templates/dojo/edit_note.html", "dojo/templates/dojo/edit_note_type.html", "dojo/templates/dojo/edit_object.html", "dojo/templates/dojo/edit_presets.html", "dojo/templates/dojo/edit_product.html", "dojo/templates/dojo/edit_product_api_scan_configuration.html", "dojo/templates/dojo/edit_product_group.html", "dojo/templates/dojo/edit_product_member.html", "dojo/templates/dojo/edit_product_meta_data.html", "dojo/templates/dojo/edit_product_type.html", "dojo/templates/dojo/edit_product_type_group.html", "dojo/templates/dojo/edit_product_type_member.html", "dojo/templates/dojo/edit_regulation.html", "dojo/templates/dojo/edit_rule.html", "dojo/templates/dojo/edit_technology.html", "dojo/templates/dojo/edit_test.html", "dojo/templates/dojo/edit_test_type.html", "dojo/templates/dojo/edit_tool_config.html", "dojo/templates/dojo/edit_tool_product.html", "dojo/templates/dojo/edit_tool_type.html", "dojo/templates/dojo/enable_note_type.html", "dojo/templates/dojo/endpoint_meta_importer.html", "dojo/templates/dojo/endpoint_pdf_report.html", "dojo/templates/dojo/endpoints.html", "dojo/templates/dojo/engagement.html", "dojo/templates/dojo/engagement_pdf_report.html", "dojo/templates/dojo/engagements_all.html", "dojo/templates/dojo/engineer_metrics.html", "dojo/templates/dojo/express_new_jira.html", "dojo/templates/dojo/field-datetime.html", "dojo/templates/dojo/filter_js_snippet.html", "dojo/templates/dojo/filter_snippet.html", "dojo/templates/dojo/finding_pdf_report.html", "dojo/templates/dojo/finding_related_actions.html", "dojo/templates/dojo/finding_related_list.html", "dojo/templates/dojo/finding_related_row.html", "dojo/templates/dojo/findings_list.html", "dojo/templates/dojo/findings_list_snippet.html", "dojo/templates/dojo/form_fields.html", "dojo/templates/dojo/github.html", "dojo/templates/dojo/google_sheet_configuration.html", "dojo/templates/dojo/groups.html", "dojo/templates/dojo/import_scan_results.html", "dojo/templates/dojo/jira.html", "dojo/templates/dojo/login.html", "dojo/templates/dojo/manage_files.html", "dojo/templates/dojo/manage_images.html", "dojo/templates/dojo/merge_findings.html", "dojo/templates/dojo/metrics.html", "dojo/templates/dojo/migrate_endpoints.html", "dojo/templates/dojo/new_cred.html", "dojo/templates/dojo/new_cred_mapping.html", "dojo/templates/dojo/new_cred_product.html", "dojo/templates/dojo/new_dev_env.html", "dojo/templates/dojo/new_eng.html", "dojo/templates/dojo/new_github.html", "dojo/templates/dojo/new_group_member.html", "dojo/templates/dojo/new_group_member_user.html", "dojo/templates/dojo/new_jira.html", "dojo/templates/dojo/new_object.html", "dojo/templates/dojo/new_params.html", "dojo/templates/dojo/new_product.html", "dojo/templates/dojo/new_product_group.html", "dojo/templates/dojo/new_product_group_group.html", "dojo/templates/dojo/new_product_member.html", "dojo/templates/dojo/new_product_member_user.html", "dojo/templates/dojo/new_product_type.html", "dojo/templates/dojo/new_product_type_group.html", "dojo/templates/dojo/new_product_type_group_group.html", "dojo/templates/dojo/new_product_type_member.html", "dojo/templates/dojo/new_product_type_member_user.html", "dojo/templates/dojo/new_regulation.html", "dojo/templates/dojo/new_rule.html", "dojo/templates/dojo/new_rule2.html", "dojo/templates/dojo/new_tech.html", "dojo/templates/dojo/new_test_type.html", "dojo/templates/dojo/new_tool_config.html", "dojo/templates/dojo/new_tool_product.html", "dojo/templates/dojo/new_tool_type.html", "dojo/templates/dojo/note_type.html", "dojo/templates/dojo/notifications.html", "dojo/templates/dojo/paging_snippet.html", "dojo/templates/dojo/password_reset.html", "dojo/templates/dojo/password_reset_complete.html", "dojo/templates/dojo/password_reset_confirm.html", "dojo/templates/dojo/password_reset_done.html", "dojo/templates/dojo/product.html", "dojo/templates/dojo/product_components.html", "dojo/templates/dojo/product_endpoint_pdf_report.html", "dojo/templates/dojo/product_metrics.html", "dojo/templates/dojo/product_pdf_report.html", "dojo/templates/dojo/product_type.html", "dojo/templates/dojo/product_type_pdf_report.html", "dojo/templates/dojo/profile.html", "dojo/templates/dojo/promote_to_finding.html", "dojo/templates/dojo/pt_counts.html", "dojo/templates/dojo/regulations.html", "dojo/templates/dojo/regulations_config.html", "dojo/templates/dojo/report_builder.html", "dojo/templates/dojo/report_cover_page.html", "dojo/templates/dojo/report_endpoints.html", "dojo/templates/dojo/report_filter_snippet.html", "dojo/templates/dojo/report_findings.html", "dojo/templates/dojo/report_widget.html", "dojo/templates/dojo/request_endpoint_report.html", "dojo/templates/dojo/request_report.html", "dojo/templates/dojo/review_finding.html", "dojo/templates/dojo/rules.html", "dojo/templates/dojo/simple_metrics.html", "dojo/templates/dojo/simple_search.html", "dojo/templates/dojo/snippets/comments.html", "dojo/templates/dojo/snippets/endpoints.html", "dojo/templates/dojo/snippets/engagement_list.html", "dojo/templates/dojo/snippets/file_images.html", "dojo/templates/dojo/snippets/risk_acceptance_actions_snippet.html", "dojo/templates/dojo/snippets/risk_acceptance_actions_snippet_js.html", "dojo/templates/dojo/snippets/selectpicker_in_dropdown.html", "dojo/templates/dojo/snippets/sonarqube_history.html", "dojo/templates/dojo/snippets/tags.html", "dojo/templates/dojo/syncing_errors.html", "dojo/templates/dojo/system_settings.html", "dojo/templates/dojo/templates.html", "dojo/templates/dojo/test_pdf_report.html", "dojo/templates/dojo/test_type.html", "dojo/templates/dojo/tool_config.html", "dojo/templates/dojo/tool_type.html", "dojo/templates/dojo/up_threat.html", "dojo/templates/dojo/users.html", "dojo/templates/dojo/view_cred.html", "dojo/templates/dojo/view_cred_all_details.html", "dojo/templates/dojo/view_cred_details.html", "dojo/templates/dojo/view_cred_prod.html", "dojo/templates/dojo/view_endpoint.html", "dojo/templates/dojo/view_eng.html", "dojo/templates/dojo/view_engagements.html", "dojo/templates/dojo/view_engineer.html", "dojo/templates/dojo/view_finding.html", "dojo/templates/dojo/view_group.html", "dojo/templates/dojo/view_note_history.html", "dojo/templates/dojo/view_objects.html", "dojo/templates/dojo/view_objects_eng.html", "dojo/templates/dojo/view_presets.html", "dojo/templates/dojo/view_product_api_scan_configurations.html", "dojo/templates/dojo/view_product_details.html", "dojo/templates/dojo/view_product_type.html", "dojo/templates/dojo/view_risk_acceptance.html", "dojo/templates/dojo/view_test.html", "dojo/templates/dojo/view_tool_product_all.html", "dojo/templates/dojo/view_user.html", "dojo/templates/google_sheet_error.html", "dojo/templates/pt_nav_items.html", "dojo/templates/report_base.html", "dojo/templatetags/__init__.py", "dojo/templatetags/as_json.py", "dojo/templatetags/authorization_tags.py", "dojo/templatetags/dict_key.py", "dojo/templatetags/display_tags.py", "dojo/templatetags/event_tags.py", "dojo/templatetags/get_attribute.py", "dojo/templatetags/get_banner.py", "dojo/templatetags/get_config_setting.py", "dojo/templatetags/get_endpoint_status.py", "dojo/templatetags/get_note_status.py", "dojo/templatetags/get_notetype_availability.py", "dojo/templatetags/navigation_tags.py", "dojo/templatetags/survey_tags.py", "dojo/test_type/__init__.py", "dojo/test_type/urls.py", "dojo/test_type/views.py", "dojo/tool_config/__init__.py", "dojo/tool_config/factory.py", "dojo/tool_config/urls.py", "dojo/tool_config/views.py", "dojo/tool_product/__init__.py", "dojo/tool_product/queries.py", "dojo/tool_product/urls.py", "dojo/tool_product/views.py", "dojo/tool_type/__init__.py", "dojo/tool_type/urls.py", "dojo/tool_type/views.py", "dojo/tools/__init__.py", "dojo/tools/acunetix/__init__.py", "dojo/tools/acunetix/parser.py", "dojo/tools/acunetix360/__init__.py", "dojo/tools/acunetix360/parser.py", "dojo/tools/anchore_engine/__init__.py", "dojo/tools/anchore_engine/parser.py", "dojo/tools/anchore_enterprise/__init__.py", "dojo/tools/anchore_enterprise/parser.py", "dojo/tools/anchore_grype/__init__.py", "dojo/tools/anchore_grype/parser.py", "dojo/tools/appspider/__init__.py", "dojo/tools/appspider/parser.py", "dojo/tools/aqua/__init__.py", "dojo/tools/aqua/parser.py", "dojo/tools/arachni/__init__.py", "dojo/tools/arachni/parser.py", "dojo/tools/auditjs/__init__.py", "dojo/tools/auditjs/parser.py", "dojo/tools/aws_prowler/__init__.py", "dojo/tools/aws_prowler/parser.py", "dojo/tools/aws_scout2/__init__.py", "dojo/tools/aws_scout2/parser.py", "dojo/tools/awssecurityhub/__init__.py", "dojo/tools/awssecurityhub/parser.py", "dojo/tools/azure_security_center_recommendations/__init__.py", "dojo/tools/azure_security_center_recommendations/parser.py", "dojo/tools/bandit/__init__.py", "dojo/tools/bandit/parser.py", "dojo/tools/blackduck/__init__.py", "dojo/tools/blackduck/importer.py", "dojo/tools/blackduck/model.py", "dojo/tools/blackduck/parser.py", "dojo/tools/blackduck_component_risk/__init__.py", "dojo/tools/blackduck_component_risk/importer.py", "dojo/tools/blackduck_component_risk/parser.py", "dojo/tools/brakeman/__init__.py", "dojo/tools/brakeman/parser.py", "dojo/tools/bugcrowd/__init__.py", "dojo/tools/bugcrowd/parser.py", "dojo/tools/bundler_audit/__init__.py", "dojo/tools/bundler_audit/parser.py", "dojo/tools/burp/__init__.py", "dojo/tools/burp/parser.py", "dojo/tools/burp_api/__init__.py", "dojo/tools/burp_api/parser.py", "dojo/tools/burp_enterprise/__init__.py", "dojo/tools/burp_enterprise/parser.py", "dojo/tools/burp_graphql/__init__.py", "dojo/tools/burp_graphql/parser.py", "dojo/tools/cargo_audit/__init__.py", "dojo/tools/cargo_audit/parser.py", "dojo/tools/checkmarx/__init__.py", "dojo/tools/checkmarx/parser.py", "dojo/tools/checkmarx_osa/__init__.py", "dojo/tools/checkmarx_osa/parser.py", "dojo/tools/checkov/__init__.py", "dojo/tools/checkov/parser.py", "dojo/tools/clair/__init__.py", "dojo/tools/clair/parser.py", "dojo/tools/clair_klar/__init__.py", "dojo/tools/clair_klar/parser.py", "dojo/tools/cloudsploit/__init__.py", "dojo/tools/cloudsploit/parser.py", "dojo/tools/cobalt/__init__.py", "dojo/tools/cobalt/parser.py", "dojo/tools/cobalt_api/__init__.py", "dojo/tools/cobalt_api/api_client.py", "dojo/tools/cobalt_api/importer.py", "dojo/tools/cobalt_api/parser.py", "dojo/tools/contrast/__init__.py", "dojo/tools/contrast/parser.py", "dojo/tools/coverity_api/__init__.py", "dojo/tools/coverity_api/parser.py", "dojo/tools/crashtest_security/__init__.py", "dojo/tools/crashtest_security/parser.py", "dojo/tools/cred_scan/__init__.py", "dojo/tools/cred_scan/parser.py", "dojo/tools/cyclonedx/__init__.py", "dojo/tools/cyclonedx/parser.py", "dojo/tools/dawnscanner/__init__.py", "dojo/tools/dawnscanner/parser.py", "dojo/tools/dependency_check/__init__.py", "dojo/tools/dependency_check/parser.py", "dojo/tools/dependency_track/__init__.py", "dojo/tools/dependency_track/parser.py", "dojo/tools/detect_secrets/__init__.py", "dojo/tools/detect_secrets/parser.py", "dojo/tools/dockle/__init__.py", "dojo/tools/dockle/parser.py", "dojo/tools/drheader/__init__.py", "dojo/tools/drheader/parser.py", "dojo/tools/dsop/__init__.py", "dojo/tools/dsop/parser.py", "dojo/tools/edgescan/__init__.py", "dojo/tools/edgescan/api_client.py", "dojo/tools/edgescan/importer.py", "dojo/tools/edgescan/parser.py", "dojo/tools/eslint/__init__.py", "dojo/tools/eslint/parser.py", "dojo/tools/factory.py", "dojo/tools/fortify/__init__.py", "dojo/tools/fortify/parser.py", "dojo/tools/generic/__init__.py", "dojo/tools/generic/parser.py", "dojo/tools/github_vulnerability/__init__.py", "dojo/tools/github_vulnerability/parser.py", "dojo/tools/gitlab_api_fuzzing/__init__.py", "dojo/tools/gitlab_api_fuzzing/parser.py", "dojo/tools/gitlab_container_scan/__init__.py", "dojo/tools/gitlab_container_scan/parser.py", "dojo/tools/gitlab_dast/__init__.py", "dojo/tools/gitlab_dast/parser.py", "dojo/tools/gitlab_dep_scan/__init__.py", "dojo/tools/gitlab_dep_scan/parser.py", "dojo/tools/gitlab_sast/__init__.py", "dojo/tools/gitlab_sast/parser.py", "dojo/tools/gitlab_secret_detection_report/__init__.py", "dojo/tools/gitlab_secret_detection_report/parser.py", "dojo/tools/gitleaks/__init__.py", "dojo/tools/gitleaks/parser.py", "dojo/tools/gosec/__init__.py", "dojo/tools/gosec/parser.py", "dojo/tools/h1/__init__.py", "dojo/tools/h1/parser.py", "dojo/tools/hadolint/__init__.py", "dojo/tools/hadolint/parser.py", "dojo/tools/harbor_vulnerability/__init__.py", "dojo/tools/harbor_vulnerability/parser.py", "dojo/tools/horusec/__init__.py", "dojo/tools/horusec/parser.py", "dojo/tools/huskyci/__init__.py", "dojo/tools/huskyci/parser.py", "dojo/tools/hydra/__init__.py", "dojo/tools/hydra/parser.py", "dojo/tools/ibm_app/__init__.py", "dojo/tools/ibm_app/parser.py", "dojo/tools/immuniweb/__init__.py", "dojo/tools/immuniweb/parser.py", "dojo/tools/intsights/__init__.py", "dojo/tools/intsights/parser.py", "dojo/tools/jfrog_xray_unified/__init__.py", "dojo/tools/jfrog_xray_unified/parser.py", "dojo/tools/jfrogxray/__init__.py", "dojo/tools/jfrogxray/parser.py", "dojo/tools/kics/__init__.py", "dojo/tools/kics/parser.py", "dojo/tools/kiuwan/__init__.py", "dojo/tools/kiuwan/parser.py", "dojo/tools/kubebench/__init__.py", "dojo/tools/kubebench/parser.py", "dojo/tools/meterian/__init__.py", "dojo/tools/meterian/parser.py", "dojo/tools/microfocus_webinspect/__init__.py", "dojo/tools/microfocus_webinspect/parser.py", "dojo/tools/mobsf/__init__.py", "dojo/tools/mobsf/parser.py", "dojo/tools/mobsfscan/__init__.py", "dojo/tools/mobsfscan/parser.py", "dojo/tools/mozilla_observatory/__init__.py", "dojo/tools/mozilla_observatory/parser.py", "dojo/tools/nessus/__init__.py", "dojo/tools/nessus/parser.py", "dojo/tools/nessus_was/__init__.py", "dojo/tools/nessus_was/parser.py", "dojo/tools/netsparker/__init__.py", "dojo/tools/netsparker/parser.py", "dojo/tools/nexpose/__init__.py", "dojo/tools/nexpose/parser.py", "dojo/tools/nikto/__init__.py", "dojo/tools/nikto/parser.py", "dojo/tools/nmap/__init__.py", "dojo/tools/nmap/parser.py", "dojo/tools/npm_audit/__init__.py", "dojo/tools/npm_audit/parser.py", "dojo/tools/nsp/__init__.py", "dojo/tools/nsp/parser.py", "dojo/tools/nuclei/__init__.py", "dojo/tools/nuclei/parser.py", "dojo/tools/openscap/__init__.py", "dojo/tools/openscap/parser.py", "dojo/tools/openvas_csv/__init__.py", "dojo/tools/openvas_csv/parser.py", "dojo/tools/ort/__init__.py", "dojo/tools/ort/parser.py", "dojo/tools/ossindex_devaudit/__init__.py", "dojo/tools/ossindex_devaudit/parser.py", "dojo/tools/outpost24/__init__.py", "dojo/tools/outpost24/parser.py", "dojo/tools/parser_test.py", "dojo/tools/php_security_audit_v2/__init__.py", "dojo/tools/php_security_audit_v2/parser.py", "dojo/tools/php_symfony_security_check/__init__.py", "dojo/tools/php_symfony_security_check/parser.py", "dojo/tools/pip_audit/__init__.py", "dojo/tools/pip_audit/parser.py", "dojo/tools/pmd/__init__.py", "dojo/tools/pmd/parser.py", "dojo/tools/qualys/__init__.py", "dojo/tools/qualys/parser.py", "dojo/tools/qualys_infrascan_webgui/__init__.py", "dojo/tools/qualys_infrascan_webgui/parser.py", "dojo/tools/qualys_webapp/__init__.py", "dojo/tools/qualys_webapp/parser.py", "dojo/tools/retirejs/__init__.py", "dojo/tools/retirejs/parser.py", "dojo/tools/risk_recon/__init__.py", "dojo/tools/risk_recon/api.py", "dojo/tools/risk_recon/parser.py", "dojo/tools/rubocop/__init__.py", "dojo/tools/rubocop/parser.py", "dojo/tools/rusty_hog/__init__.py", "dojo/tools/rusty_hog/parser.py", "dojo/tools/sarif/__init__.py", "dojo/tools/sarif/parser.py", "dojo/tools/scantist/__init__.py", "dojo/tools/scantist/parser.py", "dojo/tools/scout_suite/__init__.py", "dojo/tools/scout_suite/parser.py", "dojo/tools/semgrep/__init__.py", "dojo/tools/semgrep/parser.py", "dojo/tools/skf/__init__.py", "dojo/tools/skf/parser.py", "dojo/tools/snyk/__init__.py", "dojo/tools/snyk/parser.py", "dojo/tools/solar_appscreener/__init__.py", "dojo/tools/solar_appscreener/parser.py", "dojo/tools/sonarqube/__init__.py", "dojo/tools/sonarqube/parser.py", "dojo/tools/sonarqube_api/__init__.py", "dojo/tools/sonarqube_api/api_client.py", "dojo/tools/sonarqube_api/importer.py", "dojo/tools/sonarqube_api/parser.py", "dojo/tools/sonarqube_api/updater.py", "dojo/tools/sonarqube_api/updater_from_source.py", "dojo/tools/sonatype/__init__.py", "dojo/tools/sonatype/parser.py", "dojo/tools/spotbugs/__init__.py", "dojo/tools/spotbugs/parser.py", "dojo/tools/ssl_labs/__init__.py", "dojo/tools/ssl_labs/parser.py", "dojo/tools/sslscan/__init__.py", "dojo/tools/sslscan/parser.py", "dojo/tools/sslyze/__init__.py", "dojo/tools/sslyze/parser.py", "dojo/tools/sslyze/parser_json.py", "dojo/tools/sslyze/parser_xml.py", "dojo/tools/stackhawk/__init__.py", "dojo/tools/stackhawk/parser.py", "dojo/tools/terrascan/__init__.py", "dojo/tools/terrascan/parser.py", "dojo/tools/testssl/__init__.py", "dojo/tools/testssl/parser.py", "dojo/tools/tfsec/__init__.py", "dojo/tools/tfsec/parser.py", "dojo/tools/tool_issue_updater.py", "dojo/tools/trivy/__init__.py", "dojo/tools/trivy/parser.py", "dojo/tools/trufflehog/__init__.py", "dojo/tools/trufflehog/parser.py", "dojo/tools/trufflehog3/__init__.py", "dojo/tools/trufflehog3/parser.py", "dojo/tools/trustwave/__init__.py", "dojo/tools/trustwave/parser.py", "dojo/tools/trustwave_fusion_api/__init__.py", "dojo/tools/trustwave_fusion_api/parser.py", "dojo/tools/twistlock/__init__.py", "dojo/tools/twistlock/parser.py", "dojo/tools/utils.py", "dojo/tools/vcg/__init__.py", "dojo/tools/vcg/parser.py", "dojo/tools/veracode/__init__.py", "dojo/tools/veracode/parser.py", "dojo/tools/wapiti/__init__.py", "dojo/tools/wapiti/parser.py", "dojo/tools/wfuzz/__init__.py", "dojo/tools/wfuzz/parser.py", "dojo/tools/whitehat_sentinel/__init__.py", "dojo/tools/whitehat_sentinel/parser.py", "dojo/tools/whitesource/__init__.py", "dojo/tools/whitesource/parser.py", "dojo/tools/wpscan/__init__.py", "dojo/tools/wpscan/parser.py", "dojo/tools/xanitizer/__init__.py", "dojo/tools/xanitizer/parser.py", "dojo/tools/yarn_audit/__init__.py", "dojo/tools/yarn_audit/parser.py", "dojo/tools/zap/__init__.py", "dojo/tools/zap/parser.py", "dojo/urls.py", "dojo/user/__init__.py", "dojo/user/queries.py", "dojo/user/urls.py", "dojo/user/validators.py", "dojo/user/views.py", "dojo/utils.py", "dojo/views.py", "dojo/wsgi.py", "manage.py", "unittests/__init__.py", "unittests/authorization/__init__.py", "unittests/authorization/test_authorization.py", "unittests/authorization/test_authorization_decorators.py", "unittests/authorization/test_authorization_tags.py", "unittests/dojo_test_case.py", "unittests/scans/sonarqube/sonar-4-findings-3-to-aggregate.html", "unittests/scans/sonarqube/sonar-6-findings-1-unique_id_changed.html", "unittests/scans/sonarqube/sonar-6-findings.html", "unittests/scans/sonarqube/sonar-rule-undefined.html", "unittests/scans/sonarqube/sonar-single-finding.html", "unittests/scans/sonarqube/sonar-table-in-table.html", "unittests/test_apiv2_endpoint.py", "unittests/test_apiv2_metadata.py", "unittests/test_apiv2_methods.py", "unittests/test_apiv2_notifications.py", "unittests/test_apiv2_scan_import_options.py", "unittests/test_apiv2_user.py", "unittests/test_apply_finding_template.py", "unittests/test_bulk_risk_acceptance_api.py", "unittests/test_cleanup_alerts.py", "unittests/test_dashboard.py", "unittests/test_deduplication_logic.py", "unittests/test_duplication_loops.py", "unittests/test_endpoint_meta_import.py", "unittests/test_endpoint_model.py", "unittests/test_factory.py", "unittests/test_finding_helper.py", "unittests/test_finding_model.py", "unittests/test_google_sheets_configuration.py", "unittests/test_import_reimport.py", "unittests/test_importers_importer.py", "unittests/test_jira_config_engagement.py", "unittests/test_jira_config_engagement_epic.py", "unittests/test_jira_config_product.py", "unittests/test_jira_import_and_pushing_api.py", "unittests/test_jira_template.py", "unittests/test_jira_webhook.py", "unittests/test_metrics_queries.py", "unittests/test_migrations.py", "unittests/test_notifications.py", "unittests/test_pipeline.py", "unittests/test_rest_framework.py", "unittests/test_risk_acceptance.py", "unittests/test_sample_data.py", "unittests/test_search_parser.py", "unittests/test_sonarqube_updater.py", "unittests/test_swagger_schema.py", "unittests/test_system_settings.py", "unittests/test_tags.py", "unittests/test_utils.py", "unittests/test_utils_deduplication_reopen.py", "unittests/tools/__init__.py", "unittests/tools/test_acunetix360_parser.py", "unittests/tools/test_acunetix_parser.py", "unittests/tools/test_anchore_engine_parser.py", "unittests/tools/test_anchore_enterprise_parser.py", "unittests/tools/test_anchore_grype_parser.py", "unittests/tools/test_appspider_parser.py", "unittests/tools/test_aqua_parser.py", "unittests/tools/test_arachni_parser.py", "unittests/tools/test_auditjs_parser.py", "unittests/tools/test_aws_prowler_parser.py", "unittests/tools/test_aws_scout2_parser.py", "unittests/tools/test_awssecurityhub_parser.py", "unittests/tools/test_azure_security_center_recommendations_parser.py", "unittests/tools/test_bandit_parser.py", "unittests/tools/test_blackduck_component_risk_parser.py", "unittests/tools/test_blackduck_parser.py", "unittests/tools/test_brakeman_parser.py", "unittests/tools/test_bugcrowd_parser.py", "unittests/tools/test_bundler_audit_parser.py", "unittests/tools/test_burp_api_parser.py", "unittests/tools/test_burp_graphql_parser.py", "unittests/tools/test_burp_parser.py", "unittests/tools/test_cargo_audit_parser.py", "unittests/tools/test_checkmarx_osa_parser.py", "unittests/tools/test_checkmarx_parser.py", "unittests/tools/test_checkov_parser.py", "unittests/tools/test_clair_klar_parser.py", "unittests/tools/test_clair_parser.py", "unittests/tools/test_cloudsploit_parser.py", "unittests/tools/test_cobalt_api_importer.py", "unittests/tools/test_cobalt_api_parser.py", "unittests/tools/test_cobalt_parser.py", "unittests/tools/test_contrast_parser.py", "unittests/tools/test_coverity_api_parser.py", "unittests/tools/test_crashtest_security_parser.py", "unittests/tools/test_cred_scan_parser.py", "unittests/tools/test_cyclonedx_parser.py", "unittests/tools/test_dawnscanner_parser.py", "unittests/tools/test_dependency_check_parser.py", "unittests/tools/test_dependency_track_parser.py", "unittests/tools/test_detect_secrets_parser.py", "unittests/tools/test_dockle_parser.py", "unittests/tools/test_drheader_parser.py", "unittests/tools/test_dsop_parser.py", "unittests/tools/test_edgescan_importer.py", "unittests/tools/test_edgescan_parser.py", "unittests/tools/test_eslint_parser.py", "unittests/tools/test_fortify_parser.py", "unittests/tools/test_generic_parser.py", "unittests/tools/test_github_vulnerability_parser.py", "unittests/tools/test_gitlab_api_fuzzing_parser.py", "unittests/tools/test_gitlab_container_scan_parser.py", "unittests/tools/test_gitlab_dast_parser.py", "unittests/tools/test_gitlab_dep_scan_parser.py", "unittests/tools/test_gitlab_sast_parser.py", "unittests/tools/test_gitlab_secret_detection_report_parser.py", "unittests/tools/test_gitleaks_parser.py", "unittests/tools/test_gosec_parser.py", "unittests/tools/test_h1_parser.py", "unittests/tools/test_hadolint_parser.py", "unittests/tools/test_harbor_vulnerability_parser.py", "unittests/tools/test_horusec_parser.py", "unittests/tools/test_huskyci_parser.py", "unittests/tools/test_hydra_parser.py", "unittests/tools/test_ibm_app_parser.py", "unittests/tools/test_immuniweb_parser.py", "unittests/tools/test_intsights_parser.py", "unittests/tools/test_jfrog_xray_unified_parser.py", "unittests/tools/test_jfrogxray_parser.py", "unittests/tools/test_kics_parser.py", "unittests/tools/test_kiuwan_parser.py", "unittests/tools/test_kubebench_parser.py", "unittests/tools/test_meterian_parser.py", "unittests/tools/test_microfocus_webinspect_parser.py", "unittests/tools/test_mobsf_parser.py", "unittests/tools/test_mobsfscan_parser.py", "unittests/tools/test_mozilla_observatory_parser.py", "unittests/tools/test_nessus_parser.py", "unittests/tools/test_nessus_was_parser.py", "unittests/tools/test_netsparker_parser.py", "unittests/tools/test_nexpose_parser.py", "unittests/tools/test_nikto_parser.py", "unittests/tools/test_nmap_parser.py", "unittests/tools/test_npm_audit_parser.py", "unittests/tools/test_nsp_parser.py", "unittests/tools/test_nuclei_parser.py", "unittests/tools/test_openscap_parser.py", "unittests/tools/test_openvas_csv_parser.py", "unittests/tools/test_ort_parser.py", "unittests/tools/test_ossindex_devaudit_parser.py", "unittests/tools/test_outpost24_parser.py", "unittests/tools/test_php_security_audit_v2_parser.py", "unittests/tools/test_php_symfony_security_check_parser.py", "unittests/tools/test_pip_audit_parser.py", "unittests/tools/test_pmd_parser.py", "unittests/tools/test_qualys_infrascan_webgui_parser.py", "unittests/tools/test_qualys_parser.py", "unittests/tools/test_qualys_webapp_parser.py", "unittests/tools/test_retirejs_parser.py", "unittests/tools/test_risk_recon_parser.py", "unittests/tools/test_rubocop_parser.py", "unittests/tools/test_rusty_hog_parser.py", "unittests/tools/test_sarif_parser.py", "unittests/tools/test_scantist_parser.py", "unittests/tools/test_scout_suite_parser.py", "unittests/tools/test_semgrep_parser.py", "unittests/tools/test_skf_parser.py", "unittests/tools/test_snyk_parser.py", "unittests/tools/test_solar_appscreener_parser.py", "unittests/tools/test_sonarqube_api_parser.py", "unittests/tools/test_sonarqube_importer.py", "unittests/tools/test_sonarqube_parser.py", "unittests/tools/test_sonatype_parser.py", "unittests/tools/test_spotbugs_parser.py", "unittests/tools/test_ssl_labs_parser.py", "unittests/tools/test_sslscan_parser.py", "unittests/tools/test_sslyze_parser.py", "unittests/tools/test_stackhawk_parser.py", "unittests/tools/test_terrascan_parser.py", "unittests/tools/test_testssl_parser.py", "unittests/tools/test_tfsec_parser.py", "unittests/tools/test_trivy_parser.py", "unittests/tools/test_trufflehog3_parser.py", "unittests/tools/test_trufflehog_parser.py", "unittests/tools/test_trustwave_fusion_api_parser.py", "unittests/tools/test_trustwave_parser.py", "unittests/tools/test_twistlock_parser.py", "unittests/tools/test_vcg_parser.py", "unittests/tools/test_veracode_parser.py", "unittests/tools/test_wapiti_parser.py", "unittests/tools/test_wfuzz_parser.py", "unittests/tools/test_whitehat_sentinel_parser.py", "unittests/tools/test_whitesource_parser.py", "unittests/tools/test_wpscan_parser.py", "unittests/tools/test_xanitizer_parser.py", "unittests/tools/test_yarn_audit_parser.py", "unittests/tools/test_zap_parser.py", "wsgi.py"]}, "results": [{"check_id": "python.lang.security.deserialization.pickle.avoid-pickle", "end": {"col": 39, "line": 3083, "offset": 134915}, "extra": {"fingerprint": "2697b321a4f5fbff8387171985068e0c", "is_ignored": false, "lines": "            return pickle.loads(value)", "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "metadata": {"category": "security", "cwe": "CWE-502: Deserialization of Untrusted Data", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A8: Insecure Deserialization", "references": ["https://docs.python.org/3/library/pickle.html", "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"], "shortlink": "https://sg.run/OPwB", "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle", "technology": ["python"]}, "metavars": {"$FUNC": {"abstract_content": "loads", "end": {"col": 32, "line": 3083, "offset": 134908}, "start": {"col": 27, "line": 3083, "offset": 134903}, "unique_id": {"md5sum": "7e03557791a923589dfd5a205b4e4e6b", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/forms.py", "start": {"col": 20, "line": 3083, "offset": 134896}}, {"check_id": "python.lang.security.deserialization.pickle.avoid-pickle", "end": {"col": 36, "line": 3104, "offset": 135731}, "extra": {"fingerprint": "e22a8b501b9b5278697a87ed86fffbd5", "is_ignored": false, "lines": "        return pickle.dumps(values)", "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "metadata": {"category": "security", "cwe": "CWE-502: Deserialization of Untrusted Data", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A8: Insecure Deserialization", "references": ["https://docs.python.org/3/library/pickle.html", "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"], "shortlink": "https://sg.run/OPwB", "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle", "technology": ["python"]}, "metavars": {"$FUNC": {"abstract_content": "dumps", "end": {"col": 28, "line": 3104, "offset": 135723}, "start": {"col": 23, "line": 3104, "offset": 135718}, "unique_id": {"md5sum": "f300500f861833c55b6403424c78567c", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/forms.py", "start": {"col": 16, "line": 3104, "offset": 135711}}, {"check_id": "python.lang.security.deserialization.pickle.avoid-pickle", "end": {"col": 105, "line": 454, "offset": 20679}, "extra": {"fingerprint": "85c85be390fa298f4756304fa1da255e", "is_ignored": false, "lines": "                    choices_to_process = pickle.loads(choiceQuestionFrom.cleaned_data['answer_choices'])", "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "metadata": {"category": "security", "cwe": "CWE-502: Deserialization of Untrusted Data", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A8: Insecure Deserialization", "references": ["https://docs.python.org/3/library/pickle.html", "https://davidhamann.de/2020/04/05/exploiting-python-pickle/"], "shortlink": "https://sg.run/OPwB", "source": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle", "technology": ["python"]}, "metavars": {"$FUNC": {"abstract_content": "loads", "end": {"col": 54, "line": 454, "offset": 20628}, "start": {"col": 49, "line": 454, "offset": 20623}, "unique_id": {"md5sum": "d12aefadcc04e38e5d36cd0054160bd8", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/survey/views.py", "start": {"col": 42, "line": 454, "offset": 20616}}, {"check_id": "python.lang.correctness.common-mistakes.is-comparison-string.string-is-comparison", "end": {"col": 65, "line": 214, "offset": 7998}, "extra": {"fingerprint": "4f1bd93c7c19547e84c140b4cac2b427", "is_ignored": false, "lines": "            if 'type' in schema and schema[\"type\"] is TYPE_ARRAY and isinstance(obj, set):", "message": "Found string comparison using 'is' operator. The 'is' operator is for reference equality, not value equality, and therefore should not be used to compare strings. For more information, see https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator\"", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/W814", "source": "https://semgrep.dev/r/python.lang.correctness.common-mistakes.is-comparison-string.string-is-comparison", "technology": ["python"]}, "metavars": {"$S": {"abstract_content": "schema[\"type\"]", "end": {"col": 51, "line": 214, "offset": 7984}, "start": {"col": 37, "line": 214, "offset": 7970}, "unique_id": {"md5sum": "c923a1c82f3c6e6e5ee74f19fc994cef", "type": "AST"}}}, "severity": "ERROR"}, "path": "unittests/test_rest_framework.py", "start": {"col": 37, "line": 214, "offset": 7970}}, {"check_id": "python.lang.correctness.common-mistakes.is-comparison-string.string-is-comparison", "end": {"col": 65, "line": 249, "offset": 9585}, "extra": {"fingerprint": "97996a1afac925db0b7619adc464c7cd", "is_ignored": false, "lines": "            if 'type' in schema and schema[\"type\"] is TYPE_ARRAY:", "message": "Found string comparison using 'is' operator. The 'is' operator is for reference equality, not value equality, and therefore should not be used to compare strings. For more information, see https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator\"", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/W814", "source": "https://semgrep.dev/r/python.lang.correctness.common-mistakes.is-comparison-string.string-is-comparison", "technology": ["python"]}, "metavars": {"$S": {"abstract_content": "schema[\"type\"]", "end": {"col": 51, "line": 249, "offset": 9571}, "start": {"col": 37, "line": 249, "offset": 9557}, "unique_id": {"md5sum": "53f554afd8056ff9a7dcdf10c67282ca", "type": "AST"}}}, "severity": "ERROR"}, "path": "unittests/test_rest_framework.py", "start": {"col": 37, "line": 249, "offset": 9557}}, {"check_id": "python.requests.best-practice.use-timeout.use-timeout", "end": {"col": 36, "line": 1055, "offset": 37059}, "extra": {"fingerprint": "68f26ff5f762075e1a6dc6d3dfb8649e", "fix_regex": {"regex": "(.*)\\)", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "                r = requests.post(\n                    url=req_url,\n                    auth=HTTPBasicAuth(jira_instance.username, jira_instance.password),\n                    json=json_data)", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/R8kO", "source": "https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout", "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/jira_link/helper.py", "start": {"col": 21, "line": 1052, "offset": 36888}}, {"check_id": "python.requests.best-practice.use-timeout.use-timeout", "end": {"col": 125, "line": 22, "offset": 718}, "extra": {"fingerprint": "2a1a3a21a0f64e165b3b82d912069916", "fix_regex": {"regex": "(.*)\\)", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "            deserialized = json.loads(requests.get('https://raw.githubusercontent.com/ozh/github-colors/master/colors.json').text)", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/R8kO", "source": "https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout", "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/management/commands/import_github_languages.py", "start": {"col": 39, "line": 22, "offset": 632}}, {"check_id": "python.requests.best-practice.use-timeout.use-timeout", "end": {"col": 15, "line": 172, "offset": 8224}, "extra": {"fingerprint": "8bb97545cba6984f7a21596bf39259dc", "fix_regex": {"regex": "(.*)\\)", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "        res = requests.request(\n            method='POST',\n            url='https://slack.com/api/chat.postMessage',\n            data={\n                'token': get_system_setting('slack_token'),\n                'channel': channel,\n                'username': get_system_setting('slack_username'),\n                'text': create_notification_message(event, user, 'slack', *args, **kwargs)\n            })", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/R8kO", "source": "https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout", "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/notifications/helper.py", "start": {"col": 15, "line": 164, "offset": 7835}}, {"check_id": "python.requests.best-practice.use-timeout.use-timeout", "end": {"col": 95, "line": 229, "offset": 10966}, "extra": {"fingerprint": "ed5e72d465e96b5390e17b2521decb3d", "fix_regex": {"regex": "(.*)\\)", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "                res = requests.request(\n                    method='POST',\n                    url=get_system_setting('msteams_url'),\n                    data=create_notification_message(event, None, 'msteams', *args, **kwargs))", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/R8kO", "source": "https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout", "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/notifications/helper.py", "start": {"col": 23, "line": 226, "offset": 10760}}, {"check_id": "python.requests.best-practice.use-timeout.use-timeout", "end": {"col": 80, "line": 309, "offset": 13921}, "extra": {"fingerprint": "7dddfafb811f7f58d0e4e111db46b731", "fix_regex": {"regex": "(.*)\\)", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "    res = requests.request(\n        method='POST',\n        url='https://slack.com/api/users.lookupByEmail',\n        data={'token': get_system_setting('slack_token'), 'email': user_email})", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/R8kO", "source": "https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout", "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/notifications/helper.py", "start": {"col": 11, "line": 306, "offset": 13744}}, {"check_id": "python.requests.best-practice.use-timeout.use-timeout", "end": {"col": 10, "line": 56, "offset": 2036}, "extra": {"fingerprint": "a9768f2134d198a8b303b4ab46c2aea4", "fix_regex": {"regex": "(.*)\\)", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "        response = requests.get(\n            url=url,\n            headers=self.get_headers(),\n            proxies=self.get_proxies(),\n        )", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/R8kO", "source": "https://semgrep.dev/r/python.requests.best-practice.use-timeout.use-timeout", "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/tools/edgescan/api_client.py", "start": {"col": 20, "line": 52, "offset": 1912}}, {"check_id": "python.lang.correctness.common-mistakes.is-comparison-string.identical-is-comparison", "end": {"col": 25, "line": 195, "offset": 7790}, "extra": {"fingerprint": "291bb04cbc442d315422491e319e4510", "is_ignored": false, "lines": "        elif sev is None:", "message": "Found identical comparison using is. Ensure this is what you intended.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/Do5Y", "source": "https://semgrep.dev/r/python.lang.correctness.common-mistakes.is-comparison-string.identical-is-comparison", "technology": ["python"]}, "metavars": {"$S": {"abstract_content": "sev", "end": {"col": 17, "line": 195, "offset": 7782}, "start": {"col": 14, "line": 195, "offset": 7779}, "unique_id": {"sid": 38, "type": "id"}}}, "severity": "ERROR"}, "path": "dojo/tools/qualys/parser.py", "start": {"col": 14, "line": 195, "offset": 7779}}, {"check_id": "python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list", "end": {"col": 103, "line": 39, "offset": 1573}, "extra": {"fingerprint": "b9578bfbdacd3c9f6449eab206989069", "is_ignored": false, "lines": "                                   help_text=\"The host name or IP address. It must not include the port number. \"\n                                             \"For example '127.0.0.1', 'localhost', 'yourdomain.com'.\",", "message": "Detected strings that are implicitly concatenated inside a list. Python will implicitly concatenate strings when not explicitly delimited. Was this supposed to be individual elements of the list?", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/Kl07", "source": "https://semgrep.dev/r/python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/db_migrations/0104_endpoint_userinfo_creation.py", "start": {"col": 46, "line": 38, "offset": 1402}}, {"check_id": "python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list", "end": {"col": 89, "line": 53, "offset": 2280}, "extra": {"fingerprint": "46eac2b0e6e65fc470c330e83bbc9763", "is_ignored": false, "lines": "            field=models.CharField(blank=True, help_text=\"The location of the resource, it must not start with a '/'. \"\n                                                         \"For example endpoint/420/edit\", max_length=500, null=True),", "message": "Detected strings that are implicitly concatenated inside a list. Python will implicitly concatenate strings when not explicitly delimited. Was this supposed to be individual elements of the list?", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/Kl07", "source": "https://semgrep.dev/r/python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/db_migrations/0104_endpoint_userinfo_creation.py", "start": {"col": 58, "line": 52, "offset": 2129}}, {"check_id": "python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list", "end": {"col": 37, "line": 40, "offset": 1031}, "extra": {"fingerprint": "4c714db5909feee275a0377d37f76ba7", "is_ignored": false, "lines": "                \"**Result** : `\" + node['result'] + \"`\"\n                \"**expectation** : \" + str(node.get('expectation')) + \"`\",", "message": "Detected strings that are implicitly concatenated inside a list. Python will implicitly concatenate strings when not explicitly delimited. Was this supposed to be individual elements of the list?", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/Kl07", "source": "https://semgrep.dev/r/python.lang.correctness.common-mistakes.string-concat-in-list.string-concat-in-list", "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/tools/mozilla_observatory/parser.py", "start": {"col": 53, "line": 39, "offset": 991}}, {"check_id": "python.lang.maintainability.return.code-after-unconditional-return", "end": {"col": 30, "line": 171, "offset": 9495}, "extra": {"fingerprint": "b689c056d5694ec0f12ffd222f75a772", "is_ignored": false, "lines": "                        return HttpResponse('')\n                        break", "message": "code after return statement will not be executed", "metadata": {"category": "maintainability", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/6nOo", "source": "https://semgrep.dev/r/python.lang.maintainability.return.code-after-unconditional-return", "technology": ["python"]}, "metavars": {"$S": {"abstract_content": "break", "end": {"col": 30, "line": 171, "offset": 9495}, "start": {"col": 25, "line": 171, "offset": 9490}, "unique_id": {"md5sum": "b151dc164b673dc9cf59764bd729b01d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/jira_link/views.py", "start": {"col": 25, "line": 170, "offset": 9442}}, {"check_id": "python.lang.maintainability.return.code-after-unconditional-return", "end": {"col": 17, "line": 2381, "offset": 116693}, "extra": {"fingerprint": "3969b03ff76cb4ded778e00e8433d8f8", "is_ignored": false, "lines": "            return None\n            pass", "message": "code after return statement will not be executed", "metadata": {"category": "maintainability", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/6nOo", "source": "https://semgrep.dev/r/python.lang.maintainability.return.code-after-unconditional-return", "technology": ["python"]}, "metavars": {"$S": {"abstract_content": "pass", "end": {"col": 17, "line": 2381, "offset": 116693}, "start": {"col": 13, "line": 2381, "offset": 116689}, "unique_id": {"md5sum": "398a6334b2b540e5ad5a70797d7b7128", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 13, "line": 2380, "offset": 116665}}, {"check_id": "python.lang.maintainability.return.code-after-unconditional-return", "end": {"col": 974, "line": 351, "offset": 16794}, "extra": {"fingerprint": "83c9203dcc2b8c5cc2b4e7482fa90f26", "is_ignored": false, "lines": "    return response\n\n    '''", "message": "code after return statement will not be executed", "metadata": {"category": "maintainability", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/6nOo", "source": "https://semgrep.dev/r/python.lang.maintainability.return.code-after-unconditional-return", "technology": ["python"]}, "metavars": {"$S": {"abstract_content": "'''\n    query:     some keywords\n    operators: {}\n    keywords:  ['some', 'keywords']\n\n    query:     some key-word\n    operators: {}\n    keywords:  ['some', 'key-word']\n\n    query:     keyword with \"space inside\"\n    operators: {}\n    keywords:  ['keyword', 'with', 'space inside']\n\n    query:     tag:anchore word tags:php\n    operators: {'tag': ['anchore'], 'tags': ['php']}\n    keywords:  ['word']\n\n    query:     tags:php,magento\n    operators: {'tags': ['php,magento']}\n    keywords:  []\n\n    query:     tags:php tags:magento\n    operators: {'tags': ['php', 'magento']}\n    keywords:  []\n\n    query:     tags:\"php, magento\"\n    operators: {'tags': ['php, magento']}\n    keywords:  []\n\n    query:     tags:anchorse some \"space inside\"\n    operators: {'tags': ['anchorse']}\n    keywords:  ['some', 'space inside']\n\n    query:     tags:anchore cve:CVE-2020-1234 jquery\n    operators: {'tags': ['anchore'], 'cve': ['CVE-2020-1234']}\n    keywords:  ['jquery']\n    '''", "end": {"col": 974, "line": 351, "offset": 16794}, "start": {"col": 5, "line": 351, "offset": 15825}, "unique_id": {"md5sum": "f8f3b59653bc01db076c04e8b7913c11", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/search/views.py", "start": {"col": 5, "line": 349, "offset": 15804}}, {"check_id": "python.django.security.audit.django-rest-framework.missing-throttle-config.missing-throttle-config", "end": {"col": 2, "line": 670, "offset": 30519}, "extra": {"fingerprint": "c344084d478c102b0ccc57dcfc296ccd", "is_ignored": false, "lines": "REST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.DjangoModelPermissions',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'rest_framework.renderers.JSONRenderer',\n    ),\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',\n    'PAGE_SIZE': 25,\n    'EXCEPTION_HANDLER': 'dojo.api_v2.exception_handler.custom_exception_handler'\n}", "message": "Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.", "metadata": {"category": "security", "cwe": "CWE-400: Uncontrolled Resource Consumption", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A6: Security Misconfiguration", "references": ["https://www.django-rest-framework.org/api-guide/throttling/#setting-the-throttling-policy"], "shortlink": "https://sg.run/vzBY", "source": "https://semgrep.dev/r/python.django.security.audit.django-rest-framework.missing-throttle-config.missing-throttle-config", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/settings/settings.dist.py", "start": {"col": 1, "line": 654, "offset": 29821}}, {"check_id": "python.django.security.audit.csrf-exempt.no-csrf-exempt", "end": {"col": 28, "line": 25, "offset": 776}, "extra": {"fingerprint": "e978f8bb878ea5484dac3b2524c04c3d", "is_ignored": false, "lines": "@csrf_exempt\ndef webhook(request):\n    return HttpResponse('')", "message": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.", "metadata": {"category": "security", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A6: Security Misconfiguration", "shortlink": "https://sg.run/rd5e", "source": "https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt", "technology": ["django"]}, "metavars": {"$R": {"abstract_content": "webhook", "end": {"col": 12, "line": 24, "offset": 738}, "start": {"col": 5, "line": 24, "offset": 731}, "unique_id": {"md5sum": "69361cf830b13ea19fda3463d4d05f02", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/github_issue_link/views.py", "start": {"col": 1, "line": 23, "offset": 714}}, {"check_id": "python.django.security.audit.csrf-exempt.no-csrf-exempt", "end": {"col": 28, "line": 213, "offset": 11749}, "extra": {"fingerprint": "d4d34a11e6323e2d0afed9a93166617a", "is_ignored": false, "lines": "@csrf_exempt\n@require_POST\ndef webhook(request, secret=None):\n    if not get_system_setting('enable_jira'):\n        logger.debug('ignoring incoming webhook as JIRA is disabled.')\n        raise Http404('JIRA disabled')\n    elif not get_system_setting('enable_jira_web_hook'):\n        logger.debug('ignoring incoming webhook as JIRA Webhook is disabled.')\n        raise Http404('JIRA Webhook disabled')\n    elif not get_system_setting('disable_jira_webhook_secret'):\n        if not get_system_setting('jira_webhook_secret'):\n            logger.warning('ignoring incoming webhook as JIRA Webhook secret is empty in Defect Dojo system settings.')\n            raise PermissionDenied('JIRA Webhook secret cannot be empty')\n        if secret != get_system_setting('jira_webhook_secret'):\n            logger.warning('invalid secret provided to JIRA Webhook')\n            raise PermissionDenied('invalid or no secret provided to JIRA Webhook')\n\n    # if webhook secret is disabled in system_settings, we ignore the incoming secret, even if it doesn't match\n\n    # example json bodies at the end of this file\n\n    if request.content_type != 'application/json':\n        return HttpResponseBadRequest(\"only application/json supported\")\n\n    if request.method == 'POST':\n        try:\n            parsed = json.loads(request.body.decode('utf-8'))\n            if parsed.get('webhookEvent') == 'jira:issue_updated':\n                # xml examples at the end of file\n                jid = parsed['issue']['id']\n                jissue = get_object_or_404(JIRA_Issue, jira_id=jid)\n\n                findings = None\n                if jissue.finding:\n                    logging.info(\"Received issue update for {} for finding {}\".format(jissue.jira_key, jissue.finding.id))\n                    findings = [jissue.finding]\n                elif jissue.finding_group:\n                    logging.info(\"Received issue update for {} for finding group {}\".format(jissue.jira_key, jissue.finding_group))\n                    findings = jissue.finding_group.findings.all()\n                elif jissue.engagement:\n                    # if parsed['issue']['fields']['resolution'] != None:\n                    #     eng.active = False\n                    #     eng.status = 'Completed'\n                    #     eng.save()\n                    return HttpResponse('Update for engagement ignored')\n                else:\n                    logging.info(\"Received issue update for {} for unknown object\".format(jissue.jira_key))\n                    raise Http404('No finding, finding_group or engagement found for JIRA issue {}'.format(jissue.jira_key))\n\n                assignee = parsed['issue']['fields'].get('assignee')\n                assignee_name = assignee['name'] if assignee else None\n\n                resolution = parsed['issue']['fields']['resolution']\n\n                #         \"resolution\":{\n                #             \"self\":\"http://www.testjira.com/rest/api/2/resolution/11\",\n                #             \"id\":\"11\",\n                #             \"description\":\"Cancelled by the customer.\",\n                #             \"name\":\"Cancelled\"\n                #         },\n\n                # or\n                #         \"resolution\": null\n\n                # or\n                #         \"resolution\": \"None\"\n\n                resolution = resolution if resolution and resolution != \"None\" else None\n                resolution_id = resolution['id'] if resolution else None\n                resolution_name = resolution['name'] if resolution else None\n                jira_now = parse_datetime(parsed['issue']['fields']['updated'])\n\n                if findings:\n                    for finding in findings:\n                        jira_helper.process_resolution_from_jira(finding, resolution_id, resolution_name, assignee_name, jira_now, jissue)\n\n            if parsed.get('webhookEvent') == 'comment_created':\n                \"\"\"\n                    example incoming requests from JIRA Server 8.14.0\n                    {\n                    \"timestamp\":1610269967824,\n                    \"webhookEvent\":\"comment_created\",\n                    \"comment\":{\n                        \"self\":\"https://jira.host.com/rest/api/2/issue/115254/comment/466578\",\n                        \"id\":\"466578\",\n                        \"author\":{\n                            \"self\":\"https://jira.host.com/rest/api/2/user?username=defect.dojo\",\n                            \"name\":\"defect.dojo\",\n                            \"key\":\"defect.dojo\", # seems to be only present on JIRA Server, not on Cloud\n                            \"avatarUrls\":{\n                                \"48x48\":\"https://www.gravatar.com/avatar/9637bfb970eff6176357df615f548f1c?d=mm&s=48\",\n                                \"24x24\":\"https://www.gravatar.com/avatar/9637bfb970eff6176357df615f548f1c?d=mm&s=24\",\n                                \"16x16\":\"https://www.gravatar.com/avatar9637bfb970eff6176357df615f548f1c?d=mm&s=16\",\n                                \"32x32\":\"https://www.gravatar.com/avatar/9637bfb970eff6176357df615f548f1c?d=mm&s=32\"\n                            },\n                            \"displayName\":\"Defect Dojo\",\n                            \"active\":true,\n                            \"timeZone\":\"Europe/Amsterdam\"\n                        },\n                        \"body\":\"(Valentijn Scholten):test4\",\n                        \"updateAuthor\":{\n                            \"self\":\"https://jira.host.com/rest/api/2/user?username=defect.dojo\",\n                            \"name\":\"defect.dojo\",\n                            \"key\":\"defect.dojo\",\n                            \"avatarUrls\":{\n                                \"48x48\":\"https://www.gravatar.com/avatar/9637bfb970eff6176357df615f548f1c?d=mm&s=48\",\n                                \"24x24\"\"https://www.gravatar.com/avatar/9637bfb970eff6176357df615f548f1c?d=mm&s=24\",\n                                \"16x16\":\"https://www.gravatar.com/avatar/9637bfb970eff6176357df615f548f1c?d=mm&s=16\",\n                                \"32x32\":\"https://www.gravatar.com/avatar/9637bfb970eff6176357df615f548f1c?d=mm&s=32\"\n                            },\n                            \"displayName\":\"Defect Dojo\",\n                            \"active\":true,\n                            \"timeZone\":\"Europe/Amsterdam\"\n                        },\n                        \"created\":\"2021-01-10T10:12:47.824+0100\",\n                        \"updated\":\"2021-01-10T10:12:47.824+0100\"\n                    }\n                    }\n                \"\"\"\n\n                comment_text = parsed['comment']['body']\n                commentor = ''\n                if 'name' in parsed['comment']['updateAuthor']:\n                    commentor = parsed['comment']['updateAuthor']['name']\n                elif 'emailAddress' in parsed['comment']['updateAuthor']:\n                    commentor = parsed['comment']['updateAuthor']['emailAddress']\n                else:\n                    logger.debug('Could not find the author of this jira comment!')\n                commentor_display_name = parsed['comment']['updateAuthor']['displayName']\n                # example: body['comment']['self'] = \"http://www.testjira.com/jira_under_a_path/rest/api/2/issue/666/comment/456843\"\n                jid = parsed['comment']['self'].split('/')[-3]\n                jissue = get_object_or_404(JIRA_Issue, jira_id=jid)\n                logging.info(\"Received issue comment for {}\".format(jissue.jira_key))\n                logger.debug('jissue: %s', vars(jissue))\n\n                jira_usernames = JIRA_Instance.objects.values_list('username', flat=True)\n                for jira_userid in jira_usernames:\n                    # logger.debug('incoming username: %s jira config username: %s', commentor.lower(), jira_userid.lower())\n                    if jira_userid.lower() == commentor.lower():\n                        logger.debug('skipping incoming JIRA comment as the user id of the comment in JIRA (%s) matches the JIRA username in DefectDojo (%s)', commentor.lower(), jira_userid.lower())\n                        return HttpResponse('')\n                        break\n\n                findings = None\n                if jissue.finding:\n                    findings = [jissue.finding]\n                    create_notification(event='other', title='JIRA incoming comment - %s' % (jissue.finding), finding=jissue.finding, url=reverse(\"view_finding\", args=(jissue.finding.id, )), icon='check')\n                elif jissue.finding_group:\n                    findings = [jissue.finding_group.findings.all()]\n                    create_notification(event='other', title='JIRA incoming comment - %s' % (jissue.finding), finding=jissue.finding, url=reverse(\"view_finding_group\", args=(jissue.finding_group.id, )), icon='check')\n                elif jissue.engagement:\n                    return HttpResponse('Comment for engagement ignored')\n                else:\n                    raise Http404('No finding or engagement found for JIRA issue {}'.format(jissue.jira_key))\n\n                for finding in findings:\n                    # logger.debug('finding: %s', vars(jissue.finding))\n                    new_note = Notes()\n                    new_note.entry = '(%s (%s)): %s' % (commentor_display_name, commentor, comment_text)\n                    new_note.author, created = User.objects.get_or_create(username='JIRA')\n                    new_note.save()\n                    finding.notes.add(new_note)\n                    finding.jira_issue.jira_change = timezone.now()\n                    finding.jira_issue.save()\n                    finding.save()\n\n            if parsed.get('webhookEvent') not in ['comment_created', 'jira:issue_updated']:\n                logger.info('Unrecognized JIRA webhook event received: {}'.format(parsed.get('webhookEvent')))\n        except Exception as e:\n            if isinstance(e, Http404):\n                logger.warning('404 error processing JIRA webhook')\n            else:\n                logger.exception(e)\n\n            try:\n                logger.debug('jira_webhook_body_parsed:')\n                logger.debug(json.dumps(parsed, indent=4))\n            except:\n                logger.debug('jira_webhook_body:')\n                logger.debug(request.body.decode('utf-8'))\n\n            # reraise to make sure we don't silently swallow things\n            raise\n    return HttpResponse('')", "message": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.", "metadata": {"category": "security", "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A6: Security Misconfiguration", "shortlink": "https://sg.run/rd5e", "source": "https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt", "technology": ["django"]}, "metavars": {"$R": {"abstract_content": "webhook", "end": {"col": 12, "line": 32, "offset": 1434}, "start": {"col": 5, "line": 32, "offset": 1427}, "unique_id": {"md5sum": "54dec027bf9cf0ad278706db1e32b5c2", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/jira_link/views.py", "start": {"col": 1, "line": 30, "offset": 1396}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 174, "line": 810, "offset": 37166}, "extra": {"fingerprint": "3b44a6e03a17efab1fb368ef373d7252", "is_ignored": false, "lines": "    tags = TagField(blank=True, force_lowercase=True, help_text=_(\"Add tags that help describe this product. Choose from the list or add new tags. Press Enter key to add.\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tags", "end": {"col": 9, "line": 810, "offset": 37001}, "start": {"col": 5, "line": 810, "offset": 36997}, "unique_id": {"md5sum": "340b05417ec0d43d6d82d23b2d925c97", "type": "AST"}}, "$M": {"abstract_content": "Product", "end": {"col": 14, "line": 727, "offset": 32880}, "start": {"col": 7, "line": 727, "offset": 32873}, "unique_id": {"md5sum": "602cabbc4d27be02fb5598d51d233836", "type": "AST"}}, "$X": {"abstract_content": "tagulous models TagField", "end": {"col": 37, "line": 33, "offset": 1224}, "start": {"col": 6, "line": 33, "offset": 1193}, "unique_id": {"md5sum": "04eadc751cbe2e22d2662a0cbf486885", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 810, "offset": 36997}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 177, "line": 1145, "offset": 54410}, "extra": {"fingerprint": "fcc12d61fb925490d3ae8b086b6585c3", "is_ignored": false, "lines": "    tags = TagField(blank=True, force_lowercase=True, help_text=_(\"Add tags that help describe this engagement. Choose from the list or add new tags. Press Enter key to add.\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tags", "end": {"col": 9, "line": 1145, "offset": 54242}, "start": {"col": 5, "line": 1145, "offset": 54238}, "unique_id": {"md5sum": "369ba5a3a03397c4ec8f78df426a6f0d", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}, "$X": {"abstract_content": "tagulous models TagField", "end": {"col": 37, "line": 33, "offset": 1224}, "start": {"col": 6, "line": 33, "offset": 1193}, "unique_id": {"md5sum": "0c14cb03ab7b92246696f8de5d12c3dd", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1145, "offset": 54238}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 63, "line": 1223, "offset": 57003}, "extra": {"fingerprint": "f00904a4269dcec81b531a7aa7133455", "is_ignored": false, "lines": "    mitigated = models.BooleanField(default=False, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "mitigated", "end": {"col": 14, "line": 1223, "offset": 56954}, "start": {"col": 5, "line": 1223, "offset": 56945}, "unique_id": {"md5sum": "f875f87762d12e1c8309487ab77eae19", "type": "AST"}}, "$M": {"abstract_content": "Endpoint_Status", "end": {"col": 22, "line": 1220, "offset": 56769}, "start": {"col": 7, "line": 1220, "offset": 56754}, "unique_id": {"md5sum": "b5c9ffc4c9cf3c66db5ed6aeb5d6d806", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 36, "line": 1223, "offset": 56976}, "start": {"col": 17, "line": 1223, "offset": 56957}, "unique_id": {"md5sum": "fae9080a7e5c72226518f3adb5829b27", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1223, "offset": 56945}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 68, "line": 1226, "offset": 57253}, "extra": {"fingerprint": "f547d02f5287682254b17e396f143f54", "is_ignored": false, "lines": "    false_positive = models.BooleanField(default=False, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "false_positive", "end": {"col": 19, "line": 1226, "offset": 57204}, "start": {"col": 5, "line": 1226, "offset": 57190}, "unique_id": {"md5sum": "cd990db431847c27db2343ad4e767ac7", "type": "AST"}}, "$M": {"abstract_content": "Endpoint_Status", "end": {"col": 22, "line": 1220, "offset": 56769}, "start": {"col": 7, "line": 1220, "offset": 56754}, "unique_id": {"md5sum": "b5c9ffc4c9cf3c66db5ed6aeb5d6d806", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 41, "line": 1226, "offset": 57226}, "start": {"col": 22, "line": 1226, "offset": 57207}, "unique_id": {"md5sum": "411ec0935fd3cd2fa38cf189c55fe634", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1226, "offset": 57190}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 66, "line": 1227, "offset": 57319}, "extra": {"fingerprint": "eee8d5e58b5baf196fc67865f2fb720c", "is_ignored": false, "lines": "    out_of_scope = models.BooleanField(default=False, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "out_of_scope", "end": {"col": 17, "line": 1227, "offset": 57270}, "start": {"col": 5, "line": 1227, "offset": 57258}, "unique_id": {"md5sum": "e674d7f3fd03158e25ee7b082c140527", "type": "AST"}}, "$M": {"abstract_content": "Endpoint_Status", "end": {"col": 22, "line": 1220, "offset": 56769}, "start": {"col": 7, "line": 1220, "offset": 56754}, "unique_id": {"md5sum": "b5c9ffc4c9cf3c66db5ed6aeb5d6d806", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 39, "line": 1227, "offset": 57292}, "start": {"col": 20, "line": 1227, "offset": 57273}, "unique_id": {"md5sum": "768a12f0abf8d65934f176ac87df9bb2", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1227, "offset": 57258}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 67, "line": 1228, "offset": 57386}, "extra": {"fingerprint": "cd9a5293827258c4e48bbfddca5bb3ef", "is_ignored": false, "lines": "    risk_accepted = models.BooleanField(default=False, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "risk_accepted", "end": {"col": 18, "line": 1228, "offset": 57337}, "start": {"col": 5, "line": 1228, "offset": 57324}, "unique_id": {"md5sum": "ddd9bfce90cf515ec87786e96dbbbc3c", "type": "AST"}}, "$M": {"abstract_content": "Endpoint_Status", "end": {"col": 22, "line": 1220, "offset": 56769}, "start": {"col": 7, "line": 1220, "offset": 56754}, "unique_id": {"md5sum": "b5c9ffc4c9cf3c66db5ed6aeb5d6d806", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 40, "line": 1228, "offset": 57359}, "start": {"col": 21, "line": 1228, "offset": 57340}, "unique_id": {"md5sum": "4114ffaecac5553a3ad68576f96a2e44", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1228, "offset": 57324}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 175, "line": 1281, "offset": 60437}, "extra": {"fingerprint": "2c2f329e510144735190e8e34bbee5ee", "is_ignored": false, "lines": "    tags = TagField(blank=True, force_lowercase=True, help_text=_(\"Add tags that help describe this endpoint. Choose from the list or add new tags. Press Enter key to add.\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tags", "end": {"col": 9, "line": 1281, "offset": 60271}, "start": {"col": 5, "line": 1281, "offset": 60267}, "unique_id": {"md5sum": "14b8bc59d7307350045fc703ab3341c6", "type": "AST"}}, "$M": {"abstract_content": "Endpoint", "end": {"col": 15, "line": 1258, "offset": 58418}, "start": {"col": 7, "line": 1258, "offset": 58410}, "unique_id": {"md5sum": "f2fc15c71f632e22818e6acca0e55f63", "type": "AST"}}, "$X": {"abstract_content": "tagulous models TagField", "end": {"col": 37, "line": 33, "offset": 1224}, "start": {"col": 6, "line": 33, "offset": 1193}, "unique_id": {"md5sum": "9b6601a38b5c91bf612e8d6ff926340a", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1281, "offset": 60267}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 171, "line": 1584, "offset": 74118}, "extra": {"fingerprint": "89245c3f8082ebd927efd6483c0c582d", "is_ignored": false, "lines": "    tags = TagField(blank=True, force_lowercase=True, help_text=_(\"Add tags that help describe this test. Choose from the list or add new tags. Press Enter key to add.\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tags", "end": {"col": 9, "line": 1584, "offset": 73956}, "start": {"col": 5, "line": 1584, "offset": 73952}, "unique_id": {"md5sum": "2ae5e74a12b206617f8aac1469fca1e8", "type": "AST"}}, "$M": {"abstract_content": "Test", "end": {"col": 11, "line": 1562, "offset": 72682}, "start": {"col": 7, "line": 1562, "offset": 72678}, "unique_id": {"md5sum": "117b1bf876c31753f52ce55a9e6b9e1a", "type": "AST"}}, "$X": {"abstract_content": "tagulous models TagField", "end": {"col": 37, "line": 33, "offset": 1224}, "start": {"col": 6, "line": 33, "offset": 1193}, "unique_id": {"md5sum": "f4a6dafcf4e14db517efc85e6f49e499", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1584, "offset": 73952}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 174, "line": 2050, "offset": 103616}, "extra": {"fingerprint": "cf9f10d2995544887f4757712e34aba1", "is_ignored": false, "lines": "    tags = TagField(blank=True, force_lowercase=True, help_text=_(\"Add tags that help describe this finding. Choose from the list or add new tags. Press Enter key to add.\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tags", "end": {"col": 9, "line": 2050, "offset": 103451}, "start": {"col": 5, "line": 2050, "offset": 103447}, "unique_id": {"md5sum": "4ca29b120587d3f89b6b14cec5b6b1e0", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}, "$X": {"abstract_content": "tagulous models TagField", "end": {"col": 37, "line": 33, "offset": 1224}, "start": {"col": 6, "line": 33, "offset": 1193}, "unique_id": {"md5sum": "6e5c0b9c7431c063a483dc654d4d2b95", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2050, "offset": 103447}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 183, "line": 2738, "offset": 132353}, "extra": {"fingerprint": "4c8fe5b5bfcd0d602264694fe6ae9318", "is_ignored": false, "lines": "    tags = TagField(blank=True, force_lowercase=True, help_text=_(\"Add tags that help describe this finding template. Choose from the list or add new tags. Press Enter key to add.\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tags", "end": {"col": 9, "line": 2738, "offset": 132179}, "start": {"col": 5, "line": 2738, "offset": 132175}, "unique_id": {"md5sum": "35c15ba4f7525e0f2d8cd0bc689411ce", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}, "$X": {"abstract_content": "tagulous models TagField", "end": {"col": 37, "line": 33, "offset": 1224}, "start": {"col": 6, "line": 33, "offset": 1193}, "unique_id": {"md5sum": "9d666ffebabea8615afa8fc457e19c57", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2738, "offset": 132175}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 170, "line": 2967, "offset": 143676}, "extra": {"fingerprint": "f7f7853f438338ce27edef9d83c0ff36", "is_ignored": false, "lines": "    git_push_notes = models.BooleanField(default=False, blank=True, help_text=_(\"Notes added to findings will be automatically added to the corresponding github issue\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "git_push_notes", "end": {"col": 19, "line": 2967, "offset": 143525}, "start": {"col": 5, "line": 2967, "offset": 143511}, "unique_id": {"md5sum": "9377e9a46db0048e780ffdfc6a87c303", "type": "AST"}}, "$M": {"abstract_content": "GITHUB_PKey", "end": {"col": 18, "line": 2961, "offset": 143097}, "start": {"col": 7, "line": 2961, "offset": 143086}, "unique_id": {"md5sum": "ffede6a93fbac694ef5ed7581c62a23f", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 41, "line": 2967, "offset": 143547}, "start": {"col": 22, "line": 2967, "offset": 143528}, "unique_id": {"md5sum": "111604453b31611c58beb04f51ec75a1", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2967, "offset": 143511}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 134, "line": 3075, "offset": 150642}, "extra": {"fingerprint": "4a73cae0e4e96898c541eab6033d54fc", "is_ignored": false, "lines": "    push_all_issues = models.BooleanField(default=False, blank=True,\n         help_text=_(\"Automatically maintain parity with JIRA. Always create and update JIRA tickets for findings in this Product.\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "push_all_issues", "end": {"col": 20, "line": 3074, "offset": 150459}, "start": {"col": 5, "line": 3074, "offset": 150444}, "unique_id": {"md5sum": "966fbc27b8311db9aa478420ee6d24da", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Project", "end": {"col": 19, "line": 3063, "offset": 149552}, "start": {"col": 7, "line": 3063, "offset": 149540}, "unique_id": {"md5sum": "88c03db9a9d3fa88365f4755acaf5173", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 42, "line": 3074, "offset": 150481}, "start": {"col": 23, "line": 3074, "offset": 150462}, "unique_id": {"md5sum": "282549c89e4ee3f1798e4fc47561b1d9", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3074, "offset": 150444}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 69, "line": 3077, "offset": 150783}, "extra": {"fingerprint": "a43fb500929859818d740120ced0909b", "is_ignored": false, "lines": "    enable_engagement_epic_mapping = models.BooleanField(default=False,\n                                                         blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "enable_engagement_epic_mapping", "end": {"col": 35, "line": 3076, "offset": 150677}, "start": {"col": 5, "line": 3076, "offset": 150647}, "unique_id": {"md5sum": "87d101a6209cdde52d5ab6d7a27c502b", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Project", "end": {"col": 19, "line": 3063, "offset": 149552}, "start": {"col": 7, "line": 3063, "offset": 149540}, "unique_id": {"md5sum": "88c03db9a9d3fa88365f4755acaf5173", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 57, "line": 3076, "offset": 150699}, "start": {"col": 38, "line": 3076, "offset": 150680}, "unique_id": {"md5sum": "0a769df7952e23449beb777d58f57bcd", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3076, "offset": 150647}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 64, "line": 3078, "offset": 150847}, "extra": {"fingerprint": "58bcf9874f516898388f2c4ce1a38883", "is_ignored": false, "lines": "    push_notes = models.BooleanField(default=False, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "push_notes", "end": {"col": 15, "line": 3078, "offset": 150798}, "start": {"col": 5, "line": 3078, "offset": 150788}, "unique_id": {"md5sum": "64f4dc2b9f7e32b556b5f1b96a754919", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Project", "end": {"col": 19, "line": 3063, "offset": 149552}, "start": {"col": 7, "line": 3063, "offset": 149540}, "unique_id": {"md5sum": "88c03db9a9d3fa88365f4755acaf5173", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 37, "line": 3078, "offset": 150820}, "start": {"col": 18, "line": 3078, "offset": 150801}, "unique_id": {"md5sum": "806f8924d5da02717335153210de3d05", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3078, "offset": 150788}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 137, "line": 3079, "offset": 150984}, "extra": {"fingerprint": "f9c2b3f4042b5e50b86161e8d801961e", "is_ignored": false, "lines": "    product_jira_sla_notification = models.BooleanField(default=False, blank=True, verbose_name=_(\"Send SLA notifications as comment?\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "product_jira_sla_notification", "end": {"col": 34, "line": 3079, "offset": 150881}, "start": {"col": 5, "line": 3079, "offset": 150852}, "unique_id": {"md5sum": "293c3b1070d44f98c8e44af48040d831", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Project", "end": {"col": 19, "line": 3063, "offset": 149552}, "start": {"col": 7, "line": 3063, "offset": 149540}, "unique_id": {"md5sum": "88c03db9a9d3fa88365f4755acaf5173", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 56, "line": 3079, "offset": 150903}, "start": {"col": 37, "line": 3079, "offset": 150884}, "unique_id": {"md5sum": "8690137f42fdab133a4fca5f3f93ceb7", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3079, "offset": 150852}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 170, "line": 3080, "offset": 151154}, "extra": {"fingerprint": "d60c63e7b316fc98dec63d69bf98fb91", "is_ignored": false, "lines": "    risk_acceptance_expiration_notification = models.BooleanField(default=False, blank=True, verbose_name=_(\"Send Risk Acceptance expiration notifications as comment?\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "risk_acceptance_expiration_notification", "end": {"col": 44, "line": 3080, "offset": 151028}, "start": {"col": 5, "line": 3080, "offset": 150989}, "unique_id": {"md5sum": "f23787fd7294f1373bdcf64434bedae1", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Project", "end": {"col": 19, "line": 3063, "offset": 149552}, "start": {"col": 7, "line": 3063, "offset": 149540}, "unique_id": {"md5sum": "88c03db9a9d3fa88365f4755acaf5173", "type": "AST"}}, "$X": {"abstract_content": "models.BooleanField", "end": {"col": 66, "line": 3080, "offset": 151050}, "start": {"col": 47, "line": 3080, "offset": 151031}, "unique_id": {"md5sum": "4bd9087bb93a5ca9e0fe50e801bfc573", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3080, "offset": 150989}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 114, "line": 3161, "offset": 154552}, "extra": {"fingerprint": "298cd12ac366edca4fb657ef31cd1839", "is_ignored": false, "lines": "    product_type_added = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "product_type_added", "end": {"col": 23, "line": 3161, "offset": 154461}, "start": {"col": 5, "line": 3161, "offset": 154443}, "unique_id": {"md5sum": "7b8a08c4fc038882d04f33c4a92a221b", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "431c64bc49af0900a0a09263a02ac893", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3161, "offset": 154443}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 109, "line": 3162, "offset": 154661}, "extra": {"fingerprint": "963b2fa9a9dbb3188072fd624336570e", "is_ignored": false, "lines": "    product_added = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "product_added", "end": {"col": 18, "line": 3162, "offset": 154570}, "start": {"col": 5, "line": 3162, "offset": 154557}, "unique_id": {"md5sum": "8a1e001a940f3e783e57222cddc8fe21", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "16b08e3897beb345f1052204ef7ebad9", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3162, "offset": 154557}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 112, "line": 3163, "offset": 154773}, "extra": {"fingerprint": "9346c64d36b62c73992ad7f76b246f3e", "is_ignored": false, "lines": "    engagement_added = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "engagement_added", "end": {"col": 21, "line": 3163, "offset": 154682}, "start": {"col": 5, "line": 3163, "offset": 154666}, "unique_id": {"md5sum": "ad0f3e80a52ca56d2b2bb45a782ae541", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "c3aa4e49b2c9dd538933cf544920673b", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3163, "offset": 154666}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 106, "line": 3164, "offset": 154879}, "extra": {"fingerprint": "17264363c8d8e162e9e18dc5498bfb23", "is_ignored": false, "lines": "    test_added = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "test_added", "end": {"col": 15, "line": 3164, "offset": 154788}, "start": {"col": 5, "line": 3164, "offset": 154778}, "unique_id": {"md5sum": "1dd1c823e6f7a3eca42feb0c03353fd8", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "205a0347060f40355b48e9893c300a53", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3164, "offset": 154778}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 208, "line": 3166, "offset": 155088}, "extra": {"fingerprint": "5c2fc9d51d48adda7de56c63f3960619", "is_ignored": false, "lines": "    scan_added = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True, help_text=_('Triggered whenever an (re-)import has been done that created/updated/closed findings.'))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "scan_added", "end": {"col": 15, "line": 3166, "offset": 154895}, "start": {"col": 5, "line": 3166, "offset": 154885}, "unique_id": {"md5sum": "4465a254d8361629b79703689eb49cd0", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "29ed3ca2ecd19111cd863e278f32de3e", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3166, "offset": 154885}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 264, "line": 3167, "offset": 155352}, "extra": {"fingerprint": "7cab0cca92510d0ac3e7a588fbb3ed6e", "is_ignored": false, "lines": "    jira_update = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True, verbose_name=_(\"JIRA problems\"), help_text=_(\"JIRA sync happens in the background, errors will be shown as notifications/alerts so make sure to subscribe\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "jira_update", "end": {"col": 16, "line": 3167, "offset": 155104}, "start": {"col": 5, "line": 3167, "offset": 155093}, "unique_id": {"md5sum": "5fa4da9c6a4fb51f52d3b7f168d09ad7", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "0b5340f85e3825ab0e4b98faeb8b2f7f", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3167, "offset": 155093}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 115, "line": 3168, "offset": 155467}, "extra": {"fingerprint": "92a0570cf4c3b33783811cd192880edc", "is_ignored": false, "lines": "    upcoming_engagement = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "upcoming_engagement", "end": {"col": 24, "line": 3168, "offset": 155376}, "start": {"col": 5, "line": 3168, "offset": 155357}, "unique_id": {"md5sum": "5abc8be1adc7b4cf779b4bd2d0a49b39", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "1778eb291903f888ba275e797a46f8bf", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3168, "offset": 155357}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 112, "line": 3169, "offset": 155579}, "extra": {"fingerprint": "1689a38b68f4e545948b49b485bfe7c6", "is_ignored": false, "lines": "    stale_engagement = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "stale_engagement", "end": {"col": 21, "line": 3169, "offset": 155488}, "start": {"col": 5, "line": 3169, "offset": 155472}, "unique_id": {"md5sum": "b072b929bc7a6ef8236539c1379bd652", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "ed4f1088474b7136406972b968060511", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3169, "offset": 155472}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 117, "line": 3170, "offset": 155696}, "extra": {"fingerprint": "d0ce5636e0731f492fb94d503a55c2a1", "is_ignored": false, "lines": "    auto_close_engagement = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "auto_close_engagement", "end": {"col": 26, "line": 3170, "offset": 155605}, "start": {"col": 5, "line": 3170, "offset": 155584}, "unique_id": {"md5sum": "49920078f1e1b8ea4c59ffce559dc8c8", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "0c96631e02a4d0dd8b69cb423e906656", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3170, "offset": 155584}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 112, "line": 3171, "offset": 155808}, "extra": {"fingerprint": "5d9a4f74366ab97f196f1685676ad4e6", "is_ignored": false, "lines": "    close_engagement = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "close_engagement", "end": {"col": 21, "line": 3171, "offset": 155717}, "start": {"col": 5, "line": 3171, "offset": 155701}, "unique_id": {"md5sum": "8ae2ce99e01a4f68eb6c53b5eaca23f1", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "153bc1070c2f183145a2df8fc42f159b", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3171, "offset": 155701}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 110, "line": 3172, "offset": 155918}, "extra": {"fingerprint": "7af822b7067856d3b4b5110af61a42f5", "is_ignored": false, "lines": "    user_mentioned = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "user_mentioned", "end": {"col": 19, "line": 3172, "offset": 155827}, "start": {"col": 5, "line": 3172, "offset": 155813}, "unique_id": {"md5sum": "33196b23407cf460243549864f2379dc", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "cad6ba3499bb7754aae6f8c8cd4e0f6f", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3172, "offset": 155813}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 107, "line": 3173, "offset": 156025}, "extra": {"fingerprint": "fe81db1a84181e59ae5821bfe047dc8c", "is_ignored": false, "lines": "    code_review = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "code_review", "end": {"col": 16, "line": 3173, "offset": 155934}, "start": {"col": 5, "line": 3173, "offset": 155923}, "unique_id": {"md5sum": "dc87d349e0975af9f2c3ea48a3376738", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "68c7a1efb9826e2defffd1d16af45d07", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3173, "offset": 155923}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 112, "line": 3174, "offset": 156137}, "extra": {"fingerprint": "daa3887664fc05078e804dce166b2ee8", "is_ignored": false, "lines": "    review_requested = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "review_requested", "end": {"col": 21, "line": 3174, "offset": 156046}, "start": {"col": 5, "line": 3174, "offset": 156030}, "unique_id": {"md5sum": "cd16c644b557d51c1c07ddfc23a3b0fd", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "c9f7ffc92f245494fe58630ad42205a0", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3174, "offset": 156030}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 101, "line": 3175, "offset": 156238}, "extra": {"fingerprint": "77b6f11070388353f1473d1da5128af5", "is_ignored": false, "lines": "    other = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "other", "end": {"col": 10, "line": 3175, "offset": 156147}, "start": {"col": 5, "line": 3175, "offset": 156142}, "unique_id": {"md5sum": "9450ac459f4f79b1f7e33bc81bc6887d", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "768924f784845f1d79ade6cc8fe726d6", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3175, "offset": 156142}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 64, "line": 3181, "offset": 156711}, "extra": {"fingerprint": "c05b14b664e0689c686adedc743bfafa", "is_ignored": false, "lines": "    sla_breach = MultiSelectField(choices=NOTIFICATION_CHOICES, default=DEFAULT_NOTIFICATION, blank=True,\n        verbose_name=_('SLA breach'),\n        help_text=_('Get notified of (upcoming) SLA breaches'))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "sla_breach", "end": {"col": 15, "line": 3179, "offset": 156518}, "start": {"col": 5, "line": 3179, "offset": 156508}, "unique_id": {"md5sum": "d9fd47a3409a95828880390d13b829e3", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "6ed3d0a01c1fdeaf2967c092f0fa496d", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3179, "offset": 156508}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 76, "line": 3184, "offset": 156950}, "extra": {"fingerprint": "58de16c30bee9264b84fc9aced320a08", "is_ignored": false, "lines": "    risk_acceptance_expiration = MultiSelectField(choices=NOTIFICATION_CHOICES, default='alert', blank=True,\n        verbose_name=_('Risk Acceptance Expiration'),\n        help_text=_('Get notified of (upcoming) Risk Acceptance expiries'))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "risk_acceptance_expiration", "end": {"col": 31, "line": 3182, "offset": 156742}, "start": {"col": 5, "line": 3182, "offset": 156716}, "unique_id": {"md5sum": "c6c9f70fda607d5b0264ab28db97d646", "type": "AST"}}, "$M": {"abstract_content": "Notifications", "end": {"col": 20, "line": 3160, "offset": 154423}, "start": {"col": 7, "line": 3160, "offset": 154410}, "unique_id": {"md5sum": "bc2435479af10cdb119772164ef3d2be", "type": "AST"}}, "$X": {"abstract_content": "multiselectfield MultiSelectField", "end": {"col": 46, "line": 29, "offset": 1063}, "start": {"col": 6, "line": 29, "offset": 1023}, "unique_id": {"md5sum": "63993ea1587278052eb20a24d4590c43", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3182, "offset": 156716}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 54, "line": 3349, "offset": 165927}, "extra": {"fingerprint": "7230c7aa78f322c470a4c50f84e102da", "is_ignored": false, "lines": "    tags = TagField(blank=True, force_lowercase=True)", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tags", "end": {"col": 9, "line": 3349, "offset": 165882}, "start": {"col": 5, "line": 3349, "offset": 165878}, "unique_id": {"md5sum": "5fb90fab124f9a7d4114241a5449d36d", "type": "AST"}}, "$M": {"abstract_content": "App_Analysis", "end": {"col": 19, "line": 3338, "offset": 165165}, "start": {"col": 7, "line": 3338, "offset": 165153}, "unique_id": {"md5sum": "e91e0fd03722ba162286500787cb439c", "type": "AST"}}, "$X": {"abstract_content": "tagulous models TagField", "end": {"col": 37, "line": 33, "offset": 1224}, "start": {"col": 6, "line": 33, "offset": 1193}, "unique_id": {"md5sum": "8ba00b7882a1ef6b1e85726f64384f7b", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3349, "offset": 165878}}, {"check_id": "python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "end": {"col": 173, "line": 3375, "offset": 167122}, "extra": {"fingerprint": "55bfe0e3b2d8c97d51d975478e61b9d9", "is_ignored": false, "lines": "    tags = TagField(blank=True, force_lowercase=True, help_text=_(\"Add tags that help describe this object. Choose from the list or add new tags. Press Enter key to add.\"))", "message": "null=True should be set if blank=True is set on non-text fields.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/ox40", "source": "https://semgrep.dev/r/python.django.correctness.nontext-field-must-set-null-true.nontext-field-must-set-null-true", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tags", "end": {"col": 9, "line": 3375, "offset": 166958}, "start": {"col": 5, "line": 3375, "offset": 166954}, "unique_id": {"md5sum": "c2a374798127fa895b7ab5ec9cda5b40", "type": "AST"}}, "$M": {"abstract_content": "Objects_Product", "end": {"col": 22, "line": 3363, "offset": 166258}, "start": {"col": 7, "line": 3363, "offset": 166243}, "unique_id": {"md5sum": "40084f9951d9105cd9fba11e40a15a5a", "type": "AST"}}, "$X": {"abstract_content": "tagulous models TagField", "end": {"col": 37, "line": 33, "offset": 1224}, "start": {"col": 6, "line": 33, "offset": 1193}, "unique_id": {"md5sum": "9b2b2c9b4e951567fd53c1fc3570bb3c", "type": "AST"}}}, "severity": "ERROR"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3375, "offset": 166954}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 68, "line": 202, "offset": 7429}, "extra": {"fingerprint": "190c84edf3c9e448bbdea63f357fb7a3", "is_ignored": false, "lines": "    title = models.CharField(blank=True, null=True, max_length=150)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "title", "end": {"col": 10, "line": 202, "offset": 7371}, "start": {"col": 5, "line": 202, "offset": 7366}, "unique_id": {"md5sum": "d011b969d7bcc1e3f0e071d9b07b889a", "type": "AST"}}, "$M": {"abstract_content": "UserContactInfo", "end": {"col": 22, "line": 200, "offset": 7277}, "start": {"col": 7, "line": 200, "offset": 7262}, "unique_id": {"md5sum": "d67734fe8275ad276b761a276e58d6fd", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 202, "offset": 7366}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 79, "line": 214, "offset": 8355}, "extra": {"fingerprint": "df2b3bc33b1634dda2a53290bc999172", "is_ignored": false, "lines": "    twitter_username = models.CharField(blank=True, null=True, max_length=150)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "twitter_username", "end": {"col": 21, "line": 214, "offset": 8297}, "start": {"col": 5, "line": 214, "offset": 8281}, "unique_id": {"md5sum": "1f63efddc701abd786be5654a4f05814", "type": "AST"}}, "$M": {"abstract_content": "UserContactInfo", "end": {"col": 22, "line": 200, "offset": 7277}, "start": {"col": 7, "line": 200, "offset": 7262}, "unique_id": {"md5sum": "d67734fe8275ad276b761a276e58d6fd", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 214, "offset": 8281}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 78, "line": 215, "offset": 8433}, "extra": {"fingerprint": "24656e1b7f898e970d8aacaa0e43c9e0", "is_ignored": false, "lines": "    github_username = models.CharField(blank=True, null=True, max_length=150)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "github_username", "end": {"col": 20, "line": 215, "offset": 8375}, "start": {"col": 5, "line": 215, "offset": 8360}, "unique_id": {"md5sum": "d9c2325128a6654ea89677cc4c186ee1", "type": "AST"}}, "$M": {"abstract_content": "UserContactInfo", "end": {"col": 22, "line": 200, "offset": 7277}, "start": {"col": 7, "line": 200, "offset": 7262}, "unique_id": {"md5sum": "d67734fe8275ad276b761a276e58d6fd", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 215, "offset": 8360}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 181, "line": 216, "offset": 8614}, "extra": {"fingerprint": "8e03e6bea25563561128e5887f90a0d0", "is_ignored": false, "lines": "    slack_username = models.CharField(blank=True, null=True, max_length=150, help_text=_(\"Email address associated with your slack account\"), verbose_name=_('Slack Email Address'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "slack_username", "end": {"col": 19, "line": 216, "offset": 8452}, "start": {"col": 5, "line": 216, "offset": 8438}, "unique_id": {"md5sum": "e0e78dda7c86cbf067f6986e71ac74bf", "type": "AST"}}, "$M": {"abstract_content": "UserContactInfo", "end": {"col": 22, "line": 200, "offset": 7277}, "start": {"col": 7, "line": 200, "offset": 7262}, "unique_id": {"md5sum": "d67734fe8275ad276b761a276e58d6fd", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 216, "offset": 8438}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 217, "offset": 8689}, "extra": {"fingerprint": "5c4adc865aa4991f937a87a20e7c0231", "is_ignored": false, "lines": "    slack_user_id = models.CharField(blank=True, null=True, max_length=25)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "slack_user_id", "end": {"col": 18, "line": 217, "offset": 8632}, "start": {"col": 5, "line": 217, "offset": 8619}, "unique_id": {"md5sum": "37081f607f58d113e7e1ebd4652c1c78", "type": "AST"}}, "$M": {"abstract_content": "UserContactInfo", "end": {"col": 22, "line": 200, "offset": 7277}, "start": {"col": 7, "line": 200, "offset": 7262}, "unique_id": {"md5sum": "d67734fe8275ad276b761a276e58d6fd", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 217, "offset": 8619}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 224, "offset": 9185}, "extra": {"fingerprint": "d6500eebe89a30928950e570597bdc8a", "is_ignored": false, "lines": "    description = models.CharField(max_length=4000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 224, "offset": 9126}, "start": {"col": 5, "line": 224, "offset": 9115}, "unique_id": {"md5sum": "4fdb4b9bb7525ac6414ca0a70c26606b", "type": "AST"}}, "$M": {"abstract_content": "Dojo_Group", "end": {"col": 17, "line": 222, "offset": 9038}, "start": {"col": 7, "line": 222, "offset": 9028}, "unique_id": {"md5sum": "31c1a6b182f798d907546bae684d8449", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 224, "offset": 9115}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 106, "line": 289, "offset": 12783}, "extra": {"fingerprint": "801cff1a9100a3dce524a3cabf7b2fb7", "is_ignored": false, "lines": "    jira_webhook_secret = models.CharField(max_length=64, blank=False, null=True, verbose_name=_('JIRA Webhook URL'),\n                                           help_text=_('Secret needed in URL for incoming JIRA Webhook'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "jira_webhook_secret", "end": {"col": 24, "line": 288, "offset": 12583}, "start": {"col": 5, "line": 288, "offset": 12564}, "unique_id": {"md5sum": "d0f00d8fc43c328b497af924f112a0c1", "type": "AST"}}, "$M": {"abstract_content": "System_Settings", "end": {"col": 22, "line": 243, "offset": 9688}, "start": {"col": 7, "line": 243, "offset": 9673}, "unique_id": {"md5sum": "ab2f7e6870820a9da0e6843d4db081a8", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 288, "offset": 12564}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 60, "line": 298, "offset": 13194}, "extra": {"fingerprint": "ebda7f964654c966072704e8570754bc", "is_ignored": false, "lines": "    jira_minimum_severity = models.CharField(max_length=20, blank=True,\n                                             null=True, choices=jira_choices,\n                                             default='Low')", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "jira_minimum_severity", "end": {"col": 26, "line": 296, "offset": 13010}, "start": {"col": 5, "line": 296, "offset": 12989}, "unique_id": {"md5sum": "5918f6b7eaa2eb4e7b8d1dbe19cb2d9f", "type": "AST"}}, "$M": {"abstract_content": "System_Settings", "end": {"col": 22, "line": 243, "offset": 9688}, "start": {"col": 7, "line": 243, "offset": 9673}, "unique_id": {"md5sum": "ab2f7e6870820a9da0e6843d4db081a8", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 296, "offset": 12989}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 85, "line": 300, "offset": 13353}, "extra": {"fingerprint": "b24c143ef6a90d1f1beec3ffb536f3f1", "is_ignored": false, "lines": "    jira_labels = models.CharField(max_length=200, blank=True, null=True,\n                                   help_text=_('JIRA issue labels space seperated'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "jira_labels", "end": {"col": 16, "line": 299, "offset": 13210}, "start": {"col": 5, "line": 299, "offset": 13199}, "unique_id": {"md5sum": "a5823dd888548c401149158c57aa3b69", "type": "AST"}}, "$M": {"abstract_content": "System_Settings", "end": {"col": 22, "line": 243, "offset": 9688}, "start": {"col": 7, "line": 243, "offset": 9673}, "unique_id": {"md5sum": "ab2f7e6870820a9da0e6843d4db081a8", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 299, "offset": 13199}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 588, "offset": 28177}, "extra": {"fingerprint": "6ce1e3ef3f7a3d7d81c287a9475b73cf", "is_ignored": false, "lines": "    description = models.CharField(max_length=4000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 588, "offset": 28118}, "start": {"col": 5, "line": 588, "offset": 28107}, "unique_id": {"md5sum": "e6d1900f3d5d2bf0a32440911f1d1dbe", "type": "AST"}}, "$M": {"abstract_content": "Product_Type", "end": {"col": 19, "line": 578, "offset": 27661}, "start": {"col": 7, "line": 578, "offset": 27649}, "unique_id": {"md5sum": "ae1aeb467a5941d596e14b1c9c6a0a69", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 588, "offset": 28107}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 119, "line": 800, "offset": 36061}, "extra": {"fingerprint": "b97ff68eda25f9a227a07cc0a02f246f", "is_ignored": false, "lines": "    business_criticality = models.CharField(max_length=9, choices=BUSINESS_CRITICALITY_CHOICES, blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "business_criticality", "end": {"col": 25, "line": 800, "offset": 35967}, "start": {"col": 5, "line": 800, "offset": 35947}, "unique_id": {"md5sum": "713870b2f5334334c578c962ba024b47", "type": "AST"}}, "$M": {"abstract_content": "Product", "end": {"col": 14, "line": 727, "offset": 32880}, "start": {"col": 7, "line": 727, "offset": 32873}, "unique_id": {"md5sum": "602cabbc4d27be02fb5598d51d233836", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 800, "offset": 35947}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 96, "line": 801, "offset": 36157}, "extra": {"fingerprint": "bd6a01d6c35619d0d3d35183dfd27257", "is_ignored": false, "lines": "    platform = models.CharField(max_length=11, choices=PLATFORM_CHOICES, blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "platform", "end": {"col": 13, "line": 801, "offset": 36074}, "start": {"col": 5, "line": 801, "offset": 36066}, "unique_id": {"md5sum": "953813e0aa510e0710f5dbc6938e36ec", "type": "AST"}}, "$M": {"abstract_content": "Product", "end": {"col": 14, "line": 727, "offset": 32880}, "start": {"col": 7, "line": 727, "offset": 32873}, "unique_id": {"md5sum": "602cabbc4d27be02fb5598d51d233836", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 801, "offset": 36066}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 98, "line": 802, "offset": 36255}, "extra": {"fingerprint": "54e6bf03a7e6c98201933e67c5d9af02", "is_ignored": false, "lines": "    lifecycle = models.CharField(max_length=12, choices=LIFECYCLE_CHOICES, blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "lifecycle", "end": {"col": 14, "line": 802, "offset": 36171}, "start": {"col": 5, "line": 802, "offset": 36162}, "unique_id": {"md5sum": "3e717f47143e1057025be3c142d0cf3b", "type": "AST"}}, "$M": {"abstract_content": "Product", "end": {"col": 14, "line": 727, "offset": 32880}, "start": {"col": 7, "line": 727, "offset": 32873}, "unique_id": {"md5sum": "602cabbc4d27be02fb5598d51d233836", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 802, "offset": 36162}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 92, "line": 803, "offset": 36347}, "extra": {"fingerprint": "af029912760afe1f6e2dbf36fffc07c4", "is_ignored": false, "lines": "    origin = models.CharField(max_length=19, choices=ORIGIN_CHOICES, blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "origin", "end": {"col": 11, "line": 803, "offset": 36266}, "start": {"col": 5, "line": 803, "offset": 36260}, "unique_id": {"md5sum": "028acb97c1e026431dc3e1922a10d01a", "type": "AST"}}, "$M": {"abstract_content": "Product", "end": {"col": 14, "line": 727, "offset": 32880}, "start": {"col": 7, "line": 727, "offset": 32873}, "unique_id": {"md5sum": "602cabbc4d27be02fb5598d51d233836", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 803, "offset": 36260}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 965, "offset": 43960}, "extra": {"fingerprint": "f8dbacadf64a03c288c7a62ec8192580", "is_ignored": false, "lines": "    description = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 965, "offset": 43901}, "start": {"col": 5, "line": 965, "offset": 43890}, "unique_id": {"md5sum": "ed55f2fe8a700ef0896cd9839058fb4e", "type": "AST"}}, "$M": {"abstract_content": "Tool_Type", "end": {"col": 16, "line": 963, "offset": 43826}, "start": {"col": 7, "line": 963, "offset": 43817}, "unique_id": {"md5sum": "eb5ecb18df328107483d1153f3fb6a57", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 965, "offset": 43890}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 976, "offset": 44227}, "extra": {"fingerprint": "17f75fd05654db7b7111ae155781ec6e", "is_ignored": false, "lines": "    description = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 976, "offset": 44168}, "start": {"col": 5, "line": 976, "offset": 44157}, "unique_id": {"md5sum": "83b9abb32cc3df317c65fc523fe3e91b", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 976, "offset": 44157}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 67, "line": 977, "offset": 44294}, "extra": {"fingerprint": "f073f55be96d9b8bb4f79adca40cf7ec", "is_ignored": false, "lines": "    url = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "url", "end": {"col": 8, "line": 977, "offset": 44235}, "start": {"col": 5, "line": 977, "offset": 44232}, "unique_id": {"md5sum": "cb77556dbbab79bc2689f6822d517a9d", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 977, "offset": 44232}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 66, "line": 985, "offset": 44829}, "extra": {"fingerprint": "2a98bcc76277fb9e40565288bef93e72", "is_ignored": false, "lines": "    authentication_type = models.CharField(max_length=15,\n                                           choices=(\n                                               ('API', 'API Key'),\n                                               ('Password',\n                                                'Username/Password'),\n                                               ('SSH', 'SSH')),\n                                           null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "authentication_type", "end": {"col": 24, "line": 979, "offset": 44415}, "start": {"col": 5, "line": 979, "offset": 44396}, "unique_id": {"md5sum": "8ff620c970efd1056323f3ba5dd9e3d0", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 979, "offset": 44396}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 102, "line": 987, "offset": 45051}, "extra": {"fingerprint": "a78e7cd47f67ec4efc074f2c4cd1f929", "is_ignored": false, "lines": "    extras = models.CharField(max_length=255, null=True, blank=True, help_text=_(\"Additional definitions that will be \"\n                                                                              \"consumed by scanner\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "extras", "end": {"col": 11, "line": 986, "offset": 44840}, "start": {"col": 5, "line": 986, "offset": 44834}, "unique_id": {"md5sum": "950ce0e50dd116fde6a3b3cf8347cdfb", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 986, "offset": 44834}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 71, "line": 988, "offset": 45122}, "extra": {"fingerprint": "85fc54053960e26724a2dc28f4a2999f", "is_ignored": false, "lines": "    username = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "username", "end": {"col": 13, "line": 988, "offset": 45064}, "start": {"col": 5, "line": 988, "offset": 45056}, "unique_id": {"md5sum": "da201aa2def7c656a48ca9ad340fc494", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 988, "offset": 45056}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 71, "line": 989, "offset": 45193}, "extra": {"fingerprint": "971d98a6d4aec1101c48eb9feb8eb59e", "is_ignored": false, "lines": "    password = models.CharField(max_length=600, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "password", "end": {"col": 13, "line": 989, "offset": 45135}, "start": {"col": 5, "line": 989, "offset": 45127}, "unique_id": {"md5sum": "20fe89f4a2762e5dbe1f6fae6665c7fb", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 989, "offset": 45127}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 991, "offset": 45341}, "extra": {"fingerprint": "2ad3628c91535abc93275b3d1f72b91f", "is_ignored": false, "lines": "    auth_title = models.CharField(max_length=200, null=True, blank=True,\n                                  verbose_name=_(\"Title for SSH/API Key\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "auth_title", "end": {"col": 15, "line": 990, "offset": 45208}, "start": {"col": 5, "line": 990, "offset": 45198}, "unique_id": {"md5sum": "7a6231f66fb2a9ee5aeac1020e9df46a", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 990, "offset": 45198}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 67, "line": 992, "offset": 45408}, "extra": {"fingerprint": "7bf1f52692cb9469e92561ba41a0f72a", "is_ignored": false, "lines": "    ssh = models.CharField(max_length=6000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "ssh", "end": {"col": 8, "line": 992, "offset": 45349}, "start": {"col": 5, "line": 992, "offset": 45346}, "unique_id": {"md5sum": "2b0b19a6515f7e2d35e906d1dcbe447a", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 992, "offset": 45346}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 58, "line": 994, "offset": 45536}, "extra": {"fingerprint": "ff636343f1c779bb3fec73f10bb14d06", "is_ignored": false, "lines": "    api_key = models.CharField(max_length=600, null=True, blank=True,\n                               verbose_name=_('API Key'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "api_key", "end": {"col": 12, "line": 993, "offset": 45420}, "start": {"col": 5, "line": 993, "offset": 45413}, "unique_id": {"md5sum": "238eb1c094ca3ddbff531752ee419975", "type": "AST"}}, "$M": {"abstract_content": "Tool_Configuration", "end": {"col": 25, "line": 974, "offset": 44081}, "start": {"col": 7, "line": 974, "offset": 44063}, "unique_id": {"md5sum": "33cf902e1bc56f58eb391316fb569de4", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 993, "offset": 45413}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 76, "line": 1006, "offset": 45966}, "extra": {"fingerprint": "4f4275911014fa34d8a5b40263b4192e", "is_ignored": false, "lines": "    service_key_1 = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "service_key_1", "end": {"col": 18, "line": 1006, "offset": 45908}, "start": {"col": 5, "line": 1006, "offset": 45895}, "unique_id": {"md5sum": "aff87f2f924c12bfe1924f81c0bcd79f", "type": "AST"}}, "$M": {"abstract_content": "Product_API_Scan_Configuration", "end": {"col": 37, "line": 1003, "offset": 45669}, "start": {"col": 7, "line": 1003, "offset": 45639}, "unique_id": {"md5sum": "5cb5ec7c853853075152641b879dd453", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1006, "offset": 45895}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 76, "line": 1007, "offset": 46042}, "extra": {"fingerprint": "431e8198f86fca8aae47ba0498fa69e3", "is_ignored": false, "lines": "    service_key_2 = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "service_key_2", "end": {"col": 18, "line": 1007, "offset": 45984}, "start": {"col": 5, "line": 1007, "offset": 45971}, "unique_id": {"md5sum": "58edeb7e20b085501f7f11c0d265e433", "type": "AST"}}, "$M": {"abstract_content": "Product_API_Scan_Configuration", "end": {"col": 37, "line": 1003, "offset": 45669}, "start": {"col": 7, "line": 1003, "offset": 45639}, "unique_id": {"md5sum": "5cb5ec7c853853075152641b879dd453", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1007, "offset": 45971}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 76, "line": 1008, "offset": 46118}, "extra": {"fingerprint": "d4d8787677be473e18171d0522854493", "is_ignored": false, "lines": "    service_key_3 = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "service_key_3", "end": {"col": 18, "line": 1008, "offset": 46060}, "start": {"col": 5, "line": 1008, "offset": 46047}, "unique_id": {"md5sum": "255108e992d737c581196e418bc80f4e", "type": "AST"}}, "$M": {"abstract_content": "Product_API_Scan_Configuration", "end": {"col": 37, "line": 1003, "offset": 45669}, "start": {"col": 7, "line": 1003, "offset": 45639}, "unique_id": {"md5sum": "5cb5ec7c853853075152641b879dd453", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1008, "offset": 46047}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 162, "line": 1072, "offset": 48685}, "extra": {"fingerprint": "444112959c296f12dfbbf634faee461c", "is_ignored": false, "lines": "    notes = models.CharField(max_length=2000, help_text=_(\"Description of what needs to be tested or setting up environment for testing\"), null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "notes", "end": {"col": 10, "line": 1072, "offset": 48533}, "start": {"col": 5, "line": 1072, "offset": 48528}, "unique_id": {"md5sum": "7bd6de21be20c66f0474ffd4aa7a0c3b", "type": "AST"}}, "$M": {"abstract_content": "Engagement_Presets", "end": {"col": 25, "line": 1068, "offset": 48236}, "start": {"col": 7, "line": 1068, "offset": 48218}, "unique_id": {"md5sum": "6ecda51efd54a7e8395a31c386c4ec36", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1072, "offset": 48528}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 67, "line": 1094, "offset": 49576}, "extra": {"fingerprint": "b2e548187ace0de9be90eab8b253d81a", "is_ignored": false, "lines": "    name = models.CharField(max_length=300, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "name", "end": {"col": 9, "line": 1094, "offset": 49518}, "start": {"col": 5, "line": 1094, "offset": 49514}, "unique_id": {"md5sum": "d6e4feb6cd8af4c4cdd5553444ef81ed", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1094, "offset": 49514}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 1095, "offset": 49651}, "extra": {"fingerprint": "8743a48f663847a3e8cf7843033fc498", "is_ignored": false, "lines": "    description = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 1095, "offset": 49592}, "start": {"col": 5, "line": 1095, "offset": 49581}, "unique_id": {"md5sum": "45418a7434b641961784cd80c720af84", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1095, "offset": 49581}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 132, "line": 1096, "offset": 49783}, "extra": {"fingerprint": "d34348e200caa987a7dcaf9bebe238c6", "is_ignored": false, "lines": "    version = models.CharField(max_length=100, null=True, blank=True, help_text=_(\"Version of the product the engagement tested.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "version", "end": {"col": 12, "line": 1096, "offset": 49663}, "start": {"col": 5, "line": 1096, "offset": 49656}, "unique_id": {"md5sum": "efefcaa90e466772d44c9873234138e2", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1096, "offset": 49656}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 70, "line": 1103, "offset": 50399}, "extra": {"fingerprint": "727473c1ab35608e9d932444d3e45919", "is_ignored": false, "lines": "    reason = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "reason", "end": {"col": 11, "line": 1103, "offset": 50340}, "start": {"col": 5, "line": 1103, "offset": 50334}, "unique_id": {"md5sum": "2214a4c3398619edcfd06046315750d9", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1103, "offset": 50334}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 65, "line": 1119, "offset": 51509}, "extra": {"fingerprint": "43f6ff73196f7ffa61f71133b05bfe6d", "is_ignored": false, "lines": "    status = models.CharField(editable=True, max_length=2000, default='',\n                              null=True,\n                              choices=ENGAGEMENT_STATUS_CHOICES)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "status", "end": {"col": 11, "line": 1117, "offset": 51340}, "start": {"col": 5, "line": 1117, "offset": 51334}, "unique_id": {"md5sum": "4de834209858c66668691fad1b7868f8", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1117, "offset": 51334}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 74, "line": 1123, "offset": 51771}, "extra": {"fingerprint": "ac19820e6a486459d0b14cae8179a6f6", "is_ignored": false, "lines": "    tmodel_path = models.CharField(max_length=1000, default='none',\n                                   editable=False, blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tmodel_path", "end": {"col": 16, "line": 1122, "offset": 51645}, "start": {"col": 5, "line": 1122, "offset": 51634}, "unique_id": {"md5sum": "360e9bb0836194c2083169c2bb3d83ef", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1122, "offset": 51634}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 69, "line": 1132, "offset": 52373}, "extra": {"fingerprint": "89c84a77a3dc46dab1d249c73cd95b86", "is_ignored": false, "lines": "    engagement_type = models.CharField(editable=True, max_length=30, default='Interactive',\n                                       null=True,\n                                       choices=(('Interactive', 'Interactive'),\n                                                ('CI/CD', 'CI/CD')))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "engagement_type", "end": {"col": 20, "line": 1129, "offset": 52102}, "start": {"col": 5, "line": 1129, "offset": 52087}, "unique_id": {"md5sum": "2ce640a413c67a46a0e61540e5f0f2c0", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1129, "offset": 52087}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 149, "line": 1134, "offset": 52585}, "extra": {"fingerprint": "db12dfc7ec0d040f26c1fa8dedc614d9", "is_ignored": false, "lines": "    build_id = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Build ID of the product the engagement tested.\"), verbose_name=_('Build ID'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "build_id", "end": {"col": 13, "line": 1133, "offset": 52386}, "start": {"col": 5, "line": 1133, "offset": 52378}, "unique_id": {"md5sum": "b8a4689f79e60fd82d6249d2d8186889", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1133, "offset": 52378}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 127, "line": 1136, "offset": 52778}, "extra": {"fingerprint": "d5865d4601488126c644bf9ced029c62", "is_ignored": false, "lines": "    commit_hash = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Commit hash from repo\"), verbose_name=_('Commit Hash'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "commit_hash", "end": {"col": 16, "line": 1135, "offset": 52601}, "start": {"col": 5, "line": 1135, "offset": 52590}, "unique_id": {"md5sum": "264331286b725ed53eeba7d0179430d3", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1135, "offset": 52590}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 156, "line": 1138, "offset": 52999}, "extra": {"fingerprint": "565c06a3c5cc2c0322b9cb30915ce62c", "is_ignored": false, "lines": "    branch_tag = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Tag or branch of the product the engagement tested.\"), verbose_name=_(\"Branch/Tag\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "branch_tag", "end": {"col": 15, "line": 1137, "offset": 52793}, "start": {"col": 5, "line": 1137, "offset": 52783}, "unique_id": {"md5sum": "ffdfcf98ba6986192314cf28291d9a15", "type": "AST"}}, "$M": {"abstract_content": "Engagement", "end": {"col": 17, "line": 1093, "offset": 49494}, "start": {"col": 7, "line": 1093, "offset": 49484}, "unique_id": {"md5sum": "11460a3b8fbbdfa4b7037ef879bd737d", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1137, "offset": 52783}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 90, "line": 1217, "offset": 56745}, "extra": {"fingerprint": "c638ab698e7e1d7b7f724d46f6be3d8f", "is_ignored": false, "lines": "    method = models.CharField(max_length=20, blank=False, null=True, choices=method_type)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "method", "end": {"col": 11, "line": 1217, "offset": 56666}, "start": {"col": 5, "line": 1217, "offset": 56660}, "unique_id": {"md5sum": "76801330700ce961785c8fc320ecee73", "type": "AST"}}, "$M": {"abstract_content": "Endpoint_Params", "end": {"col": 22, "line": 1212, "offset": 56478}, "start": {"col": 7, "line": 1212, "offset": 56463}, "unique_id": {"md5sum": "cf0b1c8fd1f67aa0cbc5d2f42399dad0", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1217, "offset": 56660}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 118, "line": 1260, "offset": 58621}, "extra": {"fingerprint": "1e3c3511410d4c03061405ffe036e7b2", "is_ignored": false, "lines": "    protocol = models.CharField(null=True, blank=True, max_length=20,\n                                 help_text=_(\"The communication protocol/scheme such as 'http', 'ftp', 'dns', etc.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "protocol", "end": {"col": 13, "line": 1259, "offset": 58446}, "start": {"col": 5, "line": 1259, "offset": 58438}, "unique_id": {"md5sum": "950659c4e9d86bc4c5298a174d88ceea", "type": "AST"}}, "$M": {"abstract_content": "Endpoint", "end": {"col": 15, "line": 1258, "offset": 58418}, "start": {"col": 7, "line": 1258, "offset": 58410}, "unique_id": {"md5sum": "f2fc15c71f632e22818e6acca0e55f63", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1259, "offset": 58438}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 80, "line": 1262, "offset": 58772}, "extra": {"fingerprint": "a6cfeb513bfdd414fe611a446918c91d", "is_ignored": false, "lines": "    userinfo = models.CharField(null=True, blank=True, max_length=500,\n                              help_text=_(\"User info as 'alice', 'bob', etc.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "userinfo", "end": {"col": 13, "line": 1261, "offset": 58634}, "start": {"col": 5, "line": 1261, "offset": 58626}, "unique_id": {"md5sum": "4b6b2ef774d148f6dce3c46a96d738a0", "type": "AST"}}, "$M": {"abstract_content": "Endpoint", "end": {"col": 15, "line": 1258, "offset": 58418}, "start": {"col": 7, "line": 1258, "offset": 58410}, "unique_id": {"md5sum": "f2fc15c71f632e22818e6acca0e55f63", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1261, "offset": 58626}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 98, "line": 1265, "offset": 59046}, "extra": {"fingerprint": "0a8934ae1d084f6ecce7c6cc5485250e", "is_ignored": false, "lines": "    host = models.CharField(null=True, blank=True, max_length=500,\n                            help_text=_(\"The host name or IP address. It must not include the port number. \"\n                                      \"For example '127.0.0.1', 'localhost', 'yourdomain.com'.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "host", "end": {"col": 9, "line": 1263, "offset": 58781}, "start": {"col": 5, "line": 1263, "offset": 58777}, "unique_id": {"md5sum": "05ee7eeefac01bae86714ea513d0bd23", "type": "AST"}}, "$M": {"abstract_content": "Endpoint", "end": {"col": 15, "line": 1258, "offset": 58418}, "start": {"col": 7, "line": 1258, "offset": 58410}, "unique_id": {"md5sum": "f2fc15c71f632e22818e6acca0e55f63", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1263, "offset": 58777}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 60, "line": 1270, "offset": 59436}, "extra": {"fingerprint": "e661b3ad15fc78e6764c44421b016750", "is_ignored": false, "lines": "    path = models.CharField(null=True, blank=True, max_length=500,\n                            help_text=_(\"The location of the resource, it must not start with a '/'. For example \"\n                                      \"endpoint/420/edit\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "path", "end": {"col": 9, "line": 1268, "offset": 59203}, "start": {"col": 5, "line": 1268, "offset": 59199}, "unique_id": {"md5sum": "d02af6068fb26c2100da94a7d9210321", "type": "AST"}}, "$M": {"abstract_content": "Endpoint", "end": {"col": 15, "line": 1258, "offset": 58418}, "start": {"col": 7, "line": 1258, "offset": 58410}, "unique_id": {"md5sum": "f2fc15c71f632e22818e6acca0e55f63", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1268, "offset": 59199}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 72, "line": 1273, "offset": 59675}, "extra": {"fingerprint": "f7029311f7688edd188ebc17b59ae3f8", "is_ignored": false, "lines": "    query = models.CharField(null=True, blank=True, max_length=1000,\n                             help_text=_(\"The query string, the question mark should be omitted.\"\n                                       \"For example 'group=4&team=8'\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "query", "end": {"col": 10, "line": 1271, "offset": 59446}, "start": {"col": 5, "line": 1271, "offset": 59441}, "unique_id": {"md5sum": "283ac0f5c9abc1dc7d45a64824730a73", "type": "AST"}}, "$M": {"abstract_content": "Endpoint", "end": {"col": 15, "line": 1258, "offset": 58418}, "start": {"col": 7, "line": 1258, "offset": 58410}, "unique_id": {"md5sum": "f2fc15c71f632e22818e6acca0e55f63", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1271, "offset": 59441}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 99, "line": 1276, "offset": 59966}, "extra": {"fingerprint": "829b75ff9ba1db80fbf9bada72c9d56d", "is_ignored": false, "lines": "    fragment = models.CharField(null=True, blank=True, max_length=500,\n                                help_text=_(\"The fragment identifier which follows the hash mark. The hash mark should \"\n                                          \"be omitted. For example 'section-13', 'paragraph-2'.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "fragment", "end": {"col": 13, "line": 1274, "offset": 59688}, "start": {"col": 5, "line": 1274, "offset": 59680}, "unique_id": {"md5sum": "c556c4be53a024b2ecec37e1e76a7c2e", "type": "AST"}}, "$M": {"abstract_content": "Endpoint", "end": {"col": 15, "line": 1258, "offset": 58418}, "start": {"col": 7, "line": 1258, "offset": 58410}, "unique_id": {"md5sum": "f2fc15c71f632e22818e6acca0e55f63", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1274, "offset": 59680}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 44, "line": 1566, "offset": 73006}, "extra": {"fingerprint": "25ec851ab51bed55144314f931185826", "is_ignored": false, "lines": "    scan_type = models.TextField(null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "scan_type", "end": {"col": 14, "line": 1566, "offset": 72976}, "start": {"col": 5, "line": 1566, "offset": 72967}, "unique_id": {"md5sum": "0d254dec0c5654b632e6be06db81447a", "type": "AST"}}, "$M": {"abstract_content": "Test", "end": {"col": 11, "line": 1562, "offset": 72682}, "start": {"col": 7, "line": 1562, "offset": 72678}, "unique_id": {"md5sum": "117b1bf876c31753f52ce55a9e6b9e1a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1566, "offset": 72967}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 68, "line": 1567, "offset": 73074}, "extra": {"fingerprint": "fab50fd106e78465ccde0b5c7d0d3f86", "is_ignored": false, "lines": "    title = models.CharField(max_length=255, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "title", "end": {"col": 10, "line": 1567, "offset": 73016}, "start": {"col": 5, "line": 1567, "offset": 73011}, "unique_id": {"md5sum": "3c1a65c5da1685f5b7e25c0e6837d452", "type": "AST"}}, "$M": {"abstract_content": "Test", "end": {"col": 11, "line": 1562, "offset": 72682}, "start": {"col": 7, "line": 1562, "offset": 72678}, "unique_id": {"md5sum": "117b1bf876c31753f52ce55a9e6b9e1a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1567, "offset": 73011}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 58, "line": 1568, "offset": 73132}, "extra": {"fingerprint": "7f8b4b8de54dd59c1ce0c5b49344bdda", "is_ignored": false, "lines": "    description = models.TextField(null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 1568, "offset": 73090}, "start": {"col": 5, "line": 1568, "offset": 73079}, "unique_id": {"md5sum": "a4b0a29585efe4f15fba810fac74143d", "type": "AST"}}, "$M": {"abstract_content": "Test", "end": {"col": 11, "line": 1562, "offset": 72682}, "start": {"col": 7, "line": 1562, "offset": 72678}, "unique_id": {"md5sum": "117b1bf876c31753f52ce55a9e6b9e1a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1568, "offset": 73079}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 70, "line": 1586, "offset": 74189}, "extra": {"fingerprint": "0c94f313fec96c53a5963554171fb1b8", "is_ignored": false, "lines": "    version = models.CharField(max_length=100, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "version", "end": {"col": 12, "line": 1586, "offset": 74131}, "start": {"col": 5, "line": 1586, "offset": 74124}, "unique_id": {"md5sum": "01d07d63d98baf076d131f6ffa191ed1", "type": "AST"}}, "$M": {"abstract_content": "Test", "end": {"col": 11, "line": 1562, "offset": 72682}, "start": {"col": 7, "line": 1562, "offset": 72678}, "unique_id": {"md5sum": "117b1bf876c31753f52ce55a9e6b9e1a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1586, "offset": 74124}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 162, "line": 1589, "offset": 74415}, "extra": {"fingerprint": "26a7db5fdbadf0a45bac9f81a69e32d0", "is_ignored": false, "lines": "    build_id = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Build ID that was tested, a reimport may update this field.\"), verbose_name=_('Build ID'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "build_id", "end": {"col": 13, "line": 1588, "offset": 74203}, "start": {"col": 5, "line": 1588, "offset": 74195}, "unique_id": {"md5sum": "01cfc62624e8afe6361c22ec5e1567d3", "type": "AST"}}, "$M": {"abstract_content": "Test", "end": {"col": 11, "line": 1562, "offset": 72682}, "start": {"col": 7, "line": 1562, "offset": 72678}, "unique_id": {"md5sum": "117b1bf876c31753f52ce55a9e6b9e1a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1588, "offset": 74195}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 159, "line": 1591, "offset": 74640}, "extra": {"fingerprint": "fbdab2704b101eaa3346e84753818361", "is_ignored": false, "lines": "    commit_hash = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Commit hash tested, a reimport may update this field.\"), verbose_name=_('Commit Hash'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "commit_hash", "end": {"col": 16, "line": 1590, "offset": 74431}, "start": {"col": 5, "line": 1590, "offset": 74420}, "unique_id": {"md5sum": "c63044331ae64cb4cddce3090016f319", "type": "AST"}}, "$M": {"abstract_content": "Test", "end": {"col": 11, "line": 1562, "offset": 72682}, "start": {"col": 7, "line": 1562, "offset": 72678}, "unique_id": {"md5sum": "117b1bf876c31753f52ce55a9e6b9e1a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1590, "offset": 74420}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 169, "line": 1593, "offset": 74874}, "extra": {"fingerprint": "403ad7f24f9d00464315f95d304e3115", "is_ignored": false, "lines": "    branch_tag = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Tag or branch that was tested, a reimport may update this field.\"), verbose_name=_(\"Branch/Tag\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "branch_tag", "end": {"col": 15, "line": 1592, "offset": 74655}, "start": {"col": 5, "line": 1592, "offset": 74645}, "unique_id": {"md5sum": "03add3704877ead6245d978434b836f2", "type": "AST"}}, "$M": {"abstract_content": "Test", "end": {"col": 11, "line": 1562, "offset": 72682}, "start": {"col": 7, "line": 1562, "offset": 72678}, "unique_id": {"md5sum": "117b1bf876c31753f52ce55a9e6b9e1a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1592, "offset": 74645}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 70, "line": 1699, "offset": 79933}, "extra": {"fingerprint": "3793a7205f0cb2d1e998931e201998b7", "is_ignored": false, "lines": "    version = models.CharField(max_length=100, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "version", "end": {"col": 12, "line": 1699, "offset": 79875}, "start": {"col": 5, "line": 1699, "offset": 79868}, "unique_id": {"md5sum": "619b3c5384f5f6e520262ff37dae16f9", "type": "AST"}}, "$M": {"abstract_content": "Test_Import", "end": {"col": 18, "line": 1689, "offset": 79455}, "start": {"col": 7, "line": 1689, "offset": 79444}, "unique_id": {"md5sum": "e04e69850f6d0bd9747e312ba8d392fe", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1699, "offset": 79868}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 162, "line": 1701, "offset": 80158}, "extra": {"fingerprint": "04ab87c2586d5b78658326cf32edfbbf", "is_ignored": false, "lines": "    build_id = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Build ID that was tested, a reimport may update this field.\"), verbose_name=_('Build ID'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "build_id", "end": {"col": 13, "line": 1700, "offset": 79946}, "start": {"col": 5, "line": 1700, "offset": 79938}, "unique_id": {"md5sum": "dd0fd738bdd3eb779aeb2bc152c2c33e", "type": "AST"}}, "$M": {"abstract_content": "Test_Import", "end": {"col": 18, "line": 1689, "offset": 79455}, "start": {"col": 7, "line": 1689, "offset": 79444}, "unique_id": {"md5sum": "e04e69850f6d0bd9747e312ba8d392fe", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1700, "offset": 79938}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 159, "line": 1703, "offset": 80383}, "extra": {"fingerprint": "79c50d9dc0240d69dcfd8c5e31b39966", "is_ignored": false, "lines": "    commit_hash = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Commit hash tested, a reimport may update this field.\"), verbose_name=_('Commit Hash'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "commit_hash", "end": {"col": 16, "line": 1702, "offset": 80174}, "start": {"col": 5, "line": 1702, "offset": 80163}, "unique_id": {"md5sum": "76a916149c597f6477c8ce350e8a1632", "type": "AST"}}, "$M": {"abstract_content": "Test_Import", "end": {"col": 18, "line": 1689, "offset": 79455}, "start": {"col": 7, "line": 1689, "offset": 79444}, "unique_id": {"md5sum": "e04e69850f6d0bd9747e312ba8d392fe", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1702, "offset": 80163}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 169, "line": 1705, "offset": 80617}, "extra": {"fingerprint": "bbde87c4ef09de1dd3fb1717c120f948", "is_ignored": false, "lines": "    branch_tag = models.CharField(editable=True, max_length=150,\n                                   null=True, blank=True, help_text=_(\"Tag or branch that was tested, a reimport may update this field.\"), verbose_name=_(\"Branch/Tag\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "branch_tag", "end": {"col": 15, "line": 1704, "offset": 80398}, "start": {"col": 5, "line": 1704, "offset": 80388}, "unique_id": {"md5sum": "93ac76d8e8906c9910fab3164bf4de39", "type": "AST"}}, "$M": {"abstract_content": "Test_Import", "end": {"col": 18, "line": 1689, "offset": 79455}, "start": {"col": 7, "line": 1689, "offset": 79444}, "unique_id": {"md5sum": "e04e69850f6d0bd9747e312ba8d392fe", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1704, "offset": 80388}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 93, "line": 1737, "offset": 82424}, "extra": {"fingerprint": "e450497957bae87fba3150d0bccd5510", "is_ignored": false, "lines": "    action = models.CharField(max_length=100, null=True, blank=True, choices=IMPORT_ACTIONS)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "action", "end": {"col": 11, "line": 1737, "offset": 82342}, "start": {"col": 5, "line": 1737, "offset": 82336}, "unique_id": {"md5sum": "b5a197b50066274d82ff750a04f1311f", "type": "AST"}}, "$M": {"abstract_content": "Test_Import_Finding_Action", "end": {"col": 33, "line": 1734, "offset": 82086}, "start": {"col": 7, "line": 1734, "offset": 82060}, "unique_id": {"md5sum": "5d827a1bdfba2e41dd670b1063d01bc9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1737, "offset": 82336}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 117, "line": 1775, "offset": 84206}, "extra": {"fingerprint": "2f2cb06a1aefad599baaf50b26fd6d02", "is_ignored": false, "lines": "    cve = models.CharField(validators=[cve_regex],\n                           max_length=28,\n                           null=True,\n                           blank=False,\n                           verbose_name=_('CVE'),\n                           help_text=_('The Common Vulnerabilities and Exposures (CVE) associated with this flaw.'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "cve", "end": {"col": 8, "line": 1770, "offset": 83876}, "start": {"col": 5, "line": 1770, "offset": 83873}, "unique_id": {"md5sum": "36218ffc4994d489c9dc2c7be4d34060", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1770, "offset": 83873}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 134, "line": 1781, "offset": 84722}, "extra": {"fingerprint": "40489f9af5eacef71b289b6e2f98f85f", "is_ignored": false, "lines": "    cvssv3 = models.TextField(validators=[cvssv3_regex],\n                              max_length=117,\n                              null=True,\n                              verbose_name=_('CVSS v3'),\n                              help_text=_('Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "cvssv3", "end": {"col": 11, "line": 1777, "offset": 84398}, "start": {"col": 5, "line": 1777, "offset": 84392}, "unique_id": {"md5sum": "c523b05377893bfda387d0b97e6ea2b7", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1777, "offset": 84392}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 110, "line": 1791, "offset": 85347}, "extra": {"fingerprint": "b7d35ee0ab441e7f7a404c880402cbad", "is_ignored": false, "lines": "    url = models.TextField(null=True,\n                           blank=True,\n                           editable=False,\n                           verbose_name=_('URL'),\n                           help_text=_(\"External reference that provides more information about this flaw.\"))  # not displayed and pretty much the same as references. To remove?", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "url", "end": {"col": 8, "line": 1787, "offset": 85075}, "start": {"col": 5, "line": 1787, "offset": 85072}, "unique_id": {"md5sum": "cd812966d57448c98058fb01d1391aef", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1787, "offset": 85072}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 90, "line": 1800, "offset": 86056}, "extra": {"fingerprint": "8ed8fa893c1ed4a0bdd07a72d81b0d22", "is_ignored": false, "lines": "    mitigation = models.TextField(verbose_name=_('Mitigation'),\n                                null=True,\n                                blank=True,\n                                help_text=_(\"Text describing how to best fix the flaw.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "mitigation", "end": {"col": 15, "line": 1797, "offset": 85830}, "start": {"col": 5, "line": 1797, "offset": 85820}, "unique_id": {"md5sum": "10dc1a244ab23d1fa7db2fea381d7fc1", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1797, "offset": 85820}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 128, "line": 1804, "offset": 86327}, "extra": {"fingerprint": "c0f3c2dee782084c514e210229c1bc3c", "is_ignored": false, "lines": "    impact = models.TextField(verbose_name=_('Impact'),\n                                null=True,\n                                blank=True,\n                                help_text=_(\"Text describing the impact this flaw has on systems, products, enterprise, etc.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "impact", "end": {"col": 11, "line": 1801, "offset": 86067}, "start": {"col": 5, "line": 1801, "offset": 86061}, "unique_id": {"md5sum": "a8e48a719fb06f38848785a3366c0093", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1801, "offset": 86061}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 144, "line": 1808, "offset": 86658}, "extra": {"fingerprint": "650af7f6e76060fcce2ae6e4c8777495", "is_ignored": false, "lines": "    steps_to_reproduce = models.TextField(null=True,\n                                          blank=True,\n                                          verbose_name=_('Steps to Reproduce'),\n                                          help_text=_(\"Text describing the steps that must be followed in order to reproduce the flaw / bug.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "steps_to_reproduce", "end": {"col": 23, "line": 1805, "offset": 86350}, "start": {"col": 5, "line": 1805, "offset": 86332}, "unique_id": {"md5sum": "75f6d39b8bad51fe2d146de1930a7650", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1805, "offset": 86332}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 132, "line": 1812, "offset": 86993}, "extra": {"fingerprint": "9a6162bd5f21af7074c6ee35eddb8711", "is_ignored": false, "lines": "    severity_justification = models.TextField(null=True,\n                                              blank=True,\n                                              verbose_name=_('Severity Justification'),\n                                              help_text=_(\"Text describing why a certain severity was associated with this flaw.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "severity_justification", "end": {"col": 27, "line": 1809, "offset": 86685}, "start": {"col": 5, "line": 1809, "offset": 86663}, "unique_id": {"md5sum": "b974cb98ae3c86ad4f549575d0dff993", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1809, "offset": 86663}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 102, "line": 1826, "offset": 88017}, "extra": {"fingerprint": "6d6b68d45d45e952cb800d5922dbfbc7", "is_ignored": false, "lines": "    references = models.TextField(null=True,\n                                  blank=True,\n                                  db_column=\"refs\",\n                                  verbose_name=_('References'),\n                                  help_text=_(\"The external documentation available for this flaw.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "references", "end": {"col": 15, "line": 1822, "offset": 87723}, "start": {"col": 5, "line": 1822, "offset": 87713}, "unique_id": {"md5sum": "2a2b3e2607f9ec9c520bbc470dcf084f", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1822, "offset": 87713}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 89, "line": 1946, "offset": 96159}, "extra": {"fingerprint": "56f1828bdb3832628c992d8b3e8f2204", "is_ignored": false, "lines": "    param = models.TextField(null=True,\n                             blank=True,\n                             editable=False,\n                             verbose_name=_('Parameter'),\n                             help_text=_('Parameter used to trigger the issue (DAST).'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "param", "end": {"col": 10, "line": 1942, "offset": 95896}, "start": {"col": 5, "line": 1942, "offset": 95891}, "unique_id": {"md5sum": "b7293437940453b99184f6b070b69f73", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1942, "offset": 95891}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 127, "line": 1951, "offset": 96476}, "extra": {"fingerprint": "96edadd3fa1a1ff1a70aad17095ffb55", "is_ignored": false, "lines": "    payload = models.TextField(null=True,\n                               blank=True,\n                               editable=False,\n                               verbose_name=_('Payload'),\n                               help_text=_(\"Payload used to attack the service / application and trigger the bug / problem.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "payload", "end": {"col": 12, "line": 1947, "offset": 96171}, "start": {"col": 5, "line": 1947, "offset": 96164}, "unique_id": {"md5sum": "a93ad37570e073e20ab67a0bfd4b6f21", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1947, "offset": 96164}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 131, "line": 1957, "offset": 96855}, "extra": {"fingerprint": "2926aac650c077ed7b81e4b4c0d1a31e", "is_ignored": false, "lines": "    hash_code = models.CharField(null=True,\n                                 blank=True,\n                                 editable=False,\n                                 max_length=64,\n                                 verbose_name=_('Hash Code'),\n                                 help_text=_(\"A hash over a configurable set of fields that is used for findings deduplication.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "hash_code", "end": {"col": 14, "line": 1952, "offset": 96490}, "start": {"col": 5, "line": 1952, "offset": 96481}, "unique_id": {"md5sum": "b1842aec0843a45fef38b7b0f916d943", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1952, "offset": 96481}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 89, "line": 1966, "offset": 97380}, "extra": {"fingerprint": "09a862821f747b4f6fd71625bf2ca09f", "is_ignored": false, "lines": "    file_path = models.CharField(null=True,\n                                 blank=True,\n                                 max_length=4000,\n                                 verbose_name=_('File path'),\n                                 help_text=_('Identified file(s) containing the flaw.'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "file_path", "end": {"col": 14, "line": 1962, "offset": 97104}, "start": {"col": 5, "line": 1962, "offset": 97095}, "unique_id": {"md5sum": "40d5334d3016dd7ffa34ac4a86f5afc0", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1962, "offset": 97095}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 124, "line": 1971, "offset": 97729}, "extra": {"fingerprint": "bf6adcfe8f7e43427b90f54a53370ba5", "is_ignored": false, "lines": "    component_name = models.CharField(null=True,\n                                      blank=True,\n                                      max_length=200,\n                                      verbose_name=_('Component name'),\n                                      help_text=_('Name of the affected component (library name, part of a system, ...).'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "component_name", "end": {"col": 19, "line": 1967, "offset": 97399}, "start": {"col": 5, "line": 1967, "offset": 97385}, "unique_id": {"md5sum": "26390ceb4cdf52c47639f1f87acecb45", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1967, "offset": 97385}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 92, "line": 1976, "offset": 98061}, "extra": {"fingerprint": "4553e27b5e8ffa5585843b7725aad051", "is_ignored": false, "lines": "    component_version = models.CharField(null=True,\n                                         blank=True,\n                                         max_length=100,\n                                         verbose_name=_('Component version'),\n                                         help_text=_(\"Version of the affected component.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "component_version", "end": {"col": 22, "line": 1972, "offset": 97751}, "start": {"col": 5, "line": 1972, "offset": 97734}, "unique_id": {"md5sum": "2e259e399605293a739a8a817bd1b24c", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 1972, "offset": 97734}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 148, "line": 2007, "offset": 100401}, "extra": {"fingerprint": "e6ba77123bcf9a8a4f5045c252fa2743", "is_ignored": false, "lines": "    unique_id_from_tool = models.CharField(null=True,\n                                           blank=True,\n                                           max_length=500,\n                                           verbose_name=_('Unique ID from tool'),\n                                           help_text=_(\"Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "unique_id_from_tool", "end": {"col": 24, "line": 2003, "offset": 100027}, "start": {"col": 5, "line": 2003, "offset": 100008}, "unique_id": {"md5sum": "3666f78b7911667aa812c6ab2c64875e", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2003, "offset": 100008}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 142, "line": 2012, "offset": 100792}, "extra": {"fingerprint": "cd6cf30b864a51ced27ac1b778cc8f34", "is_ignored": false, "lines": "    vuln_id_from_tool = models.CharField(null=True,\n                                         blank=True,\n                                         max_length=500,\n                                         verbose_name=_('Vulnerability ID from tool'),\n                                         help_text=_('Non-unique technical id from the source tool associated with the vulnerability type.'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "vuln_id_from_tool", "end": {"col": 22, "line": 2008, "offset": 100423}, "start": {"col": 5, "line": 2008, "offset": 100406}, "unique_id": {"md5sum": "fecdabeeb34e5d112fafba5895e8fd12", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2008, "offset": 100406}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 118, "line": 2017, "offset": 101155}, "extra": {"fingerprint": "2dbf1270bf364579adb7cb6571e35c8e", "is_ignored": false, "lines": "    sast_source_object = models.CharField(null=True,\n                                          blank=True,\n                                          max_length=500,\n                                          verbose_name=_('SAST Source Object'),\n                                          help_text=_('Source object (variable, function...) of the attack vector.'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "sast_source_object", "end": {"col": 23, "line": 2013, "offset": 100815}, "start": {"col": 5, "line": 2013, "offset": 100797}, "unique_id": {"md5sum": "28ebe2ac031a3e5551e31ca09e75ec52", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2013, "offset": 100797}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 114, "line": 2022, "offset": 101504}, "extra": {"fingerprint": "c8bb76c74d05401fbed204f44646c4e5", "is_ignored": false, "lines": "    sast_sink_object = models.CharField(null=True,\n                                        blank=True,\n                                        max_length=500,\n                                        verbose_name=_('SAST Sink Object'),\n                                        help_text=_('Sink object (variable, function...) of the attack vector.'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "sast_sink_object", "end": {"col": 21, "line": 2018, "offset": 101176}, "start": {"col": 5, "line": 2018, "offset": 101160}, "unique_id": {"md5sum": "a82a98fedcfd4b078b43cac93338e542", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2018, "offset": 101160}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 100, "line": 2031, "offset": 102160}, "extra": {"fingerprint": "1cd4a647420a8a4fc2a310e06eb48e6d", "is_ignored": false, "lines": "    sast_source_file_path = models.CharField(null=True,\n                                             blank=True,\n                                             max_length=4000,\n                                             verbose_name=_('SAST Source File Path'),\n                                             help_text=_(\"Source file path of the attack vector.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "sast_source_file_path", "end": {"col": 26, "line": 2027, "offset": 101825}, "start": {"col": 5, "line": 2027, "offset": 101804}, "unique_id": {"md5sum": "6b63be0444ad6fc5aa799d7927feafc5", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2027, "offset": 101804}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 197, "line": 2048, "offset": 103441}, "extra": {"fingerprint": "d1381d7f811a474c554ad7eba4edddc7", "is_ignored": false, "lines": "    service = models.CharField(null=True,\n                               blank=True,\n                               max_length=200,\n                               verbose_name=_('Service'),\n                               help_text=_('A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "service", "end": {"col": 12, "line": 2044, "offset": 103066}, "start": {"col": 5, "line": 2044, "offset": 103059}, "unique_id": {"md5sum": "96d4e6c3a4fcfe8762c4fc9a1e78ae91", "type": "AST"}}, "$M": {"abstract_content": "Finding", "end": {"col": 14, "line": 1750, "offset": 82750}, "start": {"col": 7, "line": 1750, "offset": 82743}, "unique_id": {"md5sum": "6089b05abdb79a76081e1e8a73a6faf9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2044, "offset": 103059}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 71, "line": 2617, "offset": 127184}, "extra": {"fingerprint": "0b5b8d8d25b961fe65436f97ef7a0f95", "is_ignored": false, "lines": "    severity = models.CharField(max_length=200, blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "severity", "end": {"col": 13, "line": 2617, "offset": 127126}, "start": {"col": 5, "line": 2617, "offset": 127118}, "unique_id": {"md5sum": "03b07d3d771b37ecf614a389b7a879d5", "type": "AST"}}, "$M": {"abstract_content": "Stub_Finding", "end": {"col": 19, "line": 2614, "offset": 126948}, "start": {"col": 7, "line": 2614, "offset": 126936}, "unique_id": {"md5sum": "7f77f58eb660c5c6e0bebdd8ff74782e", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2617, "offset": 127118}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 58, "line": 2618, "offset": 127242}, "extra": {"fingerprint": "3ad89fa254fc23c77e614c57f76b83ce", "is_ignored": false, "lines": "    description = models.TextField(blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 2618, "offset": 127200}, "start": {"col": 5, "line": 2618, "offset": 127189}, "unique_id": {"md5sum": "03a167cf03cde7ae3073509e9ff4d303", "type": "AST"}}, "$M": {"abstract_content": "Stub_Finding", "end": {"col": 19, "line": 2614, "offset": 126948}, "start": {"col": 7, "line": 2614, "offset": 126936}, "unique_id": {"md5sum": "7f77f58eb660c5c6e0bebdd8ff74782e", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2618, "offset": 127189}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 90, "line": 2725, "offset": 131021}, "extra": {"fingerprint": "a33745740bec8aa8a4d41f8ac8acd202", "is_ignored": false, "lines": "    cve = models.CharField(validators=[cve_regex], max_length=28, null=True, blank=False)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "cve", "end": {"col": 8, "line": 2725, "offset": 130939}, "start": {"col": 5, "line": 2725, "offset": 130936}, "unique_id": {"md5sum": "316b30239c3f6e48be4250d5a11b7275", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2725, "offset": 130936}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 84, "line": 2727, "offset": 131286}, "extra": {"fingerprint": "44e99d09f6c8dd5c8b4d9bd6e2954d93", "is_ignored": false, "lines": "    cvssv3 = models.TextField(validators=[cvssv3_regex], max_length=117, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "cvssv3", "end": {"col": 11, "line": 2727, "offset": 131213}, "start": {"col": 5, "line": 2727, "offset": 131207}, "unique_id": {"md5sum": "6adba72c06e69be695fba782d14cef95", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2727, "offset": 131207}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 71, "line": 2728, "offset": 131357}, "extra": {"fingerprint": "2a930e05dee9eea57abb696fa1e382a1", "is_ignored": false, "lines": "    severity = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "severity", "end": {"col": 13, "line": 2728, "offset": 131299}, "start": {"col": 5, "line": 2728, "offset": 131291}, "unique_id": {"md5sum": "88f39e9cc4d90f129af908448933e160", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2728, "offset": 131291}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 58, "line": 2729, "offset": 131415}, "extra": {"fingerprint": "dda23f29b00141b14b5ad2b62b23eba1", "is_ignored": false, "lines": "    description = models.TextField(null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 2729, "offset": 131373}, "start": {"col": 5, "line": 2729, "offset": 131362}, "unique_id": {"md5sum": "1a2e8e117fea70c178411003f7159880", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2729, "offset": 131362}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 57, "line": 2730, "offset": 131472}, "extra": {"fingerprint": "355ec0489233d6512c01929eff73ffc5", "is_ignored": false, "lines": "    mitigation = models.TextField(null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "mitigation", "end": {"col": 15, "line": 2730, "offset": 131430}, "start": {"col": 5, "line": 2730, "offset": 131420}, "unique_id": {"md5sum": "d7fb0e2bf3679062cdbf956423f4217b", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2730, "offset": 131420}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 53, "line": 2731, "offset": 131525}, "extra": {"fingerprint": "79f9281e4a9dea461a94b0dcbfeadbfa", "is_ignored": false, "lines": "    impact = models.TextField(null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "impact", "end": {"col": 11, "line": 2731, "offset": 131483}, "start": {"col": 5, "line": 2731, "offset": 131477}, "unique_id": {"md5sum": "36fdc62b21b20447d88ae5c6786e4434", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2731, "offset": 131477}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 2732, "offset": 131600}, "extra": {"fingerprint": "f4f9fd589d6adf1b913ccd1c69c5827c", "is_ignored": false, "lines": "    references = models.TextField(null=True, blank=True, db_column=\"refs\")", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "references", "end": {"col": 15, "line": 2732, "offset": 131540}, "start": {"col": 5, "line": 2732, "offset": 131530}, "unique_id": {"md5sum": "df039afdd24216fc3a226c8076166bb9", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2732, "offset": 131530}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 95, "line": 2734, "offset": 131759}, "extra": {"fingerprint": "f1e6196a252fed165aaf302e7a33b077", "is_ignored": false, "lines": "    numerical_severity = models.CharField(max_length=4, null=True, blank=True, editable=False)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "numerical_severity", "end": {"col": 23, "line": 2734, "offset": 131687}, "start": {"col": 5, "line": 2734, "offset": 131669}, "unique_id": {"md5sum": "888601a58eb015c910f25c00eb131686", "type": "AST"}}, "$M": {"abstract_content": "Finding_Template", "end": {"col": 23, "line": 2720, "offset": 130634}, "start": {"col": 7, "line": 2720, "offset": 130618}, "unique_id": {"md5sum": "7bf7bbb801ca6ec18a0924664d1d8813", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2734, "offset": 131669}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 144, "line": 2850, "offset": 137435}, "extra": {"fingerprint": "b5e88a5e13ae56fb607e4d4d723f1607", "is_ignored": false, "lines": "    recommendation_details = models.TextField(null=True,\n                                      blank=True,\n                                      help_text=_(\"Explanation of security recommendation\"), verbose_name=_('Security Recommendation Details'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "recommendation_details", "end": {"col": 27, "line": 2848, "offset": 137211}, "start": {"col": 5, "line": 2848, "offset": 137189}, "unique_id": {"md5sum": "f0a6b236ff353575f4dfb5c1be94c606", "type": "AST"}}, "$M": {"abstract_content": "Risk_Acceptance", "end": {"col": 22, "line": 2827, "offset": 136104}, "start": {"col": 7, "line": 2827, "offset": 136089}, "unique_id": {"md5sum": "ada02aa9b6a3aa17dbb52e1296dc98ec", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2848, "offset": 137189}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 205, "line": 2853, "offset": 137806}, "extra": {"fingerprint": "ff46716b484dcbcf7004e854e072e7a5", "is_ignored": false, "lines": "    decision_details = models.TextField(default=None, blank=True, null=True, help_text=_('If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "decision_details", "end": {"col": 21, "line": 2853, "offset": 137622}, "start": {"col": 5, "line": 2853, "offset": 137606}, "unique_id": {"md5sum": "74169da601fd98348b55f8beb069d3d0", "type": "AST"}}, "$M": {"abstract_content": "Risk_Acceptance", "end": {"col": 22, "line": 2827, "offset": 136104}, "start": {"col": 7, "line": 2827, "offset": 136089}, "unique_id": {"md5sum": "ada02aa9b6a3aa17dbb52e1296dc98ec", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2853, "offset": 137606}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 199, "line": 2855, "offset": 138006}, "extra": {"fingerprint": "ea18ddfe69d21ee93e9fc2ef0c0c97c3", "is_ignored": false, "lines": "    accepted_by = models.CharField(max_length=200, default=None, null=True, blank=True, verbose_name=_('Accepted By'), help_text=_(\"The person that accepts the risk, can be outside of DefectDojo.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "accepted_by", "end": {"col": 16, "line": 2855, "offset": 137823}, "start": {"col": 5, "line": 2855, "offset": 137812}, "unique_id": {"md5sum": "23201765d73597e526db23fba17d6cbd", "type": "AST"}}, "$M": {"abstract_content": "Risk_Acceptance", "end": {"col": 22, "line": 2827, "offset": 136104}, "start": {"col": 7, "line": 2827, "offset": 136089}, "unique_id": {"md5sum": "ada02aa9b6a3aa17dbb52e1296dc98ec", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2855, "offset": 137812}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 250, "line": 2997, "offset": 145478}, "extra": {"fingerprint": "d4ea4f9d69d9f287056ca5c3befad5db", "is_ignored": false, "lines": "    issue_template_dir = models.CharField(max_length=255,\n                                      null=True,\n                                      blank=True,\n                                      help_text=_(\"Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "issue_template_dir", "end": {"col": 23, "line": 2994, "offset": 145094}, "start": {"col": 5, "line": 2994, "offset": 145076}, "unique_id": {"md5sum": "fa419e7d11e37f90168b05ff8a806f96", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Instance", "end": {"col": 20, "line": 2973, "offset": 143782}, "start": {"col": 7, "line": 2973, "offset": 143769}, "unique_id": {"md5sum": "3e58f54511ed22c3f2dacbdaed8a1673", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 2994, "offset": 145076}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 224, "line": 3006, "offset": 147157}, "extra": {"fingerprint": "fabb92aded81be5c93f5c9139695bc85", "is_ignored": false, "lines": "    finding_text = models.TextField(null=True, blank=True, help_text=_(\"Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "finding_text", "end": {"col": 17, "line": 3006, "offset": 146950}, "start": {"col": 5, "line": 3006, "offset": 146938}, "unique_id": {"md5sum": "c1a23a3f67c74b03d7e028de48b7139d", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Instance", "end": {"col": 20, "line": 2973, "offset": 143782}, "start": {"col": 7, "line": 2973, "offset": 143769}, "unique_id": {"md5sum": "3e58f54511ed22c3f2dacbdaed8a1673", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3006, "offset": 146938}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 186, "line": 3007, "offset": 147343}, "extra": {"fingerprint": "5daea626d16270de92b12753dc8c5b55", "is_ignored": false, "lines": "    accepted_mapping_resolution = models.CharField(null=True, blank=True, max_length=300, help_text=_('JIRA resolution names (comma-separated values) that maps to an Accepted Finding'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "accepted_mapping_resolution", "end": {"col": 32, "line": 3007, "offset": 147189}, "start": {"col": 5, "line": 3007, "offset": 147162}, "unique_id": {"md5sum": "dc597d068c95e7a3105874b5a7bc0198", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Instance", "end": {"col": 20, "line": 2973, "offset": 143782}, "start": {"col": 7, "line": 2973, "offset": 143769}, "unique_id": {"md5sum": "3e58f54511ed22c3f2dacbdaed8a1673", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3007, "offset": 147162}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 197, "line": 3008, "offset": 147540}, "extra": {"fingerprint": "310cce40350f004fcf673c13cb3adf90", "is_ignored": false, "lines": "    false_positive_mapping_resolution = models.CharField(null=True, blank=True, max_length=300, help_text=_('JIRA resolution names (comma-separated values) that maps to a False Positive Finding'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "false_positive_mapping_resolution", "end": {"col": 38, "line": 3008, "offset": 147381}, "start": {"col": 5, "line": 3008, "offset": 147348}, "unique_id": {"md5sum": "1635d315d2b507f29852971a761d7629", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Instance", "end": {"col": 20, "line": 2973, "offset": 143782}, "start": {"col": 7, "line": 2973, "offset": 143769}, "unique_id": {"md5sum": "3e58f54511ed22c3f2dacbdaed8a1673", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3008, "offset": 147348}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 250, "line": 3071, "offset": 150279}, "extra": {"fingerprint": "9c8060ee84143e3fbccecde8046692f0", "is_ignored": false, "lines": "    issue_template_dir = models.CharField(max_length=255,\n                                      null=True,\n                                      blank=True,\n                                      help_text=_(\"Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "issue_template_dir", "end": {"col": 23, "line": 3068, "offset": 149895}, "start": {"col": 5, "line": 3068, "offset": 149877}, "unique_id": {"md5sum": "e45f6536cd62625548cbc069be78ca32", "type": "AST"}}, "$M": {"abstract_content": "JIRA_Project", "end": {"col": 19, "line": 3063, "offset": 149552}, "start": {"col": 7, "line": 3063, "offset": 149540}, "unique_id": {"md5sum": "88c03db9a9d3fa88365f4755acaf5173", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3068, "offset": 149877}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 3231, "offset": 159854}, "extra": {"fingerprint": "971ac6b3be77d72d602ba579b2fb7976", "is_ignored": false, "lines": "    description = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 3231, "offset": 159795}, "start": {"col": 5, "line": 3231, "offset": 159784}, "unique_id": {"md5sum": "294e2350a6c1fc3327cd3abb321ad06f", "type": "AST"}}, "$M": {"abstract_content": "Tool_Product_Settings", "end": {"col": 28, "line": 3229, "offset": 159708}, "start": {"col": 7, "line": 3229, "offset": 159687}, "unique_id": {"md5sum": "d5f8a347927834acddc9c82d3ef462cb", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3231, "offset": 159784}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 67, "line": 3232, "offset": 159921}, "extra": {"fingerprint": "fc1e67f83d4e5f3f6bef5739a8c21c64", "is_ignored": false, "lines": "    url = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "url", "end": {"col": 8, "line": 3232, "offset": 159862}, "start": {"col": 5, "line": 3232, "offset": 159859}, "unique_id": {"md5sum": "b44260f08a9c055c16955ba098550ec6", "type": "AST"}}, "$M": {"abstract_content": "Tool_Product_Settings", "end": {"col": 28, "line": 3229, "offset": 159708}, "start": {"col": 7, "line": 3229, "offset": 159687}, "unique_id": {"md5sum": "d5f8a347927834acddc9c82d3ef462cb", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3232, "offset": 159859}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 78, "line": 3236, "offset": 160272}, "extra": {"fingerprint": "7a798483289d4f1f74bd0ea252430c8b", "is_ignored": false, "lines": "    tool_project_id = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "tool_project_id", "end": {"col": 20, "line": 3236, "offset": 160214}, "start": {"col": 5, "line": 3236, "offset": 160199}, "unique_id": {"md5sum": "97e48c6b7d6f1e8833cbead07ef90629", "type": "AST"}}, "$M": {"abstract_content": "Tool_Product_Settings", "end": {"col": 28, "line": 3229, "offset": 159708}, "start": {"col": 7, "line": 3229, "offset": 159687}, "unique_id": {"md5sum": "d5f8a347927834acddc9c82d3ef462cb", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3236, "offset": 160199}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 57, "line": 3248, "offset": 160818}, "extra": {"fingerprint": "79030583994892db2419abfa36ebc199", "is_ignored": false, "lines": "    configuration_details = models.CharField(max_length=2000, null=True,\n                                             blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "configuration_details", "end": {"col": 26, "line": 3247, "offset": 160714}, "start": {"col": 5, "line": 3247, "offset": 160693}, "unique_id": {"md5sum": "a8226f0d50d648b3320c0b5f8725c30b", "type": "AST"}}, "$M": {"abstract_content": "Tool_Product_History", "end": {"col": 27, "line": 3243, "offset": 160416}, "start": {"col": 7, "line": 3243, "offset": 160396}, "unique_id": {"md5sum": "a1fe76a320ddebed5e1a4d205ba1cc3f", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3247, "offset": 160693}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 3253, "offset": 160992}, "extra": {"fingerprint": "df9797be9db3149a3000ad57c67568a7", "is_ignored": false, "lines": "    description = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 3253, "offset": 160933}, "start": {"col": 5, "line": 3253, "offset": 160922}, "unique_id": {"md5sum": "253a8fa93c6b0b1e4d21dcf3eda63bbc", "type": "AST"}}, "$M": {"abstract_content": "Alerts", "end": {"col": 13, "line": 3251, "offset": 160833}, "start": {"col": 7, "line": 3251, "offset": 160827}, "unique_id": {"md5sum": "41f418bac991314aed77f33397155d10", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3253, "offset": 160922}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 66, "line": 3278, "offset": 162287}, "extra": {"fingerprint": "9c481f254cd7b0f30e9f88dab30e588c", "is_ignored": false, "lines": "    http_authentication = models.CharField(max_length=15,\n                                           choices=(\n                                               ('Basic', 'Basic'),\n                                               ('NTLM', 'NTLM')),\n                                           null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "http_authentication", "end": {"col": 24, "line": 3274, "offset": 162001}, "start": {"col": 5, "line": 3274, "offset": 161982}, "unique_id": {"md5sum": "81fbacbdbc698fd64bb1eef7286c50a8", "type": "AST"}}, "$M": {"abstract_content": "Cred_User", "end": {"col": 16, "line": 3264, "offset": 161432}, "start": {"col": 7, "line": 3264, "offset": 161423}, "unique_id": {"md5sum": "ca1ed09f47c82cd9de1a449a9558e229", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3274, "offset": 161982}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 3279, "offset": 162362}, "extra": {"fingerprint": "ee641e97aa5d4101e624f09582e6b01b", "is_ignored": false, "lines": "    description = models.CharField(max_length=2000, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "description", "end": {"col": 16, "line": 3279, "offset": 162303}, "start": {"col": 5, "line": 3279, "offset": 162292}, "unique_id": {"md5sum": "5580c013aab7854218ed7f325fd4c165", "type": "AST"}}, "$M": {"abstract_content": "Cred_User", "end": {"col": 16, "line": 3264, "offset": 161432}, "start": {"col": 7, "line": 3264, "offset": 161423}, "unique_id": {"md5sum": "ca1ed09f47c82cd9de1a449a9558e229", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3279, "offset": 162292}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 74, "line": 3282, "offset": 162591}, "extra": {"fingerprint": "4383cc4b36be0bc93d15b971474f844c", "is_ignored": false, "lines": "    login_regex = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "login_regex", "end": {"col": 16, "line": 3282, "offset": 162533}, "start": {"col": 5, "line": 3282, "offset": 162522}, "unique_id": {"md5sum": "b2780af715671409dadef8ddde81792f", "type": "AST"}}, "$M": {"abstract_content": "Cred_User", "end": {"col": 16, "line": 3264, "offset": 161432}, "start": {"col": 7, "line": 3264, "offset": 161423}, "unique_id": {"md5sum": "ca1ed09f47c82cd9de1a449a9558e229", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3282, "offset": 162522}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 75, "line": 3283, "offset": 162666}, "extra": {"fingerprint": "18ba05bdafc0b3380704e017f1f48431", "is_ignored": false, "lines": "    logout_regex = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "logout_regex", "end": {"col": 17, "line": 3283, "offset": 162608}, "start": {"col": 5, "line": 3283, "offset": 162596}, "unique_id": {"md5sum": "c663713a1b6dceca5da1c989a1969724", "type": "AST"}}, "$M": {"abstract_content": "Cred_User", "end": {"col": 16, "line": 3264, "offset": 161432}, "start": {"col": 7, "line": 3264, "offset": 161423}, "unique_id": {"md5sum": "ca1ed09f47c82cd9de1a449a9558e229", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3283, "offset": 162596}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 96, "line": 3315, "offset": 164225}, "extra": {"fingerprint": "b7e78be3142239a68bafbc7fd19f0dbc", "is_ignored": false, "lines": "    color = models.CharField(max_length=7, null=True, blank=True, verbose_name=_('HTML color'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "color", "end": {"col": 10, "line": 3315, "offset": 164139}, "start": {"col": 5, "line": 3315, "offset": 164134}, "unique_id": {"md5sum": "452d829ae70bb032388c4f0f97d00fb6", "type": "AST"}}, "$M": {"abstract_content": "Language_Type", "end": {"col": 20, "line": 3313, "offset": 164054}, "start": {"col": 7, "line": 3313, "offset": 164041}, "unique_id": {"md5sum": "9c0b8d73e3eb9ad934c4f1188dadcefb", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3315, "offset": 164134}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 104, "line": 3343, "offset": 165585}, "extra": {"fingerprint": "032e6b671d8e59028bafe427553094f6", "is_ignored": false, "lines": "    version = models.CharField(max_length=200, null=True, blank=True, verbose_name=_('Version Number'))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "version", "end": {"col": 12, "line": 3343, "offset": 165493}, "start": {"col": 5, "line": 3343, "offset": 165486}, "unique_id": {"md5sum": "d580d792d1aef101c8ce26435fc2c8d4", "type": "AST"}}, "$M": {"abstract_content": "App_Analysis", "end": {"col": 19, "line": 3338, "offset": 165165}, "start": {"col": 7, "line": 3338, "offset": 165153}, "unique_id": {"md5sum": "e91e0fd03722ba162286500787cb439c", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3343, "offset": 165486}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 67, "line": 3344, "offset": 165652}, "extra": {"fingerprint": "73f15ce1f2b40f90965e4c69d7b20bc4", "is_ignored": false, "lines": "    icon = models.CharField(max_length=200, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "icon", "end": {"col": 9, "line": 3344, "offset": 165594}, "start": {"col": 5, "line": 3344, "offset": 165590}, "unique_id": {"md5sum": "463b54eee4bb58ede16e101fbdfba2fd", "type": "AST"}}, "$M": {"abstract_content": "App_Analysis", "end": {"col": 19, "line": 3338, "offset": 165165}, "start": {"col": 7, "line": 3338, "offset": 165153}, "unique_id": {"md5sum": "e91e0fd03722ba162286500787cb439c", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3344, "offset": 165590}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 67, "line": 3356, "offset": 166109}, "extra": {"fingerprint": "473e893feb8a23b752625c1652a9db61", "is_ignored": false, "lines": "    name = models.CharField(max_length=100, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "name", "end": {"col": 9, "line": 3356, "offset": 166051}, "start": {"col": 5, "line": 3356, "offset": 166047}, "unique_id": {"md5sum": "0b7ac043d09faf6877ca4515304fb4c2", "type": "AST"}}, "$M": {"abstract_content": "Objects_Review", "end": {"col": 21, "line": 3355, "offset": 166027}, "start": {"col": 7, "line": 3355, "offset": 166013}, "unique_id": {"md5sum": "6e2e822a141004c76393a6bcd6e17f84", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3356, "offset": 166047}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 67, "line": 3365, "offset": 166407}, "extra": {"fingerprint": "8d32ad8ec062f2352671b0016cc5acb6", "is_ignored": false, "lines": "    name = models.CharField(max_length=100, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "name", "end": {"col": 9, "line": 3365, "offset": 166349}, "start": {"col": 5, "line": 3365, "offset": 166345}, "unique_id": {"md5sum": "51d32e9a57500ffa29490fd9e29fcafa", "type": "AST"}}, "$M": {"abstract_content": "Objects_Product", "end": {"col": 22, "line": 3363, "offset": 166258}, "start": {"col": 7, "line": 3363, "offset": 166243}, "unique_id": {"md5sum": "40084f9951d9105cd9fba11e40a15a5a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3365, "offset": 166345}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 51, "line": 3367, "offset": 166536}, "extra": {"fingerprint": "adc76a7c5c6626edee2c8cb20f95a8ea", "is_ignored": false, "lines": "    path = models.CharField(max_length=600, verbose_name=_('Full file path'),\n                            null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "path", "end": {"col": 9, "line": 3366, "offset": 166416}, "start": {"col": 5, "line": 3366, "offset": 166412}, "unique_id": {"md5sum": "ee5dffbc72fe83298af1c84961955017", "type": "AST"}}, "$M": {"abstract_content": "Objects_Product", "end": {"col": 22, "line": 3363, "offset": 166258}, "start": {"col": 7, "line": 3363, "offset": 166243}, "unique_id": {"md5sum": "40084f9951d9105cd9fba11e40a15a5a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3366, "offset": 166412}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 53, "line": 3369, "offset": 166661}, "extra": {"fingerprint": "d59f2bbcb6f2c13faa77f4609540979e", "is_ignored": false, "lines": "    folder = models.CharField(max_length=400, verbose_name=_('Folder'),\n                              null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "folder", "end": {"col": 11, "line": 3368, "offset": 166547}, "start": {"col": 5, "line": 3368, "offset": 166541}, "unique_id": {"md5sum": "6c7dfa0bee7b6ebf8626c38b0691c738", "type": "AST"}}, "$M": {"abstract_content": "Objects_Product", "end": {"col": 22, "line": 3363, "offset": 166258}, "start": {"col": 7, "line": 3363, "offset": 166243}, "unique_id": {"md5sum": "40084f9951d9105cd9fba11e40a15a5a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3368, "offset": 166541}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 55, "line": 3371, "offset": 166792}, "extra": {"fingerprint": "54926515056d43b3c16bbbd69041c75b", "is_ignored": false, "lines": "    artifact = models.CharField(max_length=400, verbose_name=_('Artifact'),\n                                null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "artifact", "end": {"col": 13, "line": 3370, "offset": 166674}, "start": {"col": 5, "line": 3370, "offset": 166666}, "unique_id": {"md5sum": "0d35a830d95fa19452b46917a9347ebc", "type": "AST"}}, "$M": {"abstract_content": "Objects_Product", "end": {"col": 22, "line": 3363, "offset": 166258}, "start": {"col": 7, "line": 3363, "offset": 166243}, "unique_id": {"md5sum": "40084f9951d9105cd9fba11e40a15a5a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3370, "offset": 166666}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 111, "line": 3403, "offset": 167962}, "extra": {"fingerprint": "2992393471b828e7e76fe2f59e71190a", "is_ignored": false, "lines": "    identifier = models.CharField(max_length=20, blank=True, null=True, help_text=_(\"Test Unique Identifier\"))", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "identifier", "end": {"col": 15, "line": 3403, "offset": 167866}, "start": {"col": 5, "line": 3403, "offset": 167856}, "unique_id": {"md5sum": "422df313e302f97f3dcc080f75b9eda2", "type": "AST"}}, "$M": {"abstract_content": "Testing_Guide", "end": {"col": 20, "line": 3401, "offset": 167739}, "start": {"col": 7, "line": 3401, "offset": 167726}, "unique_id": {"md5sum": "a2defd27795299fad4a50a952f2db598", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3403, "offset": 167856}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 62, "line": 3424, "offset": 169098}, "extra": {"fingerprint": "378c38043cb8e2a4d927d53e94b0e76a", "is_ignored": false, "lines": "    benchmark_source = models.CharField(max_length=20, blank=False,\n                                        null=True, choices=source,\n                                        default='OWASP ASVS')", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "benchmark_source", "end": {"col": 21, "line": 3422, "offset": 168922}, "start": {"col": 5, "line": 3422, "offset": 168906}, "unique_id": {"md5sum": "1f720001f20144bf9d2d3337e0c24786", "type": "AST"}}, "$M": {"abstract_content": "Benchmark_Type", "end": {"col": 21, "line": 3416, "offset": 168664}, "start": {"col": 7, "line": 3416, "offset": 168650}, "unique_id": {"md5sum": "0fcf585e59ecc1015c32070a70d8e34f", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3422, "offset": 168906}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 57, "line": 3437, "offset": 169639}, "extra": {"fingerprint": "c4071a12ec6eeb58bf7ddd7ae6399770", "is_ignored": false, "lines": "    references = models.TextField(blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "references", "end": {"col": 15, "line": 3437, "offset": 169597}, "start": {"col": 5, "line": 3437, "offset": 169587}, "unique_id": {"md5sum": "da46185cd1fb622a66d0eda3abbe8962", "type": "AST"}}, "$M": {"abstract_content": "Benchmark_Category", "end": {"col": 25, "line": 3433, "offset": 169383}, "start": {"col": 7, "line": 3433, "offset": 169365}, "unique_id": {"md5sum": "f1e0d094763a3f47208dbee9976f597a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3437, "offset": 169587}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 78, "line": 3451, "offset": 170148}, "extra": {"fingerprint": "6b53efaa3f6b94c0e0f8684bed1b2360", "is_ignored": false, "lines": "    objective_number = models.CharField(max_length=15, null=True, blank=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "objective_number", "end": {"col": 21, "line": 3451, "offset": 170091}, "start": {"col": 5, "line": 3451, "offset": 170075}, "unique_id": {"md5sum": "302e0da92d5277c3d9e19cce20f0dcf9", "type": "AST"}}, "$M": {"abstract_content": "Benchmark_Requirement", "end": {"col": 28, "line": 3449, "offset": 169976}, "start": {"col": 7, "line": 3449, "offset": 169955}, "unique_id": {"md5sum": "b97f28fd6bd8d8e54b6549815026ae08", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3451, "offset": 170075}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 57, "line": 3453, "offset": 170240}, "extra": {"fingerprint": "406cb469cbc6f532f49fc0f33d84154c", "is_ignored": false, "lines": "    references = models.TextField(blank=True, null=True)", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "references", "end": {"col": 15, "line": 3453, "offset": 170198}, "start": {"col": 5, "line": 3453, "offset": 170188}, "unique_id": {"md5sum": "a7f5b4a9f7c8ac5ce250f42bd11e8bc9", "type": "AST"}}, "$M": {"abstract_content": "Benchmark_Requirement", "end": {"col": 28, "line": 3449, "offset": 169976}, "start": {"col": 7, "line": 3449, "offset": 169955}, "unique_id": {"md5sum": "b97f28fd6bd8d8e54b6549815026ae08", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3453, "offset": 170188}}, {"check_id": "python.django.correctness.string-field-null-checks.no-null-string-field", "end": {"col": 53, "line": 3496, "offset": 172387}, "extra": {"fingerprint": "f3a6807a5001526cc53d53429e4e0198", "is_ignored": false, "lines": "    current_level = models.CharField(max_length=15, blank=True,\n                                     null=True, choices=asvs_level,\n                                     default='None')", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "metadata": {"category": "correctness", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/zvKd", "source": "https://semgrep.dev/r/python.django.correctness.string-field-null-checks.no-null-string-field", "technology": ["django"]}, "metavars": {"$F": {"abstract_content": "current_level", "end": {"col": 18, "line": 3494, "offset": 172220}, "start": {"col": 5, "line": 3494, "offset": 172207}, "unique_id": {"md5sum": "0a76341447521abfaa72531747a234aa", "type": "AST"}}, "$M": {"abstract_content": "Benchmark_Product_Summary", "end": {"col": 32, "line": 3485, "offset": 171732}, "start": {"col": 7, "line": 3485, "offset": 171707}, "unique_id": {"md5sum": "2e30e405a1324048c995ca4416d7913b", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/models.py", "start": {"col": 5, "line": 3494, "offset": 172207}}, {"check_id": "python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql", "end": {"col": 78, "line": 21, "offset": 1054}, "extra": {"fingerprint": "cc4c4dc32097c6f8cc0850cf04e08941", "is_ignored": false, "lines": "        return super().as_sql(compiler,\n                              connection,\n                              template='%(function)s(%(distinct)s%(expressions)s%(ordering)s%(separator)s)',\n                              separator=' SEPARATOR \\'%s\\'' % self.separator)", "message": "Detected a Custom Expression ''super()'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.", "metadata": {"category": "security", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "references": ["https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql", "https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/"], "shortlink": "https://sg.run/b7bW", "source": "https://semgrep.dev/r/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql", "technology": ["django"]}, "metavars": {"$EXPRESSION": {"abstract_content": "super()", "end": {"col": 23, "line": 18, "offset": 808}, "start": {"col": 16, "line": 18, "offset": 801}, "unique_id": {"md5sum": "65f905a9e2753704c616c4a02abaeb6e", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/components/sql_group_concat.py", "start": {"col": 16, "line": 18, "offset": 801}}, {"check_id": "python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql", "end": {"col": 39, "line": 27, "offset": 1325}, "extra": {"fingerprint": "4acc1373877dd1d3270c24c7f0d5955d", "is_ignored": false, "lines": "        return super().as_sql(compiler,\n                              connection,\n                              template='%(function)s(%(distinct)s%(expressions)s%(ordering)s)',\n                              **extra)", "message": "Detected a Custom Expression ''super()'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.", "metadata": {"category": "security", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "references": ["https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql", "https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/"], "shortlink": "https://sg.run/b7bW", "source": "https://semgrep.dev/r/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql", "technology": ["django"]}, "metavars": {"$EXPRESSION": {"abstract_content": "super()", "end": {"col": 23, "line": 24, "offset": 1131}, "start": {"col": 16, "line": 24, "offset": 1124}, "unique_id": {"md5sum": "bec793e415c8de245f413cbef43e4596", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/components/sql_group_concat.py", "start": {"col": 16, "line": 24, "offset": 1124}}, {"check_id": "python.django.security.audit.secure-cookies.django-secure-set-cookie", "end": {"col": 67, "line": 346, "offset": 15735}, "extra": {"fingerprint": "de1306f3658650d8cb7783ea3c25e191", "is_ignored": false, "lines": "        response.set_cookie(\"highlight\", value=keywords_query,\n                            max_age=None, expires=None,\n                            path='/', secure=True, httponly=False)", "message": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False.  If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.", "metadata": {"asvs": {"control_id": "3.4 Missing Cookie Attributes", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management", "section": "V3: Session Management Verification Requirements", "version": "4"}, "category": "security", "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie", "https://blog.r2c.dev/2020/bento-check-keeping-cookies-safe-in-flask/", "https://bento.dev/checks/flask/secure-set-cookie/"], "shortlink": "https://sg.run/x1WL", "source": "https://semgrep.dev/r/python.django.security.audit.secure-cookies.django-secure-set-cookie", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/search/views.py", "start": {"col": 9, "line": 344, "offset": 15558}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 55, "line": 23, "offset": 933}, "extra": {"fingerprint": "659db4ac986e0cb8924215e453539b2b", "is_ignored": false, "lines": "                            {{ field.help_text|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 55, "line": 23, "offset": 933}, "start": {"col": 52, "line": 23, "offset": 930}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/defectDojo-engagement-survey/survey_fields.html", "start": {"col": 29, "line": 23, "offset": 907}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 47, "line": 48, "offset": 1921}, "extra": {"fingerprint": "91dc4021623348086898238e7a8b169f", "is_ignored": false, "lines": "                    {{ field.help_text|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 47, "line": 48, "offset": 1921}, "start": {"col": 44, "line": 48, "offset": 1918}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/defectDojo-engagement-survey/survey_fields.html", "start": {"col": 21, "line": 48, "offset": 1895}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 47, "line": 72, "offset": 2942}, "extra": {"fingerprint": "9172d21e2245f3a517ee236bf26eac02", "is_ignored": false, "lines": "                    {{ field.help_text|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 47, "line": 72, "offset": 2942}, "start": {"col": 44, "line": 72, "offset": 2939}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/defectDojo-engagement-survey/survey_fields.html", "start": {"col": 21, "line": 72, "offset": 2916}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 51, "line": 89, "offset": 3733}, "extra": {"fingerprint": "d0b2ea6fca157cf080f375511a5f551c", "is_ignored": false, "lines": "                        {{ field.help_text|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 51, "line": 89, "offset": 3733}, "start": {"col": 48, "line": 89, "offset": 3730}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/defectDojo-engagement-survey/survey_fields.html", "start": {"col": 25, "line": 89, "offset": 3707}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 55, "line": 59, "offset": 3768}, "extra": {"fingerprint": "3a43845bf30ee06bb9589d2421fad36e", "is_ignored": false, "lines": "                            {{ field.help_text|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 55, "line": 59, "offset": 3768}, "start": {"col": 52, "line": 59, "offset": 3765}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/apply_finding_template_form_fields.html", "start": {"col": 29, "line": 59, "offset": 3742}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 51, "line": 85, "offset": 4868}, "extra": {"fingerprint": "19bb29e83e2c7059855d37c228b8c723", "is_ignored": false, "lines": "                        {{ field.help_text|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 51, "line": 85, "offset": 4868}, "start": {"col": 48, "line": 85, "offset": 4865}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/apply_finding_template_form_fields.html", "start": {"col": 25, "line": 85, "offset": 4842}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 51, "line": 105, "offset": 5774}, "extra": {"fingerprint": "47c467f53e4fd53f75cd2a2022f40553", "is_ignored": false, "lines": "                        {{ field.help_text|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 51, "line": 105, "offset": 5774}, "start": {"col": 48, "line": 105, "offset": 5771}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/apply_finding_template_form_fields.html", "start": {"col": 25, "line": 105, "offset": 5748}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 19, "line": 3, "offset": 42}, "extra": {"fingerprint": "a63f421a68b2b78666a8e0d0330a52c5", "is_ignored": false, "lines": "{{ content|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 19, "line": 3, "offset": 42}, "start": {"col": 16, "line": 3, "offset": 39}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/custom_asciidoc_report_wysiwyg_content.html", "start": {"col": 1, "line": 3, "offset": 24}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 23, "line": 5, "offset": 92}, "extra": {"fingerprint": "93214a899d6dfd2d0dc1751e3b68939e", "is_ignored": false, "lines": "    {{ content|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 23, "line": 5, "offset": 92}, "start": {"col": 20, "line": 5, "offset": 89}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/custom_html_report_wysiwyg_content.html", "start": {"col": 5, "line": 5, "offset": 74}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 61, "line": 307, "offset": 12436}, "extra": {"fingerprint": "17d8767c411532f933744b0781dfaf63", "is_ignored": false, "lines": "                punchcard(\"#punchcard\", {{ punchcard|safe }}, {{ ticks|safe }});", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 61, "line": 307, "offset": 12436}, "start": {"col": 58, "line": 307, "offset": 12433}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/dashboard-metrics.html", "start": {"col": 41, "line": 307, "offset": 12416}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 79, "line": 307, "offset": 12454}, "extra": {"fingerprint": "2c1ef420164f7c03d105718695748d25", "is_ignored": false, "lines": "                punchcard(\"#punchcard\", {{ punchcard|safe }}, {{ ticks|safe }});", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 79, "line": 307, "offset": 12454}, "start": {"col": 76, "line": 307, "offset": 12451}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/dashboard-metrics.html", "start": {"col": 63, "line": 307, "offset": 12438}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 39, "line": 284, "offset": 14754}, "extra": {"fingerprint": "28b00e33b99844fd527209fa24c0a7c6", "is_ignored": false, "lines": "                month = {{month|safe}};", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": "}}", "end": {"col": 39, "line": 284, "offset": 14754}, "start": {"col": 37, "line": 284, "offset": 14752}, "unique_id": {"md5sum": "84522f48972fc21576f1f630b2a1f4a3", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/dashboard.html", "start": {"col": 25, "line": 284, "offset": 14740}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 61, "line": 294, "offset": 15190}, "extra": {"fingerprint": "d800f91f75fcdaada88a1f0198b7f7f0", "is_ignored": false, "lines": "                punchcard(\"#punchcard\", {{ punchcard|safe }}, {{ ticks|safe }});", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 61, "line": 294, "offset": 15190}, "start": {"col": 58, "line": 294, "offset": 15187}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/dashboard.html", "start": {"col": 41, "line": 294, "offset": 15170}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 79, "line": 294, "offset": 15208}, "extra": {"fingerprint": "4501be4587c471a78b31913b8ad3be93", "is_ignored": false, "lines": "                punchcard(\"#punchcard\", {{ punchcard|safe }}, {{ ticks|safe }});", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 79, "line": 294, "offset": 15208}, "start": {"col": 76, "line": 294, "offset": 15205}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/dashboard.html", "start": {"col": 63, "line": 294, "offset": 15192}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 58, "line": 33, "offset": 2054}, "extra": {"fingerprint": "f5aaa9d19a3c5467a1d20646b5dc622a", "is_ignored": false, "lines": "    <td>{{ similar_finding|finding_display_status|safe }}&nbsp;{{ similar_finding|import_history }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 58, "line": 33, "offset": 2054}, "start": {"col": 55, "line": 33, "offset": 2051}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/finding_related_row.html", "start": {"col": 9, "line": 33, "offset": 2005}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 93, "line": 430, "offset": 30338}, "extra": {"fingerprint": "a461937b228e4f3571cf2bbc1f71d66e", "is_ignored": false, "lines": "                                <td class=\"nowrap\">{{ finding|finding_display_status|safe }}&nbsp;{{ finding|import_history }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 93, "line": 430, "offset": 30338}, "start": {"col": 90, "line": 430, "offset": 30335}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/findings_list_snippet.html", "start": {"col": 52, "line": 430, "offset": 30297}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 76, "line": 845, "offset": 35142}, "extra": {"fingerprint": "a7107054a3395ba4716f7e7c4db75227", "is_ignored": false, "lines": "                ticks.push([{{ forloop.counter0 }}, \"{{ values.week|safe }}\"])", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 76, "line": 845, "offset": 35142}, "start": {"col": 73, "line": 845, "offset": 35139}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/product_metrics.html", "start": {"col": 29, "line": 845, "offset": 35095}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 76, "line": 859, "offset": 35754}, "extra": {"fingerprint": "154d21e94cc45d2f979e93b9c99100f4", "is_ignored": false, "lines": "                ticks.push([{{ forloop.counter0 }}, \"{{ values.week|safe }}\"]);", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 76, "line": 859, "offset": 35754}, "start": {"col": 73, "line": 859, "offset": 35751}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/product_metrics.html", "start": {"col": 29, "line": 859, "offset": 35707}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 76, "line": 873, "offset": 36472}, "extra": {"fingerprint": "ec8b27e0c0635c0cd38082c53da599c9", "is_ignored": false, "lines": "                ticks.push([{{ forloop.counter0 }}, \"{{ values.week|safe }}\"]);", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 76, "line": 873, "offset": 36472}, "start": {"col": 73, "line": 873, "offset": 36469}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/product_metrics.html", "start": {"col": 29, "line": 873, "offset": 36425}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 76, "line": 877, "offset": 36710}, "extra": {"fingerprint": "3e5d8e9247bb6e0af97ef05182a3186a", "is_ignored": false, "lines": "                ticks.push([{{ forloop.counter0 }}, \"{{ values.week|safe }}\"]);", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 76, "line": 877, "offset": 36710}, "start": {"col": 73, "line": 877, "offset": 36707}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/product_metrics.html", "start": {"col": 29, "line": 877, "offset": 36663}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 76, "line": 881, "offset": 36946}, "extra": {"fingerprint": "d18081a2872607441505db9abce0d52c", "is_ignored": false, "lines": "                ticks.push([{{ forloop.counter0 }}, \"{{ values.week|safe }}\"]);", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 76, "line": 881, "offset": 36946}, "start": {"col": 73, "line": 881, "offset": 36943}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/product_metrics.html", "start": {"col": 29, "line": 881, "offset": 36899}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 57, "line": 933, "offset": 38674}, "extra": {"fingerprint": "2ab5f5bdfa0d0840ac859c3e9adceca2", "is_ignored": false, "lines": "            punchcard(\"#punchcard\", {{ punchcard|safe }}, {{ ticks|safe }});", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 57, "line": 933, "offset": 38674}, "start": {"col": 54, "line": 933, "offset": 38671}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/product_metrics.html", "start": {"col": 37, "line": 933, "offset": 38654}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 75, "line": 933, "offset": 38692}, "extra": {"fingerprint": "1eab81a03ccc726bc89bdad7576bea6b", "is_ignored": false, "lines": "            punchcard(\"#punchcard\", {{ punchcard|safe }}, {{ ticks|safe }});", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 75, "line": 933, "offset": 38692}, "start": {"col": 72, "line": 933, "offset": 38689}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/product_metrics.html", "start": {"col": 59, "line": 933, "offset": 38676}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 100, "line": 27, "offset": 1482}, "extra": {"fingerprint": "dd83cf2dd034730e634014df8bbf2eeb", "is_ignored": false, "lines": "                                            <td>{{ endpoint|endpoint_display_status:finding|safe }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 100, "line": 27, "offset": 1482}, "start": {"col": 97, "line": 27, "offset": 1479}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/snippets/endpoints.html", "start": {"col": 49, "line": 27, "offset": 1431}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 100, "line": 59, "offset": 3300}, "extra": {"fingerprint": "7826afbaecc322c215b1401d3fe9540a", "is_ignored": false, "lines": "                                            <td>{{ endpoint|endpoint_display_status:finding|safe }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 100, "line": 59, "offset": 3300}, "start": {"col": 97, "line": 59, "offset": 3297}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/snippets/endpoints.html", "start": {"col": 49, "line": 59, "offset": 3249}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 95, "line": 61, "offset": 3505}, "extra": {"fingerprint": "dde8bdd950206679473b257ab9612df3", "is_ignored": false, "lines": "                                            <td>{{ endpoint|endpoint_mitigator:finding|safe }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 95, "line": 61, "offset": 3505}, "start": {"col": 92, "line": 61, "offset": 3502}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/snippets/endpoints.html", "start": {"col": 49, "line": 61, "offset": 3459}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 96, "line": 140, "offset": 8214}, "extra": {"fingerprint": "cb4142b263d33874eb88b6980b0d1157", "is_ignored": false, "lines": "                                        <td>{{ endpoint|endpoint_display_status:finding|safe }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 96, "line": 140, "offset": 8214}, "start": {"col": 93, "line": 140, "offset": 8211}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/snippets/endpoints.html", "start": {"col": 45, "line": 140, "offset": 8163}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 96, "line": 194, "offset": 11755}, "extra": {"fingerprint": "0edefe85d10815d891ee34a8c32413da", "is_ignored": false, "lines": "                                        <td>{{ endpoint|endpoint_display_status:finding|safe }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 96, "line": 194, "offset": 11755}, "start": {"col": 93, "line": 194, "offset": 11752}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/snippets/endpoints.html", "start": {"col": 45, "line": 194, "offset": 11704}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 91, "line": 196, "offset": 11952}, "extra": {"fingerprint": "3e1cf27e7966870f64b998ab8b5ea52e", "is_ignored": false, "lines": "                                        <td>{{ endpoint|endpoint_mitigator:finding|safe }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 91, "line": 196, "offset": 11952}, "start": {"col": 88, "line": 196, "offset": 11949}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/snippets/endpoints.html", "start": {"col": 45, "line": 196, "offset": 11906}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 51, "line": 133, "offset": 5147}, "extra": {"fingerprint": "9854c13a8ae2b079cc07cc18dab25c4c", "is_ignored": false, "lines": "                                <td>{{ t.0|safe }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 51, "line": 133, "offset": 5147}, "start": {"col": 48, "line": 133, "offset": 5144}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_engineer.html", "start": {"col": 37, "line": 133, "offset": 5133}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 51, "line": 529, "offset": 20218}, "extra": {"fingerprint": "b3f8c9873aca2440528bf3e4ca2e0954", "is_ignored": false, "lines": "                                <td>{{ t.0|safe }}</td>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 51, "line": 529, "offset": 20218}, "start": {"col": 48, "line": 529, "offset": 20215}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_engineer.html", "start": {"col": 37, "line": 529, "offset": 20204}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 39, "line": 595, "offset": 22682}, "extra": {"fingerprint": "fb5c20e7d46e6afce86a25693e74010a", "is_ignored": false, "lines": "                month = {{month|safe}};", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": "}}", "end": {"col": 39, "line": 595, "offset": 22682}, "start": {"col": 37, "line": 595, "offset": 22680}, "unique_id": {"md5sum": "84522f48972fc21576f1f630b2a1f4a3", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_engineer.html", "start": {"col": 25, "line": 595, "offset": 22668}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 39, "line": 611, "offset": 23259}, "extra": {"fingerprint": "6d5a85d76f665542a684f120c4287f62", "is_ignored": false, "lines": "                month = {{month|safe}};", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": "}}", "end": {"col": 39, "line": 611, "offset": 23259}, "start": {"col": 37, "line": 611, "offset": 23257}, "unique_id": {"md5sum": "84522f48972fc21576f1f630b2a1f4a3", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_engineer.html", "start": {"col": 25, "line": 611, "offset": 23245}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 39, "line": 627, "offset": 23850}, "extra": {"fingerprint": "ee2a5b0ca0c963a2cd6ad7e7eb952136", "is_ignored": false, "lines": "                month = {{month|safe}};", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": "}}", "end": {"col": 39, "line": 627, "offset": 23850}, "start": {"col": 37, "line": 627, "offset": 23848}, "unique_id": {"md5sum": "84522f48972fc21576f1f630b2a1f4a3", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_engineer.html", "start": {"col": 25, "line": 627, "offset": 23836}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 39, "line": 643, "offset": 24457}, "extra": {"fingerprint": "95047307e7838e70b74174a2417303f5", "is_ignored": false, "lines": "                month = {{month|safe}};", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": "}}", "end": {"col": 39, "line": 643, "offset": 24457}, "start": {"col": 37, "line": 643, "offset": 24455}, "unique_id": {"md5sum": "84522f48972fc21576f1f630b2a1f4a3", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_engineer.html", "start": {"col": 25, "line": 643, "offset": 24443}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 74, "line": 282, "offset": 16634}, "extra": {"fingerprint": "a7cf5271860d75fdc89cc4d44c5ca19e", "is_ignored": false, "lines": "                                {{ finding|finding_display_status|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 74, "line": 282, "offset": 16634}, "start": {"col": 71, "line": 282, "offset": 16631}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_finding.html", "start": {"col": 33, "line": 282, "offset": 16593}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 70, "line": 285, "offset": 16789}, "extra": {"fingerprint": "808f46cda2c032e9b6f11d6a9ac06e1c", "is_ignored": false, "lines": "                            {{ finding|finding_display_status|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 70, "line": 285, "offset": 16789}, "start": {"col": 67, "line": 285, "offset": 16786}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_finding.html", "start": {"col": 29, "line": 285, "offset": 16748}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 83, "line": 407, "offset": 23476}, "extra": {"fingerprint": "c2082d8c04d10b0f42f6a81f54dd7547", "is_ignored": false, "lines": "                            {{ finding.get_sast_source_file_path_with_link|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 83, "line": 407, "offset": 23476}, "start": {"col": 80, "line": 407, "offset": 23473}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_finding.html", "start": {"col": 29, "line": 407, "offset": 23422}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 71, "line": 433, "offset": 24401}, "extra": {"fingerprint": "71f6185779c8cbb60bf48abb4b5a5e0b", "is_ignored": false, "lines": "                            {{ finding.get_file_path_with_link|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 71, "line": 433, "offset": 24401}, "start": {"col": 68, "line": 433, "offset": 24398}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_finding.html", "start": {"col": 29, "line": 433, "offset": 24359}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 67, "line": 495, "offset": 26832}, "extra": {"fingerprint": "a324d314b39f0337f5f70a7fd9afa6b2", "is_ignored": false, "lines": "                        {{ finding.get_file_path_with_link|safe }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 67, "line": 495, "offset": 26832}, "start": {"col": 64, "line": 495, "offset": 26829}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_finding.html", "start": {"col": 25, "line": 495, "offset": 26790}}, {"check_id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "end": {"col": 85, "line": 866, "offset": 53358}, "extra": {"fingerprint": "a19b63d41bae1976d626315c94e7e7f2", "is_ignored": false, "lines": "                        <td class=\"nowrap\">{{ finding|finding_display_status|safe }}&nbsp;{{ finding|import_history }}", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "shortlink": "https://sg.run/W8og", "source": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe", "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 85, "line": 866, "offset": 53358}, "start": {"col": 82, "line": 866, "offset": 53355}, "unique_id": {"md5sum": "50c8775f03397bb7355b65bd26b2a9c9", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templates/dojo/view_test.html", "start": {"col": 44, "line": 866, "offset": 53317}}, {"check_id": "python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe", "end": {"col": 59, "line": 119, "offset": 3849}, "extra": {"fingerprint": "795e7ba4d4fd41f1e9073ad036e95269", "is_ignored": false, "lines": "@register.filter(is_safe=True, needs_autoescape=True)\n@stringfilter\ndef linebreaksasciidocbr(value, autoescape=None):\n    \"\"\"\n    Converts all newlines in a piece of plain text to HTML line breaks\n    (``+ <br />``).\n    \"\"\"\n    autoescape = autoescape and not isinstance(value, SafeData)\n    value = normalize_newlines(value)\n    if autoescape:\n        value = escape(value)\n\n    return mark_safe(value.replace('\\n', '&nbsp;+<br />'))", "message": "Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.1/topics/security/#cross-site-scripting-xss-protection", "https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping", "https://stackoverflow.com/questions/7665512/why-use-is-safe"], "shortlink": "https://sg.run/7o12", "source": "https://semgrep.dev/r/python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe", "technology": ["django"]}, "metavars": {"$FILTER": {"abstract_content": "linebreaksasciidocbr", "end": {"col": 25, "line": 109, "offset": 3506}, "start": {"col": 5, "line": 109, "offset": 3486}, "unique_id": {"md5sum": "76b3056ae9a7bd2738a96dda497fd07a", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 1, "line": 107, "offset": 3414}}, {"check_id": "python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe", "end": {"col": 16, "line": 321, "offset": 10761}, "extra": {"fingerprint": "41c62a09536945d6a659c20b1916f76e", "is_ignored": false, "lines": "@register.filter(is_safe=True, needs_autoescape=False)\n@stringfilter\ndef action_log_entry(value, autoescape=None):\n    import json\n    history = json.loads(value)\n    text = ''\n    for k in history.keys():\n        text += k.capitalize() + ' changed from \"' + \\\n                history[k][0] + '\" to \"' + history[k][1] + '\"\\n'\n    return text", "message": "Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.1/topics/security/#cross-site-scripting-xss-protection", "https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping", "https://stackoverflow.com/questions/7665512/why-use-is-safe"], "shortlink": "https://sg.run/7o12", "source": "https://semgrep.dev/r/python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe", "technology": ["django"]}, "metavars": {"$FILTER": {"abstract_content": "action_log_entry", "end": {"col": 21, "line": 314, "offset": 10509}, "start": {"col": 5, "line": 314, "offset": 10493}, "unique_id": {"md5sum": "5a433ae6157f7a79ec0e6afe1f0ad929", "type": "AST"}}}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 1, "line": 312, "offset": 10420}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 66, "line": 1051, "offset": 48273}, "extra": {"fingerprint": "62681873d650c5dd178f4b8572460567", "is_ignored": false, "lines": "            mark_safe(\n                'Finding template added successfully. You may edit it <a href=\"%s\">here</a>.'\n                % reverse('edit_template', args=(template.id, ))),", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/finding/views.py", "start": {"col": 13, "line": 1049, "offset": 48103}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 37, "line": 66, "offset": 3403}, "extra": {"fingerprint": "cc332aa370e37d5f264cc0f6a6f36c18", "is_ignored": false, "lines": "        return mark_safe(popup_plus)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/forms.py", "start": {"col": 16, "line": 66, "offset": 3382}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 44, "line": 130, "offset": 5516}, "extra": {"fingerprint": "68e2b97f1e6906abc10a15278c41f92f", "is_ignored": false, "lines": "        return mark_safe('\\n'.join(output))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/forms.py", "start": {"col": 16, "line": 130, "offset": 5488}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 109, "line": 149, "offset": 6622}, "extra": {"fingerprint": "a56e57fe61ad8a7cd2a3f8e44c7c2222", "is_ignored": false, "lines": "        return mark_safe(\n            \"<div data-multiple='true'  class='panel panel-available-widget'><div class='panel-heading' title='Click \"\n            \"and drag to move' data-toggle='tooltip'><div class='clearfix'><h5 style='width: 90%' class='pull-left'>\" +\n            self.get_html() + \"</h5><span class='fa fa-arrows pull-right icon'></span></div></div>\"\n                              \"<form id='page-break'><input type='hidden' name='page-break'/></form></div>\")", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 145, "offset": 6164}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 170, "offset": 7456}, "extra": {"fingerprint": "b1a0e48b1ccfede7c0d939bbff379d29", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 170, "offset": 7441}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 195, "offset": 8837}, "extra": {"fingerprint": "50c4b05987c4941e14ed6b62fb213d83", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 195, "offset": 8822}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 218, "offset": 9948}, "extra": {"fingerprint": "e7948b2c1c9278251c3cdde257384692", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 218, "offset": 9933}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 231, "offset": 10458}, "extra": {"fingerprint": "c54f9b1972d42bae9cefe985637d33f0", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 231, "offset": 10443}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 35, "line": 236, "offset": 10747}, "extra": {"fingerprint": "7c98f177c933a1148d4b0d96ae39b08e", "is_ignored": false, "lines": "        return mark_safe(asciidoc)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 236, "offset": 10728}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 242, "offset": 11058}, "extra": {"fingerprint": "77032622f1c1be3fc328a61b072fb080", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 242, "offset": 11043}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 35, "line": 295, "offset": 13083}, "extra": {"fingerprint": "2d70c06d3890353e6120f7c48b8783bd", "is_ignored": false, "lines": "        return mark_safe(asciidoc)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 295, "offset": 13064}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 305, "offset": 13602}, "extra": {"fingerprint": "5ecb89ac818a9db8e2943bc35284f71a", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 305, "offset": 13587}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 317, "offset": 14204}, "extra": {"fingerprint": "d5dfff37f8c7026d50ff60ef833e9036", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 317, "offset": 14189}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 366, "offset": 16065}, "extra": {"fingerprint": "5f03290582bf23e5eff1a5c26635e823", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 366, "offset": 16050}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 35, "line": 375, "offset": 16565}, "extra": {"fingerprint": "f91c67daed4ee084f4fb891b81c9f774", "is_ignored": false, "lines": "        return mark_safe(asciidoc)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 375, "offset": 16546}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 385, "offset": 17031}, "extra": {"fingerprint": "b1cfe210f1274201b18f8b3a1dae3f05", "is_ignored": false, "lines": "        return mark_safe(html)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/reports/widgets.py", "start": {"col": 16, "line": 385, "offset": 17016}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 102, "line": 85, "offset": 3007}, "extra": {"fingerprint": "4dcbf38e620a5a6c3628eb77ab5515c5", "is_ignored": false, "lines": "        return mark_safe(bleach.clean(markdown_text, markdown_tags, markdown_attrs, markdown_styles))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 85, "offset": 2921}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 59, "line": 119, "offset": 3849}, "extra": {"fingerprint": "460a7a717dcd8cf1963628df96b781d2", "is_ignored": false, "lines": "    return mark_safe(value.replace('\\n', '&nbsp;+<br />'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 12, "line": 119, "offset": 3802}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 31, "line": 149, "offset": 4492}, "extra": {"fingerprint": "e52b5a1599b19dc87cc5ce9e1c5af7c0", "is_ignored": false, "lines": "    return mark_safe(__docs__)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 12, "line": 149, "offset": 4473}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 28, "line": 279, "offset": 9220}, "extra": {"fingerprint": "289e76f501a1894e204f105f2362cefb", "is_ignored": false, "lines": "    return mark_safe(title)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 12, "line": 279, "offset": 9204}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 51, "line": 480, "offset": 15467}, "extra": {"fingerprint": "89e88ac649eade0794b771c99d178566", "is_ignored": false, "lines": "        return mark_safe(stars(5, 5, 'Very High'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 480, "offset": 15432}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 46, "line": 482, "offset": 15555}, "extra": {"fingerprint": "e7c1f56ad59576292f9a313571597cbd", "is_ignored": false, "lines": "        return mark_safe(stars(4, 5, 'High'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 482, "offset": 15525}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 48, "line": 484, "offset": 15647}, "extra": {"fingerprint": "d19497d9e13ad37f70c02d980175f345", "is_ignored": false, "lines": "        return mark_safe(stars(3, 5, 'Medium'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 484, "offset": 15615}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 45, "line": 486, "offset": 15733}, "extra": {"fingerprint": "c4c3b0ac838b6e1b8234246a7ea8cd75", "is_ignored": false, "lines": "        return mark_safe(stars(2, 5, 'Low'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 486, "offset": 15704}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 50, "line": 488, "offset": 15829}, "extra": {"fingerprint": "f2140e1e1d5df6788e0d0f47a15ca0b0", "is_ignored": false, "lines": "        return mark_safe(stars(1, 5, 'Very Low'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 488, "offset": 15795}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 46, "line": 490, "offset": 15917}, "extra": {"fingerprint": "f007475c3d66feb4a3efcff407980c81", "is_ignored": false, "lines": "        return mark_safe(stars(0, 5, 'None'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 490, "offset": 15887}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 50, "line": 506, "offset": 16284}, "extra": {"fingerprint": "3d44587686752ef922f0ebc919919aad", "is_ignored": false, "lines": "        return mark_safe(icon('list-alt', 'Web'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 506, "offset": 16250}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 53, "line": 508, "offset": 16381}, "extra": {"fingerprint": "4e6790ddb70d3c90eb3fdf8ac5274db3", "is_ignored": false, "lines": "        return mark_safe(icon('desktop', 'Desktop'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 508, "offset": 16344}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 51, "line": 510, "offset": 16475}, "extra": {"fingerprint": "8b6d3dcbb13a52a1af77966bcf4d7763", "is_ignored": false, "lines": "        return mark_safe(icon('mobile', 'Mobile'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 510, "offset": 16440}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 54, "line": 512, "offset": 16577}, "extra": {"fingerprint": "090fcee3c16674205bcc92a56bfb3802", "is_ignored": false, "lines": "        return mark_safe(icon('plug', 'Web Service'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 512, "offset": 16539}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 63, "line": 514, "offset": 16671}, "extra": {"fingerprint": "e5145ac7f30652cdb1c56c4f65ebfa54", "is_ignored": false, "lines": "        return mark_safe(icon('random', 'Internet of Things'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 514, "offset": 16624}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 53, "line": 522, "offset": 16895}, "extra": {"fingerprint": "f856250256ee0a0b4d7a53f1da0c3ba8", "is_ignored": false, "lines": "        return mark_safe(icon('compass', 'Explore'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 522, "offset": 16858}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 50, "line": 524, "offset": 16981}, "extra": {"fingerprint": "80fe91f66182cb7d98a201f62b70a710", "is_ignored": false, "lines": "        return mark_safe(icon('ship', 'Sustain'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 524, "offset": 16947}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 51, "line": 526, "offset": 17068}, "extra": {"fingerprint": "5ff79a95e5612d1a2e15070454cb616b", "is_ignored": false, "lines": "        return mark_safe(icon('moon-o', 'Retire'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 526, "offset": 17033}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 62, "line": 534, "offset": 17313}, "extra": {"fingerprint": "516970b38be8fa53c93c2447dac93c4c", "is_ignored": false, "lines": "        return mark_safe(icon('book', 'Third-Party Library'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 534, "offset": 17267}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 53, "line": 536, "offset": 17408}, "extra": {"fingerprint": "af41a21f2001376e56480a803be52916", "is_ignored": false, "lines": "        return mark_safe(icon('money', 'Purchased'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 536, "offset": 17371}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 67, "line": 538, "offset": 17518}, "extra": {"fingerprint": "140ebc97a1b27f29d6ea6e0f0bbe3fc1", "is_ignored": false, "lines": "        return mark_safe(icon('suitcase', 'Contractor Developed'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 538, "offset": 17467}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 63, "line": 540, "offset": 17634}, "extra": {"fingerprint": "d8b5cb2bf073671beef7e9f7f6539a0c", "is_ignored": false, "lines": "        return mark_safe(icon('home', 'Internally Developed'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 540, "offset": 17587}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 54, "line": 542, "offset": 17732}, "extra": {"fingerprint": "6927f718e1a0c9526d74fd06e82dd23f", "is_ignored": false, "lines": "        return mark_safe(icon('code', 'Open Source'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 542, "offset": 17694}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 54, "line": 544, "offset": 17829}, "extra": {"fingerprint": "fd62c435900b2ee65f6b1051eeeb7bc5", "is_ignored": false, "lines": "        return mark_safe(icon('globe', 'Outsourced'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 544, "offset": 17791}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 61, "line": 552, "offset": 18043}, "extra": {"fingerprint": "07d5314deeec52d6c2a3d9a7d090efeb", "is_ignored": false, "lines": "        return mark_safe(icon('users', 'External Audience'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 552, "offset": 17998}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 63, "line": 560, "offset": 18204}, "extra": {"fingerprint": "ee79e799e968832ec4304d4b8309eb36", "is_ignored": false, "lines": "        return mark_safe(icon('cloud', 'Internet Accessible'))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 16, "line": 560, "offset": 18157}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 63, "line": 895, "offset": 29065}, "extra": {"fingerprint": "c9a0bfeb3834a82ff3a35d9fd981b9a9", "is_ignored": false, "lines": "    return mark_safe(html % (icon, color, icon, inherited_text,  # indicator if jira_instance is missing\n                                esc(jira_project.jira_instance),\n                                esc(jira_project.project_key),\n                                esc(jira_project.component),\n                                esc(jira_project.push_all_issues),\n                                esc(jira_project.enable_engagement_epic_mapping),\n                                esc(jira_project.push_notes)))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 12, "line": 889, "offset": 28571}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 135, "line": 943, "offset": 30948}, "extra": {"fingerprint": "e105a13eb0b4532fa81ed437f36099ed", "is_ignored": false, "lines": "    return mark_safe(html % (icon, color, icon,\n                                esc(test_import.id),\n                                esc(test_import.import_settings.get('active', None)),\n                                esc(test_import.import_settings.get('verified', None)),\n                                esc(test_import.import_settings.get('minimum_severity', None)),\n                                esc(test_import.import_settings.get('close_old_findings', None)),\n                                esc(test_import.import_settings.get('push_to_jira', None)),\n                                esc(test_import.import_settings.get('tags', None)),\n                                esc(test_import.import_settings.get('endpoints', test_import.import_settings.get('endpoint', None)))))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 12, "line": 935, "offset": 30180}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 54, "line": 975, "offset": 32056}, "extra": {"fingerprint": "26933fd6df57218b85bc9007ee9c337c", "is_ignored": false, "lines": "    return mark_safe(html % (list_of_status_changes))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/display_tags.py", "start": {"col": 12, "line": 975, "offset": 32014}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 118, "line": 21, "offset": 749}, "extra": {"fingerprint": "33285be8a34b1e45959b181b80e806d8", "is_ignored": false, "lines": "                return mark_safe(bleach.clean(value, attributes=allowed_attributes, styles=['color', 'font-weight']))", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/get_banner.py", "start": {"col": 24, "line": 21, "offset": 655}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 24, "line": 26, "offset": 909}, "extra": {"fingerprint": "effa35fc1cbc1d2896460e000e1158d6", "is_ignored": false, "lines": "    return safe(inputs)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/navigation_tags.py", "start": {"col": 12, "line": 26, "offset": 897}}, {"check_id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "end": {"col": 22, "line": 68, "offset": 2110}, "extra": {"fingerprint": "4ba29c4f04701e0442c1ae862eb681f2", "is_ignored": false, "lines": "    return safe(link)", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe", "https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html"], "shortlink": "https://sg.run/yd0P", "source": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html", "technology": ["django"]}, "metavars": {}, "severity": "WARNING"}, "path": "dojo/templatetags/navigation_tags.py", "start": {"col": 12, "line": 68, "offset": 2100}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 64, "line": 17, "offset": 604}, "extra": {"fingerprint": "faeeb8a192b240577111b27d26e8edaf", "is_ignored": false, "lines": "    <script type=\"application/javascript\" src=\"{{ STATIC_URL }}admin/js/admin/RelatedObjectLookups.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/add_choices.html", "start": {"col": 48, "line": 17, "offset": 588}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 68, "offset": 2652}, "extra": {"fingerprint": "c4d89fc490fdb46a016fe0ac2ee87f8e", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}jquery/dist/jquery.min.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 68, "offset": 2636}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 70, "offset": 2738}, "extra": {"fingerprint": "90fa436d7d38e0bea7774fcb6219d5df", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}jquery-ui/jquery-ui.min.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 70, "offset": 2722}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 72, "offset": 2840}, "extra": {"fingerprint": "9b1a00ecbdfa670da3cdc10b09400cee", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}bootstrap/dist/js/bootstrap.min.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 72, "offset": 2824}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 75, "offset": 2954}, "extra": {"fingerprint": "c15817a17f6781e201bfc945454a250b", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}metisMenu/dist/metisMenu.min.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 75, "offset": 2938}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 78, "offset": 3060}, "extra": {"fingerprint": "b54e56b305ed80044f8367032572396f", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}startbootstrap-sb-admin-2/dist/js/sb-admin-2.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 78, "offset": 3044}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 80, "offset": 3177}, "extra": {"fingerprint": "0d1ae673962f3bff2065302d862e6d93", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}moment/min/moment.min.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 80, "offset": 3161}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 81, "offset": 3242}, "extra": {"fingerprint": "1aabdcee1f905b4a8a2d9bb393184398", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}fullcalendar/dist/fullcalendar.min.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 81, "offset": 3226}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 83, "offset": 3353}, "extra": {"fingerprint": "729c287a5e0a971ec0daee504ba6162e", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}jquery.tablesorter/dist/js/jquery.tablesorter.min.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 83, "offset": 3337}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 30, "line": 85, "offset": 3462}, "extra": {"fingerprint": "15588579d624c1905195355f75549a68", "is_ignored": false, "lines": "<script src=\"{{ STATIC_URL }}dojo/js/index.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 14, "line": 85, "offset": 3446}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 60, "line": 86, "offset": 3549}, "extra": {"fingerprint": "04014c554b3e07c16e3f1e547d03c6a8", "is_ignored": false, "lines": "<script type=\"application/javascript\" src=\"{{ STATIC_URL }}admin/js/admin/RelatedObjectLookups.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/create_related_question.html", "start": {"col": 44, "line": 86, "offset": 3533}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 64, "line": 29, "offset": 1060}, "extra": {"fingerprint": "c066f996fedf236bc82d90bb5d091eac", "is_ignored": false, "lines": "    <script type=\"application/javascript\" src=\"{{ STATIC_URL }}admin/js/admin/RelatedObjectLookups.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/edit_question.html", "start": {"col": 48, "line": 29, "offset": 1044}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 64, "line": 29, "offset": 1101}, "extra": {"fingerprint": "2a4cbc11426108892088188e0c8a21e8", "is_ignored": false, "lines": "    <script type=\"application/javascript\" src=\"{{ STATIC_URL }}admin/js/admin/RelatedObjectLookups.js\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/defectDojo-engagement-survey/edit_survey_questions.html", "start": {"col": 48, "line": 29, "offset": 1085}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 252, "offset": 12822}, "extra": {"fingerprint": "6df25651037e8a0f7b8d25a764de5f41", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"jquery/dist/jquery.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/endpoint_pdf_report.html", "start": {"col": 18, "line": 252, "offset": 12812}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 254, "offset": 12937}, "extra": {"fingerprint": "9db8053061c1f538ffe2b5521a279b2f", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/excanvas.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/endpoint_pdf_report.html", "start": {"col": 18, "line": 254, "offset": 12927}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 255, "offset": 13011}, "extra": {"fingerprint": "816153be5710d7e8be660816e0dc99d4", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/endpoint_pdf_report.html", "start": {"col": 18, "line": 255, "offset": 13001}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 256, "offset": 13084}, "extra": {"fingerprint": "75fc7b90a06b1c15fc1b927187477f5c", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.resize.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/endpoint_pdf_report.html", "start": {"col": 18, "line": 256, "offset": 13074}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 257, "offset": 13164}, "extra": {"fingerprint": "c16964a41d2657b252723788abd4870f", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.time.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/endpoint_pdf_report.html", "start": {"col": 18, "line": 257, "offset": 13154}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 258, "offset": 13242}, "extra": {"fingerprint": "a8ce502f6ab68b113e55157e1da7fa29", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.stack.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/endpoint_pdf_report.html", "start": {"col": 18, "line": 258, "offset": 13232}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 259, "offset": 13321}, "extra": {"fingerprint": "f6f0977e61caabea7046a167b39a4bfe", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot-axis/jquery.flot.axislabels.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/endpoint_pdf_report.html", "start": {"col": 18, "line": 259, "offset": 13311}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 260, "offset": 13410}, "extra": {"fingerprint": "eef60d1ba499385841ce3048948501c8", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"dojo/js/metrics.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/endpoint_pdf_report.html", "start": {"col": 18, "line": 260, "offset": 13400}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 386, "offset": 19900}, "extra": {"fingerprint": "4c43bc37486f42b7e0deff858ecfa9a0", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"jquery/dist/jquery.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/engagement_pdf_report.html", "start": {"col": 18, "line": 386, "offset": 19890}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 388, "offset": 20015}, "extra": {"fingerprint": "68a19b8af368cbb855920e282ccc2d32", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/excanvas.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/engagement_pdf_report.html", "start": {"col": 18, "line": 388, "offset": 20005}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 389, "offset": 20089}, "extra": {"fingerprint": "242d82ab9289cc380a7b154a21fb2282", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/engagement_pdf_report.html", "start": {"col": 18, "line": 389, "offset": 20079}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 390, "offset": 20162}, "extra": {"fingerprint": "f43a5bde96b5d760f7313634912d0338", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.resize.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/engagement_pdf_report.html", "start": {"col": 18, "line": 390, "offset": 20152}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 391, "offset": 20242}, "extra": {"fingerprint": "af6b12039fdfba0fd37faadbe726e1d9", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.time.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/engagement_pdf_report.html", "start": {"col": 18, "line": 391, "offset": 20232}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 392, "offset": 20320}, "extra": {"fingerprint": "830a5568a34853803b4f214131bd29ae", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.stack.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/engagement_pdf_report.html", "start": {"col": 18, "line": 392, "offset": 20310}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 393, "offset": 20399}, "extra": {"fingerprint": "b12054c51131bce7ff462288053f3656", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot-axis/jquery.flot.axislabels.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/engagement_pdf_report.html", "start": {"col": 18, "line": 393, "offset": 20389}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 394, "offset": 20488}, "extra": {"fingerprint": "8b910fd495e89ac41807e7b46927322d", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"dojo/js/metrics.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/engagement_pdf_report.html", "start": {"col": 18, "line": 394, "offset": 20478}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 226, "offset": 11565}, "extra": {"fingerprint": "efcc1cae7726da4d2399d18131393faf", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"jquery/dist/jquery.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/finding_pdf_report.html", "start": {"col": 18, "line": 226, "offset": 11555}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 228, "offset": 11680}, "extra": {"fingerprint": "c5607b59015951bc7401e5e5a7f806e0", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/excanvas.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/finding_pdf_report.html", "start": {"col": 18, "line": 228, "offset": 11670}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 229, "offset": 11754}, "extra": {"fingerprint": "7f4f29b195ab0e05aa4ca82f31e9a1d3", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/finding_pdf_report.html", "start": {"col": 18, "line": 229, "offset": 11744}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 230, "offset": 11827}, "extra": {"fingerprint": "7da4a8090e66b015297f7b1260a703fa", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.resize.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/finding_pdf_report.html", "start": {"col": 18, "line": 230, "offset": 11817}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 231, "offset": 11907}, "extra": {"fingerprint": "82586f1774648c5817f35cec065a079e", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.time.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/finding_pdf_report.html", "start": {"col": 18, "line": 231, "offset": 11897}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 232, "offset": 11985}, "extra": {"fingerprint": "370438298f269960bea9abf43f357514", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.stack.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/finding_pdf_report.html", "start": {"col": 18, "line": 232, "offset": 11975}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 233, "offset": 12064}, "extra": {"fingerprint": "10ff83884160f8ab903d537852b3a79d", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot-axis/jquery.flot.axislabels.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/finding_pdf_report.html", "start": {"col": 18, "line": 233, "offset": 12054}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 234, "offset": 12153}, "extra": {"fingerprint": "afd79f5907aad6d740eefdc0f78f95f2", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"dojo/js/metrics.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/finding_pdf_report.html", "start": {"col": 18, "line": 234, "offset": 12143}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 54, "line": 99, "offset": 5627}, "extra": {"fingerprint": "4a17488d4d60275746d474e84fe8a61d", "is_ignored": false, "lines": "            $('#notification-scope').val('{{ scope }}');", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/notifications.html", "start": {"col": 43, "line": 99, "offset": 5616}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 302, "offset": 15912}, "extra": {"fingerprint": "dae3a146017388c1de45986d46fac743", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"jquery/dist/jquery.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 18, "line": 302, "offset": 15902}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 304, "offset": 16023}, "extra": {"fingerprint": "fc5cdccc4140a1732c187834f9192c25", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/excanvas.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 18, "line": 304, "offset": 16013}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 305, "offset": 16097}, "extra": {"fingerprint": "d0ac694eb166f46b2779537f4e3e75f7", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 18, "line": 305, "offset": 16087}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 306, "offset": 16170}, "extra": {"fingerprint": "5fb459b88dd775d1211c360a23067e51", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.resize.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 18, "line": 306, "offset": 16160}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 307, "offset": 16250}, "extra": {"fingerprint": "63287b48a063a5902fe1c5a1c8b62062", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot-axis/jquery.flot.axislabels.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 18, "line": 307, "offset": 16240}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 32, "line": 309, "offset": 16366}, "extra": {"fingerprint": "ba554728358e5853aaf6504c5bf2139d", "is_ignored": false, "lines": "        <script src=\"{{ host }}{% static \"jquery.flot.tooltip/js/jquery.flot.tooltip.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 22, "line": 309, "offset": 16356}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 32, "line": 310, "offset": 16473}, "extra": {"fingerprint": "7194a167fab7de185e25660beaa77e95", "is_ignored": false, "lines": "        <script src=\"{{ host }}{% static \"JUMFlot/javascripts/JUMFlot.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 22, "line": 310, "offset": 16463}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 32, "line": 311, "offset": 16565}, "extra": {"fingerprint": "04bf2c6295dcbf93e31962fa115515d7", "is_ignored": false, "lines": "        <script src=\"{{ host }}{% static \"JUMFlot/javascripts/jquery.flot.mouse.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 22, "line": 311, "offset": 16555}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 32, "line": 312, "offset": 16663}, "extra": {"fingerprint": "c5893fcd62e6a17118260bf3228bc582", "is_ignored": false, "lines": "        <script src=\"{{ host }}{% static \"JUMFlot/javascripts/jquery.flot.bubbles.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_endpoint_pdf_report.html", "start": {"col": 22, "line": 312, "offset": 16653}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 369, "offset": 19725}, "extra": {"fingerprint": "521cbd2d033221c491818b85408b1928", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"jquery/dist/jquery.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 18, "line": 369, "offset": 19715}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 371, "offset": 19836}, "extra": {"fingerprint": "613df85d9c27f106cf7f7f33cff7b170", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/excanvas.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 18, "line": 371, "offset": 19826}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 372, "offset": 19910}, "extra": {"fingerprint": "f5e449e4f90ba8182599693c07d184cb", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 18, "line": 372, "offset": 19900}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 373, "offset": 19983}, "extra": {"fingerprint": "b4ba5a2a35ae06fe34a85bb346224197", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.resize.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 18, "line": 373, "offset": 19973}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 374, "offset": 20063}, "extra": {"fingerprint": "d3c8e642b0d108ce4e8cd12e338f912f", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot-axis/jquery.flot.axislabels.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 18, "line": 374, "offset": 20053}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 32, "line": 376, "offset": 20179}, "extra": {"fingerprint": "1f31587f9c212044600aec573187700e", "is_ignored": false, "lines": "        <script src=\"{{ host }}{% static \"jquery.flot.tooltip/js/jquery.flot.tooltip.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 22, "line": 376, "offset": 20169}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 32, "line": 377, "offset": 20286}, "extra": {"fingerprint": "127c710b58e7514f708de8c5cf691c04", "is_ignored": false, "lines": "        <script src=\"{{ host }}{% static \"JUMFlot/javascripts/JUMFlot.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 22, "line": 377, "offset": 20276}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 32, "line": 378, "offset": 20378}, "extra": {"fingerprint": "82f80d7c1f8b207e89edab816afa00a9", "is_ignored": false, "lines": "        <script src=\"{{ host }}{% static \"JUMFlot/javascripts/jquery.flot.mouse.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 22, "line": 378, "offset": 20368}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 32, "line": 379, "offset": 20476}, "extra": {"fingerprint": "3d243b33f274be2663326715c2f0b7a2", "is_ignored": false, "lines": "        <script src=\"{{ host }}{% static \"JUMFlot/javascripts/jquery.flot.bubbles.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 22, "line": 379, "offset": 20466}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 381, "offset": 20588}, "extra": {"fingerprint": "b95cfd72e71c01a6c9ec7d1e59eb5ab5", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"dojo/js/metrics.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_pdf_report.html", "start": {"col": 18, "line": 381, "offset": 20578}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 288, "offset": 15990}, "extra": {"fingerprint": "2a04423e71dc2741da4c8e395ccc4a3a", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"jquery/dist/jquery.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_type_pdf_report.html", "start": {"col": 18, "line": 288, "offset": 15980}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 290, "offset": 16105}, "extra": {"fingerprint": "609236befdbd05fccd0f634286134fc6", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/excanvas.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_type_pdf_report.html", "start": {"col": 18, "line": 290, "offset": 16095}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 291, "offset": 16179}, "extra": {"fingerprint": "bbd8ba7f68d4e21d6147c3fd0f529315", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_type_pdf_report.html", "start": {"col": 18, "line": 291, "offset": 16169}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 292, "offset": 16252}, "extra": {"fingerprint": "2a08390fbe8c39d640f084ecc9e88c30", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.resize.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_type_pdf_report.html", "start": {"col": 18, "line": 292, "offset": 16242}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 293, "offset": 16332}, "extra": {"fingerprint": "821ecf7f0b917e7675e2d181e4b90f9a", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.time.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_type_pdf_report.html", "start": {"col": 18, "line": 293, "offset": 16322}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 294, "offset": 16410}, "extra": {"fingerprint": "4cbdb12b23476d7b5f4c6503f6352cc8", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.stack.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_type_pdf_report.html", "start": {"col": 18, "line": 294, "offset": 16400}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 295, "offset": 16489}, "extra": {"fingerprint": "e3ec67df19c7239fe1bc4e3b656c72ca", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot-axis/jquery.flot.axislabels.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_type_pdf_report.html", "start": {"col": 18, "line": 295, "offset": 16479}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 296, "offset": 16578}, "extra": {"fingerprint": "a6517417b4f5f38300d15946802c4dd0", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"dojo/js/metrics.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/product_type_pdf_report.html", "start": {"col": 18, "line": 296, "offset": 16568}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 401, "offset": 20813}, "extra": {"fingerprint": "13824bd5554ce5e116b9ed4f9de7b36f", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"jquery/dist/jquery.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/test_pdf_report.html", "start": {"col": 18, "line": 401, "offset": 20803}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 403, "offset": 20928}, "extra": {"fingerprint": "17f3cbfbbaa0c311f1df461c91da42d9", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/excanvas.min.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/test_pdf_report.html", "start": {"col": 18, "line": 403, "offset": 20918}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 404, "offset": 21002}, "extra": {"fingerprint": "3099e67027a1d4ba45dc8d2ad82e6bb4", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/test_pdf_report.html", "start": {"col": 18, "line": 404, "offset": 20992}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 405, "offset": 21075}, "extra": {"fingerprint": "d04eb34e856fe2b4f04e1921c63dbca2", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.resize.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/test_pdf_report.html", "start": {"col": 18, "line": 405, "offset": 21065}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 406, "offset": 21155}, "extra": {"fingerprint": "98d2a65c1a3fe7942bf7d1eabcd0f0a4", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.time.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/test_pdf_report.html", "start": {"col": 18, "line": 406, "offset": 21145}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 407, "offset": 21233}, "extra": {"fingerprint": "e15a9f7b811cd2577b2dd34de33266cb", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot/jquery.flot.stack.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/test_pdf_report.html", "start": {"col": 18, "line": 407, "offset": 21223}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 408, "offset": 21312}, "extra": {"fingerprint": "30d29f297454336062d138a6397e8b4c", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"flot-axis/jquery.flot.axislabels.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/test_pdf_report.html", "start": {"col": 18, "line": 408, "offset": 21302}}, {"check_id": "python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "end": {"col": 28, "line": 409, "offset": 21401}, "extra": {"fingerprint": "e32b4cf9bf55c9ed4f4fd485b8ad4b34", "is_ignored": false, "lines": "    <script src=\"{{ host }}{% static \"dojo/js/metrics.js\" %}\"></script>", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "metadata": {"category": "security", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A7: Cross-Site Scripting (XSS)", "references": ["https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A", "https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough", "https://github.com/ESAPI/owasp-esapi-js"], "shortlink": "https://sg.run/Ge7q", "source": "https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag", "technology": ["django"]}, "metavars": {}, "severity": "ERROR"}, "path": "dojo/templates/dojo/test_pdf_report.html", "start": {"col": 18, "line": 409, "offset": 21391}}]}